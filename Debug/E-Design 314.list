
E-Design 314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a8  0800a0a8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b0  0800a0b0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e24  2000008c  0800a144  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001eb0  0800a144  00021eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de71  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038b9  00000000  00000000  0003df2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  00042c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025af6  00000000  00000000  00043f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013764  00000000  00000000  00069a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8ac0  00000000  00000000  0007d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155c82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  00155d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009bb4 	.word	0x08009bb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	08009bb4 	.word	0x08009bb4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

//With DC offset removed-this will give correct information to UART (for TIC to verify) and Signal stored on SD card is in PCM- Will NEED to
//add offset again before sending to DAC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)//Cannot write blocking code here (code waiting for something to complete)
{
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(activeRecordState == RecordOne) {
 800050c:	4b81      	ldr	r3, [pc, #516]	; (8000714 <HAL_ADC_ConvCpltCallback+0x210>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d179      	bne.n	8000608 <HAL_ADC_ConvCpltCallback+0x104>
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e054      	b.n	80005c4 <HAL_ADC_ConvCpltCallback+0xc0>
			accumulator += recbuf[i];
 800051a:	4a7f      	ldr	r2, [pc, #508]	; (8000718 <HAL_ADC_ConvCpltCallback+0x214>)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	4b7d      	ldr	r3, [pc, #500]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4413      	add	r3, r2
 800052a:	4a7c      	ldr	r2, [pc, #496]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 800052c:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 800052e:	4a7a      	ldr	r2, [pc, #488]	; (8000718 <HAL_ADC_ConvCpltCallback+0x214>)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	4b79      	ldr	r3, [pc, #484]	; (8000720 <HAL_ADC_ConvCpltCallback+0x21c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	461a      	mov	r2, r3
 8000540:	4b78      	ldr	r3, [pc, #480]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000542:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 8000544:	4b77      	ldr	r3, [pc, #476]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	ee07 3a90 	vmov	s15, r3
 800054c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000550:	4b75      	ldr	r3, [pc, #468]	; (8000728 <HAL_ADC_ConvCpltCallback+0x224>)
 8000552:	edd3 7a00 	vldr	s15, [r3]
 8000556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800055a:	4b73      	ldr	r3, [pc, #460]	; (8000728 <HAL_ADC_ConvCpltCallback+0x224>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000564:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000568:	4b70      	ldr	r3, [pc, #448]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 800056a:	edd3 7a00 	vldr	s15, [r3]
 800056e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000576:	4b6d      	ldr	r3, [pc, #436]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 8000578:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 800057c:	4b6b      	ldr	r3, [pc, #428]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 800057e:	edd3 7a00 	vldr	s15, [r3]
 8000582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000586:	ee17 2a90 	vmov	r2, s15
 800058a:	4b66      	ldr	r3, [pc, #408]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 800058c:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 800058e:	4b65      	ldr	r3, [pc, #404]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b7f      	cmp	r3, #127	; 0x7f
 8000594:	dd02      	ble.n	800059c <HAL_ADC_ConvCpltCallback+0x98>
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000598:	227f      	movs	r2, #127	; 0x7f
 800059a:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 800059c:	4b61      	ldr	r3, [pc, #388]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80005a4:	da03      	bge.n	80005ae <HAL_ADC_ConvCpltCallback+0xaa>
 80005a6:	4b5f      	ldr	r3, [pc, #380]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 80005a8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80005ac:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 80005ae:	4b5d      	ldr	r3, [pc, #372]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2d9      	uxtb	r1, r3
 80005b4:	4a5e      	ldr	r2, [pc, #376]	; (8000730 <HAL_ADC_ConvCpltCallback+0x22c>)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	4413      	add	r3, r2
 80005ba:	460a      	mov	r2, r1
 80005bc:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ca:	dba6      	blt.n	800051a <HAL_ADC_ConvCpltCallback+0x16>
		}

		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 80005cc:	4b59      	ldr	r3, [pc, #356]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005d4:	4a57      	ldr	r2, [pc, #348]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80005d6:	6013      	str	r3, [r2, #0]

		if(numavg >= 204800){
 80005d8:	4b56      	ldr	r3, [pc, #344]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 80005e0:	db0f      	blt.n	8000602 <HAL_ADC_ConvCpltCallback+0xfe>
			average =accumulator/204800;//calculate average
 80005e2:	4b4e      	ldr	r3, [pc, #312]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a54      	ldr	r2, [pc, #336]	; (8000738 <HAL_ADC_ConvCpltCallback+0x234>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1412      	asrs	r2, r2, #16
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <HAL_ADC_ConvCpltCallback+0x21c>)
 80005f4:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 80005f6:	4b49      	ldr	r3, [pc, #292]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		}
		savemid = 1;
 8000602:	4b4e      	ldr	r3, [pc, #312]	; (800073c <HAL_ADC_ConvCpltCallback+0x238>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
	}

	if(activeRecordState == RecordTwo) {
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <HAL_ADC_ConvCpltCallback+0x210>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d179      	bne.n	8000704 <HAL_ADC_ConvCpltCallback+0x200>
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	e054      	b.n	80006c0 <HAL_ADC_ConvCpltCallback+0x1bc>
			accumulator += recbuf[i];
 8000616:	4a40      	ldr	r2, [pc, #256]	; (8000718 <HAL_ADC_ConvCpltCallback+0x214>)
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4413      	add	r3, r2
 8000626:	4a3d      	ldr	r2, [pc, #244]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 8000628:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 800062a:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <HAL_ADC_ConvCpltCallback+0x214>)
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <HAL_ADC_ConvCpltCallback+0x21c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	461a      	mov	r2, r3
 800063c:	4b39      	ldr	r3, [pc, #228]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 800063e:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 8000640:	4b38      	ldr	r3, [pc, #224]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <HAL_ADC_ConvCpltCallback+0x224>)
 800064e:	edd3 7a00 	vldr	s15, [r3]
 8000652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <HAL_ADC_ConvCpltCallback+0x224>)
 8000658:	edd3 7a00 	vldr	s15, [r3]
 800065c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000660:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 8000666:	edd3 7a00 	vldr	s15, [r3]
 800066a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800066e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 8000674:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <HAL_ADC_ConvCpltCallback+0x228>)
 800067a:	edd3 7a00 	vldr	s15, [r3]
 800067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000682:	ee17 2a90 	vmov	r2, s15
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000688:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b7f      	cmp	r3, #127	; 0x7f
 8000690:	dd02      	ble.n	8000698 <HAL_ADC_ConvCpltCallback+0x194>
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 8000694:	227f      	movs	r2, #127	; 0x7f
 8000696:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80006a0:	da03      	bge.n	80006aa <HAL_ADC_ConvCpltCallback+0x1a6>
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 80006a4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80006a8:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_ADC_ConvCpltCallback+0x220>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	b2d9      	uxtb	r1, r3
 80006b0:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <HAL_ADC_ConvCpltCallback+0x22c>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	460a      	mov	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	3301      	adds	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c6:	dba6      	blt.n	8000616 <HAL_ADC_ConvCpltCallback+0x112>
		}

		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006d0:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80006d2:	6013      	str	r3, [r2, #0]

		if(numavg >= 204800){
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 80006dc:	db0f      	blt.n	80006fe <HAL_ADC_ConvCpltCallback+0x1fa>
			average =accumulator/204800;//calculate average
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <HAL_ADC_ConvCpltCallback+0x234>)
 80006e4:	fb82 1203 	smull	r1, r2, r2, r3
 80006e8:	1412      	asrs	r2, r2, #16
 80006ea:	17db      	asrs	r3, r3, #31
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <HAL_ADC_ConvCpltCallback+0x21c>)
 80006f0:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_ADC_ConvCpltCallback+0x218>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_ADC_ConvCpltCallback+0x230>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
		}
		savemid_2 = 1;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_ADC_ConvCpltCallback+0x23c>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
	}


	if(activeRecordState == RecordThree) {
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_ADC_ConvCpltCallback+0x210>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b03      	cmp	r3, #3
 800070a:	f040 8092 	bne.w	8000832 <HAL_ADC_ConvCpltCallback+0x32e>
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e06c      	b.n	80007ee <HAL_ADC_ConvCpltCallback+0x2ea>
 8000714:	200001c5 	.word	0x200001c5
 8000718:	200005cc 	.word	0x200005cc
 800071c:	20000c00 	.word	0x20000c00
 8000720:	20000008 	.word	0x20000008
 8000724:	20001a40 	.word	0x20001a40
 8000728:	2000000c 	.word	0x2000000c
 800072c:	20001234 	.word	0x20001234
 8000730:	20000c04 	.word	0x20000c04
 8000734:	200009cc 	.word	0x200009cc
 8000738:	51eb851f 	.word	0x51eb851f
 800073c:	200000a9 	.word	0x200000a9
 8000740:	200000ab 	.word	0x200000ab
			accumulator += recbuf[i];
 8000744:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <HAL_ADC_ConvCpltCallback+0x33c>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <HAL_ADC_ConvCpltCallback+0x340>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a3b      	ldr	r2, [pc, #236]	; (8000844 <HAL_ADC_ConvCpltCallback+0x340>)
 8000756:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <HAL_ADC_ConvCpltCallback+0x33c>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b39      	ldr	r3, [pc, #228]	; (8000848 <HAL_ADC_ConvCpltCallback+0x344>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 800076c:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <HAL_ADC_ConvCpltCallback+0x34c>)
 800077c:	edd3 7a00 	vldr	s15, [r3]
 8000780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <HAL_ADC_ConvCpltCallback+0x34c>)
 8000786:	edd3 7a00 	vldr	s15, [r3]
 800078a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800078e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <HAL_ADC_ConvCpltCallback+0x350>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800079c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <HAL_ADC_ConvCpltCallback+0x350>)
 80007a2:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_ADC_ConvCpltCallback+0x350>)
 80007a8:	edd3 7a00 	vldr	s15, [r3]
 80007ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b0:	ee17 2a90 	vmov	r2, s15
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007b6:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b7f      	cmp	r3, #127	; 0x7f
 80007be:	dd02      	ble.n	80007c6 <HAL_ADC_ConvCpltCallback+0x2c2>
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007c2:	227f      	movs	r2, #127	; 0x7f
 80007c4:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80007ce:	da03      	bge.n	80007d8 <HAL_ADC_ConvCpltCallback+0x2d4>
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007d2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80007d6:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_ADC_ConvCpltCallback+0x348>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b2d9      	uxtb	r1, r3
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <HAL_ADC_ConvCpltCallback+0x354>)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	460a      	mov	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<1024; i++){//stored zero mean signal in new array/buffer
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007f4:	dba6      	blt.n	8000744 <HAL_ADC_ConvCpltCallback+0x240>
		}

		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_ADC_ConvCpltCallback+0x358>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_ADC_ConvCpltCallback+0x358>)
 8000800:	6013      	str	r3, [r2, #0]

		if(numavg >= 204800){
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_ADC_ConvCpltCallback+0x358>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 800080a:	db0f      	blt.n	800082c <HAL_ADC_ConvCpltCallback+0x328>
			average =accumulator/204800;//calculate average
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_ADC_ConvCpltCallback+0x340>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_ADC_ConvCpltCallback+0x35c>)
 8000812:	fb82 1203 	smull	r1, r2, r2, r3
 8000816:	1412      	asrs	r2, r2, #16
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_ADC_ConvCpltCallback+0x344>)
 800081e:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_ADC_ConvCpltCallback+0x340>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_ADC_ConvCpltCallback+0x358>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
		}
		savemid_3 = 1;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_ADC_ConvCpltCallback+0x360>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
	}


}
 8000832:	bf00      	nop
 8000834:	371c      	adds	r7, #28
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200005cc 	.word	0x200005cc
 8000844:	20000c00 	.word	0x20000c00
 8000848:	20000008 	.word	0x20000008
 800084c:	20001a40 	.word	0x20001a40
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20001234 	.word	0x20001234
 8000858:	20000c04 	.word	0x20000c04
 800085c:	200009cc 	.word	0x200009cc
 8000860:	51eb851f 	.word	0x51eb851f
 8000864:	200000ad 	.word	0x200000ad

08000868 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)//Cannot write blocking code here (code waiting for something to complete)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	if(activeRecordState == RecordOne) {
 8000870:	4b81      	ldr	r3, [pc, #516]	; (8000a78 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d179      	bne.n	800096c <HAL_ADC_ConvHalfCpltCallback+0x104>
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e054      	b.n	8000928 <HAL_ADC_ConvHalfCpltCallback+0xc0>
			accumulator += recbuf[i];
 800087e:	4a7f      	ldr	r2, [pc, #508]	; (8000a7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4b7d      	ldr	r3, [pc, #500]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	4a7c      	ldr	r2, [pc, #496]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8000890:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 8000892:	4a7a      	ldr	r2, [pc, #488]	; (8000a7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b79      	ldr	r3, [pc, #484]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b78      	ldr	r3, [pc, #480]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80008a6:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 80008a8:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008b4:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80008c0:	edd3 7a00 	vldr	s15, [r3]
 80008c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008cc:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008da:	4b6d      	ldr	r3, [pc, #436]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80008dc:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 80008e0:	4b6b      	ldr	r3, [pc, #428]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ea:	ee17 2a90 	vmov	r2, s15
 80008ee:	4b66      	ldr	r3, [pc, #408]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80008f0:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 80008f2:	4b65      	ldr	r3, [pc, #404]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b7f      	cmp	r3, #127	; 0x7f
 80008f8:	dd02      	ble.n	8000900 <HAL_ADC_ConvHalfCpltCallback+0x98>
 80008fa:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80008fc:	227f      	movs	r2, #127	; 0x7f
 80008fe:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000908:	da03      	bge.n	8000912 <HAL_ADC_ConvHalfCpltCallback+0xaa>
 800090a:	4b5f      	ldr	r3, [pc, #380]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 800090c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000910:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b2d9      	uxtb	r1, r3
 8000918:	4a5e      	ldr	r2, [pc, #376]	; (8000a94 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	4413      	add	r3, r2
 800091e:	460a      	mov	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800092e:	dba6      	blt.n	800087e <HAL_ADC_ConvHalfCpltCallback+0x16>
		}
		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000938:	4a57      	ldr	r2, [pc, #348]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 800093a:	6013      	str	r3, [r2, #0]
		if(numavg >= 204800){
 800093c:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 8000944:	db0f      	blt.n	8000966 <HAL_ADC_ConvHalfCpltCallback+0xfe>
			average =accumulator/204800;//calculate average
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <HAL_ADC_ConvHalfCpltCallback+0x234>)
 800094c:	fb82 1203 	smull	r1, r2, r2, r3
 8000950:	1412      	asrs	r2, r2, #16
 8000952:	17db      	asrs	r3, r3, #31
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8000958:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 8000960:	4b4d      	ldr	r3, [pc, #308]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
		}
		savestart=1;
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	}

	if(activeRecordState == RecordTwo) {
 800096c:	4b42      	ldr	r3, [pc, #264]	; (8000a78 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d179      	bne.n	8000a68 <HAL_ADC_ConvHalfCpltCallback+0x200>
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	e054      	b.n	8000a24 <HAL_ADC_ConvHalfCpltCallback+0x1bc>
			accumulator += recbuf[i];
 800097a:	4a40      	ldr	r2, [pc, #256]	; (8000a7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a3d      	ldr	r2, [pc, #244]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800098c:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 800098e:	4a3b      	ldr	r2, [pc, #236]	; (8000a7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009a2:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 80009a4:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80009c8:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80009d8:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e6:	ee17 2a90 	vmov	r2, s15
 80009ea:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009ec:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
 80009f4:	dd02      	ble.n	80009fc <HAL_ADC_ConvHalfCpltCallback+0x194>
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009f8:	227f      	movs	r2, #127	; 0x7f
 80009fa:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000a04:	da03      	bge.n	8000a0e <HAL_ADC_ConvHalfCpltCallback+0x1a6>
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8000a08:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000a0c:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b2d9      	uxtb	r1, r3
 8000a14:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4413      	add	r3, r2
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2a:	dba6      	blt.n	800097a <HAL_ADC_ConvHalfCpltCallback+0x112>
		}
		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a34:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000a36:	6013      	str	r3, [r2, #0]
		if(numavg >= 204800){
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 8000a40:	db0f      	blt.n	8000a62 <HAL_ADC_ConvHalfCpltCallback+0x1fa>
			average =accumulator/204800;//calculate average
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	1412      	asrs	r2, r2, #16
 8000a4e:	17db      	asrs	r3, r3, #31
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8000a54:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		}
		savestart_2=1;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_ADC_ConvHalfCpltCallback+0x23c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
	}

	if(activeRecordState == RecordThree) {
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	f040 8092 	bne.w	8000b96 <HAL_ADC_ConvHalfCpltCallback+0x32e>
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e06c      	b.n	8000b52 <HAL_ADC_ConvHalfCpltCallback+0x2ea>
 8000a78:	200001c5 	.word	0x200001c5
 8000a7c:	200005cc 	.word	0x200005cc
 8000a80:	20000c00 	.word	0x20000c00
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20001a40 	.word	0x20001a40
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20001234 	.word	0x20001234
 8000a94:	20000c04 	.word	0x20000c04
 8000a98:	200009cc 	.word	0x200009cc
 8000a9c:	51eb851f 	.word	0x51eb851f
 8000aa0:	200000a8 	.word	0x200000a8
 8000aa4:	200000aa 	.word	0x200000aa
			accumulator += recbuf[i];
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <HAL_ADC_ConvHalfCpltCallback+0x33c>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x340>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x340>)
 8000aba:	6013      	str	r3, [r2, #0]
			tempsample=(uint32_t)recbuf[i]-average;
 8000abc:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <HAL_ADC_ConvHalfCpltCallback+0x33c>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <HAL_ADC_ConvHalfCpltCallback+0x344>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000ad0:	601a      	str	r2, [r3, #0]
			smoothed_sample=(alpha)*(tempsample)+(1.00f-alpha)*(smoothed_sample);
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <HAL_ADC_ConvHalfCpltCallback+0x34c>)
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <HAL_ADC_ConvHalfCpltCallback+0x34c>)
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000af2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <HAL_ADC_ConvHalfCpltCallback+0x350>)
 8000af8:	edd3 7a00 	vldr	s15, [r3]
 8000afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <HAL_ADC_ConvHalfCpltCallback+0x350>)
 8000b06:	edc3 7a00 	vstr	s15, [r3]
			tempsample=(uint32_t)smoothed_sample;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_ADC_ConvHalfCpltCallback+0x350>)
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b14:	ee17 2a90 	vmov	r2, s15
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b1a:	601a      	str	r2, [r3, #0]
			//clamping of maximum values for loud sounds or for non-distortion
			if(tempsample > 127){tempsample=127;}
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b7f      	cmp	r3, #127	; 0x7f
 8000b22:	dd02      	ble.n	8000b2a <HAL_ADC_ConvHalfCpltCallback+0x2c2>
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b26:	227f      	movs	r2, #127	; 0x7f
 8000b28:	601a      	str	r2, [r3, #0]
			if(tempsample < -128){tempsample=-128;}
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000b32:	da03      	bge.n	8000b3c <HAL_ADC_ConvHalfCpltCallback+0x2d4>
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b36:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000b3a:	601a      	str	r2, [r3, #0]

			outputbuf[i]=(int8_t)tempsample;//convert back to original data type
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_ADC_ConvHalfCpltCallback+0x348>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <HAL_ADC_ConvHalfCpltCallback+0x354>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	460a      	mov	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<512; i++){//stored zero mean signal in new array/buffer
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b58:	dba6      	blt.n	8000aa8 <HAL_ADC_ConvHalfCpltCallback+0x240>
		}
		//average=accumulator/512;//only for this half of the callback (512 samples) Therefore 1 sampling window is 512/44100=12 milliseconds
		//This means for f=1/(12 milliseconds)=90 Hz. frequencies in signal below 90 removed. But its okay for our purpose we just use an
		//accumulator for the next successive sample
		numavg += 512;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_ADC_ConvHalfCpltCallback+0x358>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_ADC_ConvHalfCpltCallback+0x358>)
 8000b64:	6013      	str	r3, [r2, #0]
		if(numavg >= 204800){
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_ADC_ConvHalfCpltCallback+0x358>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 8000b6e:	db0f      	blt.n	8000b90 <HAL_ADC_ConvHalfCpltCallback+0x328>
			average =accumulator/204800;//calculate average
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x340>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_ADC_ConvHalfCpltCallback+0x35c>)
 8000b76:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7a:	1412      	asrs	r2, r2, #16
 8000b7c:	17db      	asrs	r3, r3, #31
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_ADC_ConvHalfCpltCallback+0x344>)
 8000b82:	6013      	str	r3, [r2, #0]
			accumulator=0;//reset sum
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_ADC_ConvHalfCpltCallback+0x340>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
			numavg=0;//reset average
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_ADC_ConvHalfCpltCallback+0x358>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
		}
		savestart_3=1;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_ADC_ConvHalfCpltCallback+0x360>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	}
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200005cc 	.word	0x200005cc
 8000ba8:	20000c00 	.word	0x20000c00
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20001a40 	.word	0x20001a40
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	20001234 	.word	0x20001234
 8000bbc:	20000c04 	.word	0x20000c04
 8000bc0:	200009cc 	.word	0x200009cc
 8000bc4:	51eb851f 	.word	0x51eb851f
 8000bc8:	200000ac 	.word	0x200000ac

08000bcc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bd2:	f001 ff33 	bl	8002a3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bd6:	f000 f83f 	bl	8000c58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bda:	f000 fa65 	bl	80010a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bde:	f000 fa25 	bl	800102c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000be2:	f000 f9f9 	bl	8000fd8 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000be6:	f000 f959 	bl	8000e9c <MX_TIM3_Init>
	MX_ADC1_Init();
 8000bea:	f000 f8a3 	bl	8000d34 <MX_ADC1_Init>
	MX_DAC_Init();
 8000bee:	f000 f8f5 	bl	8000ddc <MX_DAC_Init>
	MX_TIM8_Init();
 8000bf2:	f000 f9a1 	bl	8000f38 <MX_TIM8_Init>
	MX_SPI2_Init();
 8000bf6:	f000 f91b 	bl	8000e30 <MX_SPI2_Init>
	MX_FATFS_Init();
 8000bfa:	f005 fe57 	bl	80068ac <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	wave_init();
 8000bfe:	f000 fff5 	bl	8001bec <wave_init>
	startString();
 8000c02:	f000 fbcf 	bl	80013a4 <startString>

	__HAL_TIM_ENABLE(&htim8);//for the ADC and the DAC (DMA)
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <main+0x78>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <main+0x78>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) recbuf, 1024);
 8000c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1a:	490b      	ldr	r1, [pc, #44]	; (8000c48 <main+0x7c>)
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <main+0x80>)
 8000c1e:	f001 ffe5 	bl	8002bec <HAL_ADC_Start_DMA>
	{

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GPIO_PinState check_1= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8);
 8000c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <main+0x84>)
 8000c28:	f003 fc00 	bl	800442c <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
		int trig_check=one_trig;//one_trig is defined in the variables.h, high when "1" button pressed
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <main+0x88>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	603b      	str	r3, [r7, #0]

		processFlags();
 8000c36:	f000 fc03 	bl	8001440 <processFlags>
		states();
 8000c3a:	f001 f813 	bl	8001c64 <states>
		stateMachine();
 8000c3e:	f001 f841 	bl	8001cc4 <stateMachine>
	{
 8000c42:	e7ee      	b.n	8000c22 <main+0x56>
 8000c44:	20000184 	.word	0x20000184
 8000c48:	200005cc 	.word	0x200005cc
 8000c4c:	20000268 	.word	0x20000268
 8000c50:	40020400 	.word	0x40020400
 8000c54:	200000e0 	.word	0x200000e0

08000c58 <SystemClock_Config>:
////		int tick_1;
////		int tick_2;
////		if(check_led1==GPIO_PIN_SET){tick_1=HAL_GetTick();}//tick recorded when LED on
////		if(check_led1==GPIO_PIN_RESET){tick_2=HAL_GetTick();}//tick recorded when LED on
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2234      	movs	r2, #52	; 0x34
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f008 fa50 	bl	800910c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <SystemClock_Config+0xd4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <SystemClock_Config+0xd4>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <SystemClock_Config+0xd4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <SystemClock_Config+0xd8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <SystemClock_Config+0xd8>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <SystemClock_Config+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 febe 	bl	8004a68 <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000cf2:	f000 fb4f 	bl	8001394 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 fbee 	bl	80044f4 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000d1e:	f000 fb39 	bl	8001394 <Error_Handler>
	}
}
 8000d22:	bf00      	nop
 8000d24:	3750      	adds	r7, #80	; 0x50
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d48:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <MX_ADC1_Init+0xa4>)
 8000d4a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d52:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d5a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d7a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d9c:	f001 fee2 	bl	8002b64 <HAL_ADC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x76>
	{
		Error_Handler();
 8000da6:	f000 faf5 	bl	8001394 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_ADC1_Init+0xa0>)
 8000dbc:	f002 f812 	bl	8002de4 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x96>
	{
		Error_Handler();
 8000dc6:	f000 fae5 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000268 	.word	0x20000268
 8000dd8:	40012000 	.word	0x40012000

08000ddc <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_DAC_Init+0x50>)
 8000dee:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000df2:	f002 fbb8 	bl	8003566 <HAL_DAC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8000dfc:	f000 faca 	bl	8001394 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000e00:	230c      	movs	r3, #12
 8000e02:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000e10:	f002 fcc5 	bl	800379e <HAL_DAC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8000e1a:	f000 fabb 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000310 	.word	0x20000310
 8000e2c:	40007400 	.word	0x40007400

08000e30 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI2_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e64:	2208      	movs	r2, #8
 8000e66:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI2_Init+0x64>)
 8000e82:	f004 f84b 	bl	8004f1c <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8000e8c:	f000 fa82 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000012c 	.word	0x2000012c
 8000e98:	40003800 	.word	0x40003800

08000e9c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <MX_TIM3_Init+0x98>)
 8000ebc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8400;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ec0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000ec4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2499;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ece:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ed2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ee2:	f004 fc01 	bl	80056e8 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000eec:	f000 fa52 	bl	8001394 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000efe:	f004 fd75 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000f08:	f000 fa44 	bl	8001394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000f1a:	f004 ff8b 	bl	8005e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000f24:	f000 fa36 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001c8 	.word	0x200001c8
 8000f34:	40000400 	.word	0x40000400

08000f38 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <MX_TIM8_Init+0x9c>)
 8000f58:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1905;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f68:	f240 7271 	movw	r2, #1905	; 0x771
 8000f6c:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f82:	f004 fbb1 	bl	80056e8 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM8_Init+0x58>
	{
		Error_Handler();
 8000f8c:	f000 fa02 	bl	8001394 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000f9e:	f004 fd25 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM8_Init+0x74>
	{
		Error_Handler();
 8000fa8:	f000 f9f4 	bl	8001394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fac:	2320      	movs	r3, #32
 8000fae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM8_Init+0x98>)
 8000fba:	f004 ff3b 	bl	8005e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM8_Init+0x90>
	{
		Error_Handler();
 8000fc4:	f000 f9e6 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000184 	.word	0x20000184
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 500000;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <MX_USART2_UART_Init+0x50>)
 8000fe6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART2_UART_Init+0x48>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_USART2_UART_Init+0x48>)
 800100e:	f004 ffa1 	bl	8005f54 <HAL_UART_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART2_UART_Init+0x44>
	{
		Error_Handler();
 8001018:	f000 f9bc 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000384 	.word	0x20000384
 8001024:	40004400 	.word	0x40004400
 8001028:	0007a120 	.word	0x0007a120

0800102c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_DMA_Init+0x78>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <MX_DMA_Init+0x78>)
 800103c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_DMA_Init+0x78>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DMA_Init+0x78>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_DMA_Init+0x78>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_DMA_Init+0x78>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2010      	movs	r0, #16
 8001070:	f002 fa43 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001074:	2010      	movs	r0, #16
 8001076:	f002 fa5c 	bl	8003532 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2011      	movs	r0, #17
 8001080:	f002 fa3b 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001084:	2011      	movs	r0, #17
 8001086:	f002 fa54 	bl	8003532 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f002 fa33 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f002 fa4c 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b65      	ldr	r3, [pc, #404]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a64      	ldr	r2, [pc, #400]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b62      	ldr	r3, [pc, #392]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a56      	ldr	r2, [pc, #344]	; (8001258 <MX_GPIO_Init+0x1b0>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_GPIO_Init+0x1b0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <MX_GPIO_Init+0x1b0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <MX_GPIO_Init+0x1b0>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_GPIO_Init+0x1b0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001134:	4849      	ldr	r0, [pc, #292]	; (800125c <MX_GPIO_Init+0x1b4>)
 8001136:	f003 f991 	bl	800445c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f24e 0101 	movw	r1, #57345	; 0xe001
 8001140:	4847      	ldr	r0, [pc, #284]	; (8001260 <MX_GPIO_Init+0x1b8>)
 8001142:	f003 f98b 	bl	800445c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <MX_GPIO_Init+0x1bc>)
 800114e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4843      	ldr	r0, [pc, #268]	; (8001268 <MX_GPIO_Init+0x1c0>)
 800115c:	f002 ffd4 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001160:	2320      	movs	r3, #32
 8001162:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4839      	ldr	r0, [pc, #228]	; (800125c <MX_GPIO_Init+0x1b4>)
 8001178:	f002 ffc6 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117c:	23c0      	movs	r3, #192	; 0xc0
 800117e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <MX_GPIO_Init+0x1c4>)
 8001182:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4833      	ldr	r0, [pc, #204]	; (800125c <MX_GPIO_Init+0x1b4>)
 8001190:	f002 ffba 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001194:	2310      	movs	r3, #16
 8001196:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <MX_GPIO_Init+0x1c4>)
 800119a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119c:	2302      	movs	r3, #2
 800119e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_GPIO_Init+0x1c0>)
 80011a8:	f002 ffae 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4827      	ldr	r0, [pc, #156]	; (8001260 <MX_GPIO_Init+0x1b8>)
 80011c4:	f002 ffa0 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	481f      	ldr	r0, [pc, #124]	; (8001260 <MX_GPIO_Init+0x1b8>)
 80011e2:	f002 ff91 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <MX_GPIO_Init+0x1b4>)
 8001200:	f002 ff82 	bl	8004108 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001204:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001208:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_GPIO_Init+0x1c4>)
 800120c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_GPIO_Init+0x1b8>)
 800121a:	f002 ff75 	bl	8004108 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	200a      	movs	r0, #10
 8001224:	f002 f969 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001228:	200a      	movs	r0, #10
 800122a:	f002 f982 	bl	8003532 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2017      	movs	r0, #23
 8001234:	f002 f961 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001238:	2017      	movs	r0, #23
 800123a:	f002 f97a 	bl	8003532 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2028      	movs	r0, #40	; 0x28
 8001244:	f002 f959 	bl	80034fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001248:	2028      	movs	r0, #40	; 0x28
 800124a:	f002 f972 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	10210000 	.word	0x10210000
 8001268:	40020800 	.word	0x40020800
 800126c:	10110000 	.word	0x10110000

08001270 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	// if triggered interrupt corresponds to specific button, set flag
	switch(GPIO_Pin)
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	2b80      	cmp	r3, #128	; 0x80
 800127e:	d011      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0x34>
 8001280:	2b80      	cmp	r3, #128	; 0x80
 8001282:	dc04      	bgt.n	800128e <HAL_GPIO_EXTI_Callback+0x1e>
 8001284:	2b10      	cmp	r3, #16
 8001286:	d015      	beq.n	80012b4 <HAL_GPIO_EXTI_Callback+0x44>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d00f      	beq.n	80012ac <HAL_GPIO_EXTI_Callback+0x3c>
		rec_trig = 1;
		break;
		// end case record button

	} // end switch
} // end HAL_GPIO_EXTI_Callback
 800128c:	e01a      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
	switch(GPIO_Pin)
 800128e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001292:	d003      	beq.n	800129c <HAL_GPIO_EXTI_Callback+0x2c>
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d010      	beq.n	80012bc <HAL_GPIO_EXTI_Callback+0x4c>
} // end HAL_GPIO_EXTI_Callback
 800129a:	e013      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
		one_trig = 1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x60>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
		break;
 80012a2:	e00f      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
		two_trig = 1;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
		break;
 80012aa:	e00b      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
		three_trig = 1;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
		break;
 80012b2:	e007      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
		stop_trig = 1;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
		break;
 80012ba:	e003      	b.n	80012c4 <HAL_GPIO_EXTI_Callback+0x54>
		rec_trig = 1;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
		break;
 80012c2:	bf00      	nop
} // end HAL_GPIO_EXTI_Callback
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	200000e0 	.word	0x200000e0
 80012d4:	200000e4 	.word	0x200000e4
 80012d8:	200000e8 	.word	0x200000e8
 80012dc:	200000dc 	.word	0x200000dc
 80012e0:	200000d8 	.word	0x200000d8

080012e4 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1,(uint32_t*)dacbuffer, 1024, DAC_ALIGN_12B_R);
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_DAC_ConvCpltCallbackCh1+0x4c>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f002 f957 	bl	80035ac <HAL_DAC_Start_DMA>

	if(activePlayState == PlayOne){playmid=1;}
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <HAL_DAC_ConvCpltCallbackCh1+0x28>
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
	if (activePlayState == PlayTwo) {playmid_2=1;}
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d102      	bne.n	800131a <HAL_DAC_ConvCpltCallbackCh1+0x36>
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_DAC_ConvCpltCallbackCh1+0x58>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
	if (activePlayState == PlayThree){playmid_3=1;}
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d102      	bne.n	8001328 <HAL_DAC_ConvCpltCallbackCh1+0x44>
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]

}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000123c 	.word	0x2000123c
 8001334:	200001c4 	.word	0x200001c4
 8001338:	200000af 	.word	0x200000af
 800133c:	200000b1 	.word	0x200000b1
 8001340:	200000b3 	.word	0x200000b3

08001344 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

	if(activePlayState == PlayOne){playmid=1;}
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_DAC_ConvHalfCpltCallbackCh1+0x40>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d102      	bne.n	800135a <HAL_DAC_ConvHalfCpltCallbackCh1+0x16>
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_DAC_ConvHalfCpltCallbackCh1+0x44>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	if (activePlayState == PlayTwo) {playmid_2=1;}
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_DAC_ConvHalfCpltCallbackCh1+0x40>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d102      	bne.n	8001368 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_DAC_ConvHalfCpltCallbackCh1+0x48>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
	if (activePlayState == PlayThree){playmid_3=1;}
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_DAC_ConvHalfCpltCallbackCh1+0x40>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d102      	bne.n	8001376 <HAL_DAC_ConvHalfCpltCallbackCh1+0x32>
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_DAC_ConvHalfCpltCallbackCh1+0x4c>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]

}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200001c4 	.word	0x200001c4
 8001388:	200000af 	.word	0x200000af
 800138c:	200000b1 	.word	0x200000b1
 8001390:	200000b3 	.word	0x200000b3

08001394 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <startString>:
 * This source file contains the functions that will be used in the project
 */
#include "project.h"

void startString()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2,g_startbuf,10, 1000);
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	220a      	movs	r2, #10
 80013ae:	4903      	ldr	r1, [pc, #12]	; (80013bc <startString+0x18>)
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <startString+0x1c>)
 80013b2:	f004 fe1c 	bl	8005fee <HAL_UART_Transmit>

} // end startString
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000010 	.word	0x20000010
 80013c0:	20000384 	.word	0x20000384

080013c4 <debounce>:

void debounce()
{ // this function suppresses the bouncing of the switch.
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

	if ((button_now != button_prev) && (HAL_GetTick() - g_lastTick > 10))
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <debounce+0x30>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <debounce+0x34>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d00d      	beq.n	80013f0 <debounce+0x2c>
 80013d4:	f001 fb98 	bl	8002b08 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <debounce+0x38>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d905      	bls.n	80013f0 <debounce+0x2c>
	{
		g_lastTick = HAL_GetTick();
 80013e4:	f001 fb90 	bl	8002b08 <HAL_GetTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <debounce+0x38>)
 80013ee:	601a      	str	r2, [r3, #0]
	} // end if

} // end checkBounce
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	200000f0 	.word	0x200000f0
 80013fc:	200000b4 	.word	0x200000b4

08001400 <resetLEDs>:



void resetLEDs()
{ // this function turns all the LEDs off.
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <resetLEDs+0x38>)
 800140c:	f003 f826 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <resetLEDs+0x3c>)
 8001418:	f003 f820 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <resetLEDs+0x38>)
 8001424:	f003 f81a 	bl	800445c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <resetLEDs+0x38>)
 8001430:	f003 f814 	bl	800445c <HAL_GPIO_WritePin>


} // end resetLEDs
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000

08001440 <processFlags>:


void processFlags()
{ // this function processes the flags set-up in the handler.
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af02      	add	r7, sp, #8

	// record button
	if (rec_trig == 1)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <processFlags+0x5c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d137      	bne.n	80014be <processFlags+0x7e>
	{
		rec_trig = 0;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <processFlags+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9) == GPIO_PIN_SET) button_now = 1;// if button pushed down and not released, set button_now to 1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <processFlags+0x60>)
 800145a:	f002 ffe7 	bl	800442c <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d102      	bne.n	800146a <processFlags+0x2a>
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <processFlags+0x64>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9) == GPIO_PIN_RESET) {button_now = 0,button_released = 1;} // if button released, set button_now to 0
 800146a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <processFlags+0x60>)
 8001470:	f002 ffdc 	bl	800442c <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <processFlags+0x46>
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <processFlags+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <processFlags+0x68>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

		// debouncing
		debounce();
 8001486:	f7ff ff9d 	bl	80013c4 <debounce>
		if (button_now == 1) rec_flag = 1; // set flag that activates record state of the state machine
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <processFlags+0x64>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10e      	bne.n	80014b0 <processFlags+0x70>
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <processFlags+0x6c>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e00d      	b.n	80014b6 <processFlags+0x76>
 800149a:	bf00      	nop
 800149c:	200000d8 	.word	0x200000d8
 80014a0:	40020400 	.word	0x40020400
 80014a4:	200000ec 	.word	0x200000ec
 80014a8:	200000f4 	.word	0x200000f4
 80014ac:	200000c8 	.word	0x200000c8
		else {rec_flag = 0;} // otherwise keep it at zero
 80014b0:	4ba6      	ldr	r3, [pc, #664]	; (800174c <processFlags+0x30c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		//		rec_trig = 0;
		button_prev = button_now;
 80014b6:	4ba6      	ldr	r3, [pc, #664]	; (8001750 <processFlags+0x310>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4aa6      	ldr	r2, [pc, #664]	; (8001754 <processFlags+0x314>)
 80014bc:	6013      	str	r3, [r2, #0]

	} // end processing of rec_trig flag

	// button one
	if (one_trig == 1)
 80014be:	4ba6      	ldr	r3, [pc, #664]	; (8001758 <processFlags+0x318>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d15d      	bne.n	8001582 <processFlags+0x142>
	{

		// check the state of the pin
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8) == GPIO_PIN_SET) {button_now = 1, button_released = 0;}
 80014c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ca:	48a4      	ldr	r0, [pc, #656]	; (800175c <processFlags+0x31c>)
 80014cc:	f002 ffae 	bl	800442c <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d105      	bne.n	80014e2 <processFlags+0xa2>
 80014d6:	4b9e      	ldr	r3, [pc, #632]	; (8001750 <processFlags+0x310>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <processFlags+0x320>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]


		// debounce and check that the button has been released
		if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8) == GPIO_PIN_RESET) && (button_now == 1) && (HAL_GetTick() - g_lastTick > 10))
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e6:	489d      	ldr	r0, [pc, #628]	; (800175c <processFlags+0x31c>)
 80014e8:	f002 ffa0 	bl	800442c <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d114      	bne.n	800151c <processFlags+0xdc>
 80014f2:	4b97      	ldr	r3, [pc, #604]	; (8001750 <processFlags+0x310>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d110      	bne.n	800151c <processFlags+0xdc>
 80014fa:	f001 fb05 	bl	8002b08 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b98      	ldr	r3, [pc, #608]	; (8001764 <processFlags+0x324>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d908      	bls.n	800151c <processFlags+0xdc>
		{
			button_released = 1;
 800150a:	4b95      	ldr	r3, [pc, #596]	; (8001760 <processFlags+0x320>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
			g_lastTick = HAL_GetTick();
 8001510:	f001 fafa 	bl	8002b08 <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <processFlags+0x324>)
 800151a:	601a      	str	r2, [r3, #0]
		}

		// evaluate and set playback condition
		if (button_released == 1 && (rec_flag != 1)) {
 800151c:	4b90      	ldr	r3, [pc, #576]	; (8001760 <processFlags+0x320>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d119      	bne.n	8001558 <processFlags+0x118>
 8001524:	4b89      	ldr	r3, [pc, #548]	; (800174c <processFlags+0x30c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d015      	beq.n	8001558 <processFlags+0x118>
			one_flag = 1;
 800152c:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <processFlags+0x328>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_playbackbuf[0],10, 1000);
			if(rec_flag != 1) HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,(uint32_t*)dacbuffer, 1024, DAC_ALIGN_12B_R); // start DAC
 8001532:	4b86      	ldr	r3, [pc, #536]	; (800174c <processFlags+0x30c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d008      	beq.n	800154c <processFlags+0x10c>
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001542:	4a8a      	ldr	r2, [pc, #552]	; (800176c <processFlags+0x32c>)
 8001544:	2100      	movs	r1, #0
 8001546:	488a      	ldr	r0, [pc, #552]	; (8001770 <processFlags+0x330>)
 8001548:	f002 f830 	bl	80035ac <HAL_DAC_Start_DMA>
			button_released = 0;
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <processFlags+0x320>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
			one_trig = 0;
 8001552:	4b81      	ldr	r3, [pc, #516]	; (8001758 <processFlags+0x318>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
		}
		// evaluate and set record condition
		if (button_released == 1 && (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9) == GPIO_PIN_SET)) {
 8001558:	4b81      	ldr	r3, [pc, #516]	; (8001760 <processFlags+0x320>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d110      	bne.n	8001582 <processFlags+0x142>
 8001560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001564:	487d      	ldr	r0, [pc, #500]	; (800175c <processFlags+0x31c>)
 8001566:	f002 ff61 	bl	800442c <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <processFlags+0x142>
			button_released = 0;
 8001570:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <processFlags+0x320>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
			rec_one_flag = 1;
 8001576:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <processFlags+0x334>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_recordbuf[0],10, 1000);
			one_trig = 0;
 800157c:	4b76      	ldr	r3, [pc, #472]	; (8001758 <processFlags+0x318>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
		}

	}// end processing of one_trig flag

	// button two
	if (two_trig == 1)
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <processFlags+0x338>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d15b      	bne.n	8001642 <processFlags+0x202>
	{
		// check the state of the pin
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_SET) {button_now = 1, button_released = 0;}
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	487b      	ldr	r0, [pc, #492]	; (800177c <processFlags+0x33c>)
 800158e:	f002 ff4d 	bl	800442c <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <processFlags+0x164>
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <processFlags+0x310>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	4b70      	ldr	r3, [pc, #448]	; (8001760 <processFlags+0x320>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

		// debounce and check that the button has been released
		if ((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_RESET) && (button_now == 1) && (HAL_GetTick() - g_lastTick > 10))
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	4875      	ldr	r0, [pc, #468]	; (800177c <processFlags+0x33c>)
 80015a8:	f002 ff40 	bl	800442c <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d114      	bne.n	80015dc <processFlags+0x19c>
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <processFlags+0x310>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d110      	bne.n	80015dc <processFlags+0x19c>
 80015ba:	f001 faa5 	bl	8002b08 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <processFlags+0x324>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d908      	bls.n	80015dc <processFlags+0x19c>
		{
			button_released = 1;
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <processFlags+0x320>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
			g_lastTick = HAL_GetTick();
 80015d0:	f001 fa9a 	bl	8002b08 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <processFlags+0x324>)
 80015da:	601a      	str	r2, [r3, #0]
		}// end if

		// evaluate and set playback condition
		if (button_released == 1 && (rec_flag != 1)) {
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <processFlags+0x320>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d119      	bne.n	8001618 <processFlags+0x1d8>
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <processFlags+0x30c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d015      	beq.n	8001618 <processFlags+0x1d8>
			two_flag = 1;
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <processFlags+0x340>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_playbackbuf[1],10, 1000);
			if(rec_flag != 1) HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,(uint32_t*)dacbuffer, 1024, DAC_ALIGN_12B_R);
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <processFlags+0x30c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d008      	beq.n	800160c <processFlags+0x1cc>
 80015fa:	2300      	movs	r3, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001602:	4a5a      	ldr	r2, [pc, #360]	; (800176c <processFlags+0x32c>)
 8001604:	2100      	movs	r1, #0
 8001606:	485a      	ldr	r0, [pc, #360]	; (8001770 <processFlags+0x330>)
 8001608:	f001 ffd0 	bl	80035ac <HAL_DAC_Start_DMA>
			button_released = 0;
 800160c:	4b54      	ldr	r3, [pc, #336]	; (8001760 <processFlags+0x320>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
			two_trig = 0;
 8001612:	4b59      	ldr	r3, [pc, #356]	; (8001778 <processFlags+0x338>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
		} // end if
		// evaluate and set record condition
		if (button_released == 1 && (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9) == GPIO_PIN_SET)) {
 8001618:	4b51      	ldr	r3, [pc, #324]	; (8001760 <processFlags+0x320>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d110      	bne.n	8001642 <processFlags+0x202>
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	484d      	ldr	r0, [pc, #308]	; (800175c <processFlags+0x31c>)
 8001626:	f002 ff01 	bl	800442c <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <processFlags+0x202>
			button_released = 0;
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <processFlags+0x320>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
			rec_two_flag = 1;
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <processFlags+0x344>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_recordbuf[1],10, 1000);
			two_trig = 0;
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <processFlags+0x338>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		} // end if

	} // end processing of two_trig flag

	if (three_trig == 1)
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <processFlags+0x348>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d15b      	bne.n	8001702 <processFlags+0x2c2>
	{
		// check the state of the pin
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == GPIO_PIN_SET) {button_now = 1, button_released = 0;}
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	484b      	ldr	r0, [pc, #300]	; (800177c <processFlags+0x33c>)
 800164e:	f002 feed 	bl	800442c <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <processFlags+0x224>
 8001658:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <processFlags+0x310>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <processFlags+0x320>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]


		// debounce and check that the button has been released
		if ((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == GPIO_PIN_RESET) && (button_now == 1) && (HAL_GetTick() - g_lastTick > 10))
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	4845      	ldr	r0, [pc, #276]	; (800177c <processFlags+0x33c>)
 8001668:	f002 fee0 	bl	800442c <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d114      	bne.n	800169c <processFlags+0x25c>
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <processFlags+0x310>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d110      	bne.n	800169c <processFlags+0x25c>
 800167a:	f001 fa45 	bl	8002b08 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	4b38      	ldr	r3, [pc, #224]	; (8001764 <processFlags+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d908      	bls.n	800169c <processFlags+0x25c>
		{
			button_released = 1;
 800168a:	4b35      	ldr	r3, [pc, #212]	; (8001760 <processFlags+0x320>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
			g_lastTick = HAL_GetTick();
 8001690:	f001 fa3a 	bl	8002b08 <HAL_GetTick>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <processFlags+0x324>)
 800169a:	601a      	str	r2, [r3, #0]
		}

		// evaluate and set playback condition
		if (button_released == 1 && (rec_flag != 1)) {
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <processFlags+0x320>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d119      	bne.n	80016d8 <processFlags+0x298>
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <processFlags+0x30c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d015      	beq.n	80016d8 <processFlags+0x298>
			three_flag = 1;
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <processFlags+0x34c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_playbackbuf[2],10, 1000);
			if(rec_flag != 1) HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,(uint32_t*)dacbuffer, 1024, DAC_ALIGN_12B_R);
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <processFlags+0x30c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d008      	beq.n	80016cc <processFlags+0x28c>
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	4a2a      	ldr	r2, [pc, #168]	; (800176c <processFlags+0x32c>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	482a      	ldr	r0, [pc, #168]	; (8001770 <processFlags+0x330>)
 80016c8:	f001 ff70 	bl	80035ac <HAL_DAC_Start_DMA>
			button_released = 0;
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <processFlags+0x320>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
			three_trig = 0;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <processFlags+0x348>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
		} // end if

		// evaluate and set record condition
		if (button_released == 1 && (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9) == GPIO_PIN_SET)) {
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <processFlags+0x320>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d110      	bne.n	8001702 <processFlags+0x2c2>
 80016e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <processFlags+0x31c>)
 80016e6:	f002 fea1 	bl	800442c <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d108      	bne.n	8001702 <processFlags+0x2c2>
			button_released = 0;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <processFlags+0x320>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
			rec_three_flag = 1;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <processFlags+0x350>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart2,g_recordbuf[2],10, 1000);
			three_trig = 0;
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <processFlags+0x348>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
		}

	} // end processing of three_trig flag

	if (stop_trig == 1)
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <processFlags+0x354>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d162      	bne.n	80017d0 <processFlags+0x390>
	{
		//check state of pin
		if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4) == GPIO_PIN_SET) {button_now = 1, button_released = 0;}
 800170a:	2110      	movs	r1, #16
 800170c:	4822      	ldr	r0, [pc, #136]	; (8001798 <processFlags+0x358>)
 800170e:	f002 fe8d 	bl	800442c <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <processFlags+0x2e4>
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <processFlags+0x310>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <processFlags+0x320>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]


		// debounce and check that the button has been released
		if ((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4) == GPIO_PIN_RESET) && (button_now == 1) && (HAL_GetTick() - g_lastTick > 10))
 8001724:	2110      	movs	r1, #16
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <processFlags+0x358>)
 8001728:	f002 fe80 	bl	800442c <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13d      	bne.n	80017ae <processFlags+0x36e>
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <processFlags+0x310>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d139      	bne.n	80017ae <processFlags+0x36e>
 800173a:	f001 f9e5 	bl	8002b08 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <processFlags+0x324>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b0a      	cmp	r3, #10
 8001748:	d931      	bls.n	80017ae <processFlags+0x36e>
 800174a:	e027      	b.n	800179c <processFlags+0x35c>
 800174c:	200000c8 	.word	0x200000c8
 8001750:	200000ec 	.word	0x200000ec
 8001754:	200000f0 	.word	0x200000f0
 8001758:	200000e0 	.word	0x200000e0
 800175c:	40020400 	.word	0x40020400
 8001760:	200000f4 	.word	0x200000f4
 8001764:	200000b4 	.word	0x200000b4
 8001768:	200000bc 	.word	0x200000bc
 800176c:	2000123c 	.word	0x2000123c
 8001770:	20000310 	.word	0x20000310
 8001774:	200000cc 	.word	0x200000cc
 8001778:	200000e4 	.word	0x200000e4
 800177c:	40020000 	.word	0x40020000
 8001780:	200000c0 	.word	0x200000c0
 8001784:	200000d0 	.word	0x200000d0
 8001788:	200000e8 	.word	0x200000e8
 800178c:	200000c4 	.word	0x200000c4
 8001790:	200000d4 	.word	0x200000d4
 8001794:	200000dc 	.word	0x200000dc
 8001798:	40020800 	.word	0x40020800
		{
			button_released = 1;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <processFlags+0x398>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			g_lastTick = HAL_GetTick();
 80017a2:	f001 f9b1 	bl	8002b08 <HAL_GetTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <processFlags+0x39c>)
 80017ac:	601a      	str	r2, [r3, #0]
		}

		if (button_released == 1) {
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <processFlags+0x398>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10c      	bne.n	80017d0 <processFlags+0x390>
			stop_flag = 1;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <processFlags+0x3a0>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			button_released = 0;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <processFlags+0x398>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
			stop_trig = 0;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <processFlags+0x3a4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
			resetStates();
 80017c8:	f000 fdf2 	bl	80023b0 <resetStates>
			resetLEDs();
 80017cc:	f7ff fe18 	bl	8001400 <resetLEDs>
		}

	}
}  // end processFlags
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000f4 	.word	0x200000f4
 80017dc:	200000b4 	.word	0x200000b4
 80017e0:	200000b8 	.word	0x200000b8
 80017e4:	200000dc 	.word	0x200000dc

080017e8 <SD_ReceiveByte>:
#include "main.h"//Allows us to use the HAL functions

extern SPI_HandleTypeDef hspi2;

uint8_t SD_ReceiveByte(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, 100);
 80017f2:	1dba      	adds	r2, r7, #6
 80017f4:	1df9      	adds	r1, r7, #7
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <SD_ReceiveByte+0x24>)
 80017fe:	f003 fd25 	bl	800524c <HAL_SPI_TransmitReceive>

	return data;
 8001802:	79bb      	ldrb	r3, [r7, #6]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000012c 	.word	0x2000012c

08001810 <SD_SendCommand>:

uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg)//This is like a template for the bytes we send to the SD command
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
	// wait for SD to become ready
	//SPI is full duplex therefore we can send and receive at the same time
	uint32_t ticksstart = HAL_GetTick();
 800181c:	f001 f974 	bl	8002b08 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]
	uint8_t res = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SD_ReceiveByte();
 8001826:	f7ff ffdf 	bl	80017e8 <SD_ReceiveByte>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	} while (((HAL_GetTick() - ticksstart) >= 500) && (res != 0xff));
 800182e:	f001 f96b 	bl	8002b08 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183c:	d302      	bcc.n	8001844 <SD_SendCommand+0x34>
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d1f0      	bne.n	8001826 <SD_SendCommand+0x16>
	//either the SD_ReceiveByte return 255 (0xff) or if tick-counter increased by 500 ms since start of the loop
	//If he SD card does not return 255 (0xff) the send command will give up and exit

	uint8_t cmdbuffer[6];//6 bytes to send
	cmdbuffer[0] = 0x40 | cmd;// This is the command ID using bit-wise AND
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184a:	b2db      	uxtb	r3, r3
 800184c:	723b      	strb	r3, [r7, #8]
	//Next we send the = arguments using 32 bytes using bit shifting
	cmdbuffer[1] = (uint8_t)(arg >> 24);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	0e1b      	lsrs	r3, r3, #24
 8001852:	b2db      	uxtb	r3, r3
 8001854:	727b      	strb	r3, [r7, #9]
	cmdbuffer[2] = (uint8_t)(arg >> 16);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	72bb      	strb	r3, [r7, #10]
	cmdbuffer[3] = (uint8_t)(arg >> 8);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	72fb      	strb	r3, [r7, #11]
	cmdbuffer[4] = (uint8_t)arg;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	733b      	strb	r3, [r7, #12]

	// crc-Cyclic redundancy code (Only need to CRC the following commands since they have fixed arguments)
	if(cmd == 0)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <SD_SendCommand+0x68>
		cmdbuffer[5] = 0x95;	// CRC for CMD0 (Initialize Command)
 8001872:	2395      	movs	r3, #149	; 0x95
 8001874:	737b      	strb	r3, [r7, #13]
 8001876:	e007      	b.n	8001888 <SD_SendCommand+0x78>
	else if (cmd == 8)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d102      	bne.n	8001884 <SD_SendCommand+0x74>
		cmdbuffer[5] = 0x87;	// CRC for CMD8 (with 32-bit argument = 0x1AA)
 800187e:	2387      	movs	r3, #135	; 0x87
 8001880:	737b      	strb	r3, [r7, #13]
 8001882:	e001      	b.n	8001888 <SD_SendCommand+0x78>
	else
		cmdbuffer[5] = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	737b      	strb	r3, [r7, #13]

	// transmit command
	HAL_SPI_Transmit(&hspi2, cmdbuffer, 6, 100);
 8001888:	f107 0108 	add.w	r1, r7, #8
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	2206      	movs	r2, #6
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <SD_SendCommand+0xb0>)
 8001892:	f003 fba7 	bl	8004fe4 <HAL_SPI_Transmit>

	// read response code
	uint8_t n = 10;
 8001896:	230a      	movs	r3, #10
 8001898:	75fb      	strb	r3, [r7, #23]
	//need to check multiple times for the result
	do
	{
		res = SD_ReceiveByte();
 800189a:	f7ff ffa5 	bl	80017e8 <SD_ReceiveByte>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
		n--;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	75fb      	strb	r3, [r7, #23]
	} while ((res & 0x80) && (n > 0));//loop till MSBit from response is 0
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da02      	bge.n	80018b6 <SD_SendCommand+0xa6>
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f1      	bne.n	800189a <SD_SendCommand+0x8a>
	//The result we obtain is also the return
	return res;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000012c 	.word	0x2000012c

080018c4 <Deselect>:

void Deselect()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	// set chipselect high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <Deselect+0x18>)
 80018ce:	f002 fdc5 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f001 f924 	bl	8002b20 <HAL_Delay>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020400 	.word	0x40020400

080018e0 <Select>:

void Select()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	// set chipselect low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <Select+0x18>)
 80018ea:	f002 fdb7 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f001 f916 	bl	8002b20 <HAL_Delay>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020400 	.word	0x40020400

080018fc <SD_Init>:

uint8_t SD_Init()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
	Deselect();//set Chip Select high
 8001902:	f7ff ffdf 	bl	80018c4 <Deselect>

	uint8_t dummy = 0xff;
 8001906:	23ff      	movs	r3, #255	; 0xff
 8001908:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 10; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e009      	b.n	8001924 <SD_Init+0x28>
	{
	  HAL_SPI_Transmit(&hspi2, &dummy, 1, 100);
 8001910:	f107 010b 	add.w	r1, r7, #11
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2201      	movs	r2, #1
 8001918:	482d      	ldr	r0, [pc, #180]	; (80019d0 <SD_Init+0xd4>)
 800191a:	f003 fb63 	bl	8004fe4 <HAL_SPI_Transmit>
	for (int i = 0; i < 10; i++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b09      	cmp	r3, #9
 8001928:	ddf2      	ble.n	8001910 <SD_Init+0x14>
	}

	Select();//set Chip Select low
 800192a:	f7ff ffd9 	bl	80018e0 <Select>


	// send command 0
	if (SD_SendCommand(0, 0) != 1)//this is error checking for if we don't receive the correct response of 1
 800192e:	2100      	movs	r1, #0
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ff6d 	bl	8001810 <SD_SendCommand>
 8001936:	4603      	mov	r3, r0
 8001938:	2b01      	cmp	r3, #1
 800193a:	d001      	beq.n	8001940 <SD_Init+0x44>
		return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e042      	b.n	80019c6 <SD_Init+0xca>

	// send command 8
	//Send it our voltage(0b0001->Convert to hex is 0X1) and we chose (0x00AA) for our unique check pattern
	//Therefore we send 0x1aa
	if (SD_SendCommand(8, 0x1aa) != 1)
 8001940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001944:	2008      	movs	r0, #8
 8001946:	f7ff ff63 	bl	8001810 <SD_SendCommand>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d001      	beq.n	8001954 <SD_Init+0x58>
		return 0;
 8001950:	2300      	movs	r3, #0
 8001952:	e038      	b.n	80019c6 <SD_Init+0xca>

	// read R7 response, after CMD8
	uint8_t cmd8return[4];
	for (int i = 0; i < 4; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e00b      	b.n	8001972 <SD_Init+0x76>
		cmd8return[i] = SD_ReceiveByte();
 800195a:	f7ff ff45 	bl	80017e8 <SD_ReceiveByte>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	460a      	mov	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	3301      	adds	r3, #1
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b03      	cmp	r3, #3
 8001976:	ddf0      	ble.n	800195a <SD_Init+0x5e>

	if ((cmd8return[2] != 1) || (cmd8return[3] != 0xaa))//If SD card acknowledges our voltage we will get '1' and our unique 'aa' back
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <SD_Init+0x88>
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2baa      	cmp	r3, #170	; 0xaa
 8001982:	d001      	beq.n	8001988 <SD_Init+0x8c>
		return 0;
 8001984:	2300      	movs	r3, #0
 8001986:	e01e      	b.n	80019c6 <SD_Init+0xca>

	uint32_t ticksstart = HAL_GetTick();
 8001988:	f001 f8be 	bl	8002b08 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]
	do
	{
		if (SD_SendCommand(55, 0) <= 1)//CMD55 returns 0 or 1
 800198e:	2100      	movs	r1, #0
 8001990:	2037      	movs	r0, #55	; 0x37
 8001992:	f7ff ff3d 	bl	8001810 <SD_SendCommand>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d807      	bhi.n	80019ac <SD_Init+0xb0>
		{
			if (SD_SendCommand(41, 1<< 30) == 0)//bit in position 30 set to 1, 'HCS' bit shows we support high capacity cards and MUST return 0
 800199c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a0:	2029      	movs	r0, #41	; 0x29
 80019a2:	f7ff ff35 	bl	8001810 <SD_SendCommand>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <SD_Init+0xc2>
			{
				//ok!
				break;
			}
		}
	} while ((HAL_GetTick() - ticksstart) < 1000);//1 second timer as digram 7-2 indicates we must loop till we get a '0' returned
 80019ac:	f001 f8ac 	bl	8002b08 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ba:	d3e8      	bcc.n	800198e <SD_Init+0x92>
 80019bc:	e000      	b.n	80019c0 <SD_Init+0xc4>
				break;
 80019be:	bf00      	nop

	//Can use CMD58 to check if standard or high capacity card used but we will skip this part (Use in proper implementation)


	Deselect();
 80019c0:	f7ff ff80 	bl	80018c4 <Deselect>

	return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000012c 	.word	0x2000012c

080019d4 <SD_RxDataBlock>:


uint8_t SD_RxDataBlock(uint8_t* buff)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	uint8_t token;

	uint32_t ticksstart = HAL_GetTick();
 80019dc:	f001 f894 	bl	8002b08 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

	// loop until receive a response or timeout
	do
	{
		token = SD_ReceiveByte();
 80019e2:	f7ff ff01 	bl	80017e8 <SD_ReceiveByte>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && ((HAL_GetTick() - ticksstart) < 200));//exit when we get our needed token or 200 milliseconds expires
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2bff      	cmp	r3, #255	; 0xff
 80019ee:	d106      	bne.n	80019fe <SD_RxDataBlock+0x2a>
 80019f0:	f001 f88a 	bl	8002b08 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2bc7      	cmp	r3, #199	; 0xc7
 80019fc:	d9f1      	bls.n	80019e2 <SD_RxDataBlock+0xe>

	// check for invalid response
	if(token != 0xFE)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2bfe      	cmp	r3, #254	; 0xfe
 8001a02:	d001      	beq.n	8001a08 <SD_RxDataBlock+0x34>
		return 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e015      	b.n	8001a34 <SD_RxDataBlock+0x60>

	// receive data
	for (int i = 0; i < 512; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e009      	b.n	8001a22 <SD_RxDataBlock+0x4e>
	{
		buff[i] = SD_ReceiveByte();
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	18d4      	adds	r4, r2, r3
 8001a14:	f7ff fee8 	bl	80017e8 <SD_ReceiveByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < 512; i++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	dbf1      	blt.n	8001a0e <SD_RxDataBlock+0x3a>
	}

	// read and discard CRC
	SD_ReceiveByte();
 8001a2a:	f7ff fedd 	bl	80017e8 <SD_ReceiveByte>
	SD_ReceiveByte();
 8001a2e:	f7ff fedb 	bl	80017e8 <SD_ReceiveByte>

	// return success
	return 1;
 8001a32:	2301      	movs	r3, #1

}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <SD_Read>:

uint8_t SD_Read(uint8_t* rxbuffer, uint32_t address, uint32_t numblocks)//(buffer to store into,address of SD card to read from,number of blocks to read)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	//We use commands 17 and 18 to read
	uint32_t sector = address >> 9;//divide by 512 (2^9) using bit-shifting
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	0a5b      	lsrs	r3, r3, #9
 8001a4c:	613b      	str	r3, [r7, #16]
	//If standard SD card used we don't shift because we do not need to divide.

	Select();
 8001a4e:	f7ff ff47 	bl	80018e0 <Select>

	if (numblocks == 1)//Use CMD 17 when accessing a single block
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10d      	bne.n	8001a74 <SD_Read+0x38>
	{
		// read single block
		if (SD_SendCommand(17, sector) != 0)
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f7ff fed8 	bl	8001810 <SD_SendCommand>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SD_Read+0x2e>
			return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e02a      	b.n	8001ac0 <SD_Read+0x84>

		SD_RxDataBlock(rxbuffer);//read 512 byte block
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ffb2 	bl	80019d4 <SD_RxDataBlock>

		return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e025      	b.n	8001ac0 <SD_Read+0x84>
	}
	else
	{
		// read multiple blocks using CMD 18
		if (SD_SendCommand(18, sector) != 0)
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	2012      	movs	r0, #18
 8001a78:	f7ff feca 	bl	8001810 <SD_SendCommand>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SD_Read+0x4a>
			return 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e01c      	b.n	8001ac0 <SD_Read+0x84>

		for (int i = 0; i < numblocks; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00c      	b.n	8001aa6 <SD_Read+0x6a>
		{
			if (!SD_RxDataBlock(rxbuffer))
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff ffa1 	bl	80019d4 <SD_RxDataBlock>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <SD_Read+0x74>
				break;

			rxbuffer += 512;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a9e:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < numblocks; i++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8ee      	bhi.n	8001a8c <SD_Read+0x50>
 8001aae:	e000      	b.n	8001ab2 <SD_Read+0x76>
				break;
 8001ab0:	bf00      	nop
		}

		// stop receiving asper timing diagrams in specification
		SD_SendCommand(12, 0);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	200c      	movs	r0, #12
 8001ab6:	f7ff feab 	bl	8001810 <SD_SendCommand>
	}

	Deselect();
 8001aba:	f7ff ff03 	bl	80018c4 <Deselect>

	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <SD_TxDataBlock>:

uint8_t SD_TxDataBlock(uint8_t *buff, uint8_t token)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
	uint8_t crc[2] = {0, 0};
 8001ad8:	2300      	movs	r3, #0
 8001ada:	733b      	strb	r3, [r7, #12]
 8001adc:	2300      	movs	r3, #0
 8001ade:	737b      	strb	r3, [r7, #13]

	// transmit token
	HAL_SPI_Transmit(&hspi2, &token, 1, 100);
 8001ae0:	1cf9      	adds	r1, r7, #3
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <SD_TxDataBlock+0x8c>)
 8001ae8:	f003 fa7c 	bl	8004fe4 <HAL_SPI_Transmit>

	// transmit data bytes
	HAL_SPI_Transmit(&hspi2, buff, 512, 100);
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4817      	ldr	r0, [pc, #92]	; (8001b54 <SD_TxDataBlock+0x8c>)
 8001af6:	f003 fa75 	bl	8004fe4 <HAL_SPI_Transmit>

	// transmit dummy crc since CRC not enabled
	HAL_SPI_Transmit(&hspi2, crc, 2, 100);
 8001afa:	f107 010c 	add.w	r1, r7, #12
 8001afe:	2364      	movs	r3, #100	; 0x64
 8001b00:	2202      	movs	r2, #2
 8001b02:	4814      	ldr	r0, [pc, #80]	; (8001b54 <SD_TxDataBlock+0x8c>)
 8001b04:	f003 fa6e 	bl	8004fe4 <HAL_SPI_Transmit>

	// wait for data response token
	for (int i = 0; i < 64; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e00b      	b.n	8001b26 <SD_TxDataBlock+0x5e>
	{
		resp = SD_ReceiveByte();
 8001b0e:	f7ff fe6b 	bl	80017e8 <SD_ReceiveByte>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]

		if ((resp & 0x1F) == 0x05)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d006      	beq.n	8001b2e <SD_TxDataBlock+0x66>
	for (int i = 0; i < 64; i++)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	3301      	adds	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2a:	ddf0      	ble.n	8001b0e <SD_TxDataBlock+0x46>
 8001b2c:	e000      	b.n	8001b30 <SD_TxDataBlock+0x68>
			break;
 8001b2e:	bf00      	nop
	}

	// now wait for programming to finish. TO DO: add a timeout here...
	while (SD_ReceiveByte() == 0);
 8001b30:	bf00      	nop
 8001b32:	f7ff fe59 	bl	80017e8 <SD_ReceiveByte>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0fa      	beq.n	8001b32 <SD_TxDataBlock+0x6a>

	// return success if data was accepted
	if ((resp & 0x1F) == 0x05)
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d101      	bne.n	8001b4a <SD_TxDataBlock+0x82>
		return 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <SD_TxDataBlock+0x84>

	return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000012c 	.word	0x2000012c

08001b58 <SD_Write>:

uint8_t SD_Write(uint8_t* txbuffer, uint32_t address, uint32_t numblocks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	Select();
 8001b64:	f7ff febc 	bl	80018e0 <Select>

	uint32_t sector = address >> 9;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	61bb      	str	r3, [r7, #24]

	if (numblocks == 1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10b      	bne.n	8001b8c <SD_Write+0x34>
	{
		if (SD_SendCommand(24, sector) == 0)
 8001b74:	69b9      	ldr	r1, [r7, #24]
 8001b76:	2018      	movs	r0, #24
 8001b78:	f7ff fe4a 	bl	8001810 <SD_SendCommand>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d12b      	bne.n	8001bda <SD_Write+0x82>
		{
			SD_TxDataBlock(txbuffer, 0xFE);//FE for one block
 8001b82:	21fe      	movs	r1, #254	; 0xfe
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff ff9f 	bl	8001ac8 <SD_TxDataBlock>
 8001b8a:	e026      	b.n	8001bda <SD_Write+0x82>
		}
	}
	else
	{
		if (SD_SendCommand(25, sector) == 0)
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	2019      	movs	r0, #25
 8001b90:	f7ff fe3e 	bl	8001810 <SD_SendCommand>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11f      	bne.n	8001bda <SD_Write+0x82>
		{
			for (int i = 0; i < numblocks; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e00d      	b.n	8001bbc <SD_Write+0x64>
			{
				if (!SD_TxDataBlock(txbuffer, 0xFC))//FE for more than 1 block
 8001ba0:	21fc      	movs	r1, #252	; 0xfc
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff ff90 	bl	8001ac8 <SD_TxDataBlock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <SD_Write+0x6e>
					break;

				txbuffer += 512;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bb4:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < numblocks; i++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8ed      	bhi.n	8001ba0 <SD_Write+0x48>
 8001bc4:	e000      	b.n	8001bc8 <SD_Write+0x70>
					break;
 8001bc6:	bf00      	nop
			}

			uint8_t token = 0xFD;
 8001bc8:	23fd      	movs	r3, #253	; 0xfd
 8001bca:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_Transmit(&hspi2, &token, 1, 100);
 8001bcc:	f107 0117 	add.w	r1, r7, #23
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <SD_Write+0x90>)
 8001bd6:	f003 fa05 	bl	8004fe4 <HAL_SPI_Transmit>
		}
	}

	Deselect();
 8001bda:	f7ff fe73 	bl	80018c4 <Deselect>

	return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000012c 	.word	0x2000012c

08001bec <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	e01e      	b.n	8001c36 <wave_init+0x4a>
		sintab[i] = (int) (1400.0f * sinf(i * 0.02454369261f));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <wave_init+0x64>
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	f007 fa85 	bl	800911c <sinf>
 8001c12:	eeb0 7a40 	vmov.f32	s14, s0
 8001c16:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001c54 <wave_init+0x68>
 8001c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c22:	ee17 3a90 	vmov	r3, s15
 8001c26:	b219      	sxth	r1, r3
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <wave_init+0x6c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2bff      	cmp	r3, #255	; 0xff
 8001c3a:	dddd      	ble.n	8001bf8 <wave_init+0xc>

	offset_440hz = 0;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <wave_init+0x70>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <wave_init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	3cc90fdb 	.word	0x3cc90fdb
 8001c54:	44af0000 	.word	0x44af0000
 8001c58:	200003cc 	.word	0x200003cc
 8001c5c:	200003ca 	.word	0x200003ca
 8001c60:	200003c8 	.word	0x200003c8

08001c64 <states>:
 */

#include "state_machine.h"
#include "variables.h"

void states(void){
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	if (rec_flag == 1) activeState = RecordState;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <states+0x48>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d102      	bne.n	8001c76 <states+0x12>
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <states+0x4c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
	if (stop_flag == 1) activeState = StopState;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <states+0x50>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <states+0x20>
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <states+0x4c>)
 8001c80:	2203      	movs	r2, #3
 8001c82:	701a      	strb	r2, [r3, #0]
	if (one_flag || two_flag || three_flag) activeState = PlayState;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <states+0x54>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <states+0x38>
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <states+0x58>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <states+0x38>
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <states+0x5c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <states+0x3e>
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <states+0x4c>)
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
} // end states
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	200000c8 	.word	0x200000c8
 8001cb0:	200003c4 	.word	0x200003c4
 8001cb4:	200000b8 	.word	0x200000b8
 8001cb8:	200000bc 	.word	0x200000bc
 8001cbc:	200000c0 	.word	0x200000c0
 8001cc0:	200000c4 	.word	0x200000c4

08001cc4 <stateMachine>:


void stateMachine(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

	switch (activeState){
 8001cc8:	4ba3      	ldr	r3, [pc, #652]	; (8001f58 <stateMachine+0x294>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	f200 82d2 	bhi.w	8002276 <stateMachine+0x5b2>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <stateMachine+0x14>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	0800225f 	.word	0x0800225f
 8001cdc:	08001ce9 	.word	0x08001ce9
 8001ce0:	08001ffb 	.word	0x08001ffb
 8001ce4:	08001fc9 	.word	0x08001fc9

	case RecordState: {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	489b      	ldr	r0, [pc, #620]	; (8001f5c <stateMachine+0x298>)
 8001cf0:	f002 fbb4 	bl	800445c <HAL_GPIO_WritePin>

		switch (activeRecordState){
 8001cf4:	4b9a      	ldr	r3, [pc, #616]	; (8001f60 <stateMachine+0x29c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	f200 82b9 	bhi.w	8002270 <stateMachine+0x5ac>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <stateMachine+0x40>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d6d 	.word	0x08001d6d
 8001d0c:	08001e0f 	.word	0x08001e0f
 8001d10:	08001eb1 	.word	0x08001eb1


		case RecordIdle: {

			if(rec_one_flag)
 8001d14:	4b93      	ldr	r3, [pc, #588]	; (8001f64 <stateMachine+0x2a0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <stateMachine+0x6c>
			{
				activeRecordState = RecordOne;
 8001d1c:	4b90      	ldr	r3, [pc, #576]	; (8001f60 <stateMachine+0x29c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_recordbuf[0],10, 1000);
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	220a      	movs	r2, #10
 8001d28:	498f      	ldr	r1, [pc, #572]	; (8001f68 <stateMachine+0x2a4>)
 8001d2a:	4890      	ldr	r0, [pc, #576]	; (8001f6c <stateMachine+0x2a8>)
 8001d2c:	f004 f95f 	bl	8005fee <HAL_UART_Transmit>
			}
			if(rec_two_flag) {
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <stateMachine+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <stateMachine+0x88>
				activeRecordState = RecordTwo;
 8001d38:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <stateMachine+0x29c>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_recordbuf[1],10, 1000);
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	220a      	movs	r2, #10
 8001d44:	498b      	ldr	r1, [pc, #556]	; (8001f74 <stateMachine+0x2b0>)
 8001d46:	4889      	ldr	r0, [pc, #548]	; (8001f6c <stateMachine+0x2a8>)
 8001d48:	f004 f951 	bl	8005fee <HAL_UART_Transmit>
			}
			if(rec_three_flag){
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <stateMachine+0x2b4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80fe 	beq.w	8001f52 <stateMachine+0x28e>
				activeRecordState = RecordThree;
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <stateMachine+0x29c>)
 8001d58:	2203      	movs	r2, #3
 8001d5a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_recordbuf[2],10, 1000);
 8001d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d60:	220a      	movs	r2, #10
 8001d62:	4986      	ldr	r1, [pc, #536]	; (8001f7c <stateMachine+0x2b8>)
 8001d64:	4881      	ldr	r0, [pc, #516]	; (8001f6c <stateMachine+0x2a8>)
 8001d66:	f004 f942 	bl	8005fee <HAL_UART_Transmit>
			}
			break;
 8001d6a:	e0f2      	b.n	8001f52 <stateMachine+0x28e>

		case RecordOne: {
			// if record button pressed and held, and button one pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4984      	ldr	r1, [pc, #528]	; (8001f80 <stateMachine+0x2bc>)
 8001d70:	4884      	ldr	r0, [pc, #528]	; (8001f84 <stateMachine+0x2c0>)
 8001d72:	f006 fbeb 	bl	800854c <f_mount>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <stateMachine+0x2c4>)
 8001d7c:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record1.bin", FA_CREATE_ALWAYS | FA_WRITE);//Combination of flag ovewrites file if present already in memory
 8001d7e:	220a      	movs	r2, #10
 8001d80:	4982      	ldr	r1, [pc, #520]	; (8001f8c <stateMachine+0x2c8>)
 8001d82:	4883      	ldr	r0, [pc, #524]	; (8001f90 <stateMachine+0x2cc>)
 8001d84:	f006 fc28 	bl	80085d8 <f_open>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <stateMachine+0x2c4>)
 8001d8e:	701a      	strb	r2, [r3, #0]

			if(savestart == 1){
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <stateMachine+0x2d0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d112      	bne.n	8001dbe <stateMachine+0xfa>
				fres=f_write(&sdfile, outputbuf, 512, &num);
 8001d98:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <stateMachine+0x2d4>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	497f      	ldr	r1, [pc, #508]	; (8001f9c <stateMachine+0x2d8>)
 8001da0:	487b      	ldr	r0, [pc, #492]	; (8001f90 <stateMachine+0x2cc>)
 8001da2:	f006 ff16 	bl	8008bd2 <f_write>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <stateMachine+0x2c4>)
 8001dac:	701a      	strb	r2, [r3, #0]
				savestart=0;
 8001dae:	4b79      	ldr	r3, [pc, #484]	; (8001f94 <stateMachine+0x2d0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001db4:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <stateMachine+0x2dc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <stateMachine+0x2dc>)
 8001dbc:	6013      	str	r3, [r2, #0]
			}

			if(savemid == 1){
 8001dbe:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <stateMachine+0x2e0>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d112      	bne.n	8001dec <stateMachine+0x128>
				fres=f_write(&sdfile, outputbuf+512, 512, &num);
 8001dc6:	4978      	ldr	r1, [pc, #480]	; (8001fa8 <stateMachine+0x2e4>)
 8001dc8:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <stateMachine+0x2d4>)
 8001dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dce:	4870      	ldr	r0, [pc, #448]	; (8001f90 <stateMachine+0x2cc>)
 8001dd0:	f006 feff 	bl	8008bd2 <f_write>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <stateMachine+0x2c4>)
 8001dda:	701a      	strb	r2, [r3, #0]
				savemid=0;
 8001ddc:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <stateMachine+0x2e0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <stateMachine+0x2dc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <stateMachine+0x2dc>)
 8001dea:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 8001dec:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <stateMachine+0x2dc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <stateMachine+0x13c>
				rec_one_flag = 0; // reset flag=0;
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <stateMachine+0x2a0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 8001dfa:	4865      	ldr	r0, [pc, #404]	; (8001f90 <stateMachine+0x2cc>)
 8001dfc:	f007 f8dc 	bl	8008fb8 <f_close>
			}


			HAL_TIM_Base_Start_IT(&htim3); // trigger interrupt to toggle LED <1>
 8001e00:	486a      	ldr	r0, [pc, #424]	; (8001fac <stateMachine+0x2e8>)
 8001e02:	f003 fc9c 	bl	800573e <HAL_TIM_Base_Start_IT>
			if (activeState == StopState) break;
 8001e06:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <stateMachine+0x294>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
			break;
 8001e0c:	e0a2      	b.n	8001f54 <stateMachine+0x290>

		case RecordTwo: {
			// if record button pressed and held, and button two pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	495b      	ldr	r1, [pc, #364]	; (8001f80 <stateMachine+0x2bc>)
 8001e12:	485c      	ldr	r0, [pc, #368]	; (8001f84 <stateMachine+0x2c0>)
 8001e14:	f006 fb9a 	bl	800854c <f_mount>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <stateMachine+0x2c4>)
 8001e1e:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record2.bin", FA_CREATE_ALWAYS | FA_WRITE);//Combination of flag overwrites file if present already in memory
 8001e20:	220a      	movs	r2, #10
 8001e22:	4963      	ldr	r1, [pc, #396]	; (8001fb0 <stateMachine+0x2ec>)
 8001e24:	485a      	ldr	r0, [pc, #360]	; (8001f90 <stateMachine+0x2cc>)
 8001e26:	f006 fbd7 	bl	80085d8 <f_open>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <stateMachine+0x2c4>)
 8001e30:	701a      	strb	r2, [r3, #0]

			if(savestart_2 == 1){
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <stateMachine+0x2f0>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d112      	bne.n	8001e60 <stateMachine+0x19c>
				fres=f_write(&sdfile, outputbuf, 512, &num);
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <stateMachine+0x2d4>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	4956      	ldr	r1, [pc, #344]	; (8001f9c <stateMachine+0x2d8>)
 8001e42:	4853      	ldr	r0, [pc, #332]	; (8001f90 <stateMachine+0x2cc>)
 8001e44:	f006 fec5 	bl	8008bd2 <f_write>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <stateMachine+0x2c4>)
 8001e4e:	701a      	strb	r2, [r3, #0]
				savestart_2=0;
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <stateMachine+0x2f0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <stateMachine+0x2dc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <stateMachine+0x2dc>)
 8001e5e:	6013      	str	r3, [r2, #0]
			}

			if(savemid_2 == 1){
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <stateMachine+0x2f4>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d112      	bne.n	8001e8e <stateMachine+0x1ca>
				fres=f_write(&sdfile, outputbuf+512, 512, &num);
 8001e68:	494f      	ldr	r1, [pc, #316]	; (8001fa8 <stateMachine+0x2e4>)
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <stateMachine+0x2d4>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	4847      	ldr	r0, [pc, #284]	; (8001f90 <stateMachine+0x2cc>)
 8001e72:	f006 feae 	bl	8008bd2 <f_write>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <stateMachine+0x2c4>)
 8001e7c:	701a      	strb	r2, [r3, #0]
				savemid_2=0;
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <stateMachine+0x2f4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <stateMachine+0x2dc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4a45      	ldr	r2, [pc, #276]	; (8001fa0 <stateMachine+0x2dc>)
 8001e8c:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 8001e8e:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <stateMachine+0x2dc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <stateMachine+0x1de>
				rec_two_flag = 0; // reset flag=0;
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <stateMachine+0x2ac>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 8001e9c:	483c      	ldr	r0, [pc, #240]	; (8001f90 <stateMachine+0x2cc>)
 8001e9e:	f007 f88b 	bl	8008fb8 <f_close>
			}

			HAL_TIM_Base_Start_IT(&htim3);
 8001ea2:	4842      	ldr	r0, [pc, #264]	; (8001fac <stateMachine+0x2e8>)
 8001ea4:	f003 fc4b 	bl	800573e <HAL_TIM_Base_Start_IT>
			if(activeState == StopState) break;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <stateMachine+0x294>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b03      	cmp	r3, #3
			break;
 8001eae:	e051      	b.n	8001f54 <stateMachine+0x290>
		case RecordThree: {

			// if record button pressed and held, and button two pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4933      	ldr	r1, [pc, #204]	; (8001f80 <stateMachine+0x2bc>)
 8001eb4:	4833      	ldr	r0, [pc, #204]	; (8001f84 <stateMachine+0x2c0>)
 8001eb6:	f006 fb49 	bl	800854c <f_mount>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <stateMachine+0x2c4>)
 8001ec0:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record3.bin", FA_CREATE_ALWAYS | FA_WRITE);//Combination of flag overwrites file if present already in memory
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	493d      	ldr	r1, [pc, #244]	; (8001fbc <stateMachine+0x2f8>)
 8001ec6:	4832      	ldr	r0, [pc, #200]	; (8001f90 <stateMachine+0x2cc>)
 8001ec8:	f006 fb86 	bl	80085d8 <f_open>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <stateMachine+0x2c4>)
 8001ed2:	701a      	strb	r2, [r3, #0]

			if(savestart_3 == 1){
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <stateMachine+0x2fc>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d112      	bne.n	8001f02 <stateMachine+0x23e>
				fres=f_write(&sdfile, outputbuf, 512, &num);
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <stateMachine+0x2d4>)
 8001ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee2:	492e      	ldr	r1, [pc, #184]	; (8001f9c <stateMachine+0x2d8>)
 8001ee4:	482a      	ldr	r0, [pc, #168]	; (8001f90 <stateMachine+0x2cc>)
 8001ee6:	f006 fe74 	bl	8008bd2 <f_write>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <stateMachine+0x2c4>)
 8001ef0:	701a      	strb	r2, [r3, #0]
				savestart_3=0;
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <stateMachine+0x2fc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <stateMachine+0x2dc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <stateMachine+0x2dc>)
 8001f00:	6013      	str	r3, [r2, #0]
			}

			if(savemid_3 == 1){
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <stateMachine+0x300>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d112      	bne.n	8001f30 <stateMachine+0x26c>
				fres=f_write(&sdfile, outputbuf+512, 512, &num);
 8001f0a:	4927      	ldr	r1, [pc, #156]	; (8001fa8 <stateMachine+0x2e4>)
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <stateMachine+0x2d4>)
 8001f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f12:	481f      	ldr	r0, [pc, #124]	; (8001f90 <stateMachine+0x2cc>)
 8001f14:	f006 fe5d 	bl	8008bd2 <f_write>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <stateMachine+0x2c4>)
 8001f1e:	701a      	strb	r2, [r3, #0]
				savemid_3=0;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <stateMachine+0x300>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
				record_count--;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <stateMachine+0x2dc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <stateMachine+0x2dc>)
 8001f2e:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <stateMachine+0x2dc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <stateMachine+0x280>
				rec_three_flag = 0; // reset flag=0;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <stateMachine+0x2b4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 8001f3e:	4814      	ldr	r0, [pc, #80]	; (8001f90 <stateMachine+0x2cc>)
 8001f40:	f007 f83a 	bl	8008fb8 <f_close>
			}


			HAL_TIM_Base_Start_IT(&htim3);
 8001f44:	4819      	ldr	r0, [pc, #100]	; (8001fac <stateMachine+0x2e8>)
 8001f46:	f003 fbfa 	bl	800573e <HAL_TIM_Base_Start_IT>
			if(activeState == StopState) break;
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <stateMachine+0x294>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
			break;
 8001f50:	e000      	b.n	8001f54 <stateMachine+0x290>
			break;
 8001f52:	bf00      	nop
		} // end case RecordThree

		} // end nested switch

		break;
 8001f54:	e18c      	b.n	8002270 <stateMachine+0x5ac>
 8001f56:	bf00      	nop
 8001f58:	200003c4 	.word	0x200003c4
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	200001c5 	.word	0x200001c5
 8001f64:	200000cc 	.word	0x200000cc
 8001f68:	20000028 	.word	0x20000028
 8001f6c:	20000384 	.word	0x20000384
 8001f70:	200000d0 	.word	0x200000d0
 8001f74:	20000033 	.word	0x20000033
 8001f78:	200000d4 	.word	0x200000d4
 8001f7c:	2000003e 	.word	0x2000003e
 8001f80:	08009bcc 	.word	0x08009bcc
 8001f84:	200009d0 	.word	0x200009d0
 8001f88:	20001a3c 	.word	0x20001a3c
 8001f8c:	08009bd0 	.word	0x08009bd0
 8001f90:	20001004 	.word	0x20001004
 8001f94:	200000a8 	.word	0x200000a8
 8001f98:	20001238 	.word	0x20001238
 8001f9c:	20000c04 	.word	0x20000c04
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	200000a9 	.word	0x200000a9
 8001fa8:	20000e04 	.word	0x20000e04
 8001fac:	200001c8 	.word	0x200001c8
 8001fb0:	08009bdc 	.word	0x08009bdc
 8001fb4:	200000aa 	.word	0x200000aa
 8001fb8:	200000ab 	.word	0x200000ab
 8001fbc:	08009be8 	.word	0x08009be8
 8001fc0:	200000ac 	.word	0x200000ac
 8001fc4:	200000ad 	.word	0x200000ad
	} // end case RecordState



	case StopState: {
		stop_flag = 0;
 8001fc8:	4bac      	ldr	r3, [pc, #688]	; (800227c <stateMachine+0x5b8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
		resetLEDs();
 8001fce:	f7ff fa17 	bl	8001400 <resetLEDs>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001fd2:	48ab      	ldr	r0, [pc, #684]	; (8002280 <stateMachine+0x5bc>)
 8001fd4:	f003 fbd7 	bl	8005786 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart2,g_stopbuf,10, 1000);
 8001fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fdc:	220a      	movs	r2, #10
 8001fde:	49a9      	ldr	r1, [pc, #676]	; (8002284 <stateMachine+0x5c0>)
 8001fe0:	48a9      	ldr	r0, [pc, #676]	; (8002288 <stateMachine+0x5c4>)
 8001fe2:	f004 f804 	bl	8005fee <HAL_UART_Transmit>
		HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_1); // stop DAC peripheral
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	48a8      	ldr	r0, [pc, #672]	; (800228c <stateMachine+0x5c8>)
 8001fea:	f001 fb8d 	bl	8003708 <HAL_DAC_Stop_DMA>
		resetFlags();
 8001fee:	f000 f983 	bl	80022f8 <resetFlags>
		activeState = IdleState;
 8001ff2:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <stateMachine+0x5cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
		break;
 8001ff8:	e13d      	b.n	8002276 <stateMachine+0x5b2>




	case PlayState: {
		switch (activePlayState){
 8001ffa:	4ba6      	ldr	r3, [pc, #664]	; (8002294 <stateMachine+0x5d0>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	f200 8138 	bhi.w	8002274 <stateMachine+0x5b0>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <stateMachine+0x348>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	0800201d 	.word	0x0800201d
 8002010:	08002075 	.word	0x08002075
 8002014:	08002117 	.word	0x08002117
 8002018:	080021b9 	.word	0x080021b9

		case PlayIdle: {
			if (one_flag){
 800201c:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <stateMachine+0x5d4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <stateMachine+0x374>
				activePlayState = PlayOne;
 8002024:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <stateMachine+0x5d0>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_playbackbuf[0],10, 1000);
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	220a      	movs	r2, #10
 8002030:	499a      	ldr	r1, [pc, #616]	; (800229c <stateMachine+0x5d8>)
 8002032:	4895      	ldr	r0, [pc, #596]	; (8002288 <stateMachine+0x5c4>)
 8002034:	f003 ffdb 	bl	8005fee <HAL_UART_Transmit>
			}
			if (two_flag) {
 8002038:	4b99      	ldr	r3, [pc, #612]	; (80022a0 <stateMachine+0x5dc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <stateMachine+0x390>
				activePlayState = PlayTwo;
 8002040:	4b94      	ldr	r3, [pc, #592]	; (8002294 <stateMachine+0x5d0>)
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_playbackbuf[1],10, 1000);
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	220a      	movs	r2, #10
 800204c:	4995      	ldr	r1, [pc, #596]	; (80022a4 <stateMachine+0x5e0>)
 800204e:	488e      	ldr	r0, [pc, #568]	; (8002288 <stateMachine+0x5c4>)
 8002050:	f003 ffcd 	bl	8005fee <HAL_UART_Transmit>
			}
			if(three_flag) {
 8002054:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <stateMachine+0x5e4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80fe 	beq.w	800225a <stateMachine+0x596>
				activePlayState = PlayThree;
 800205e:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <stateMachine+0x5d0>)
 8002060:	2203      	movs	r2, #3
 8002062:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,g_playbackbuf[2],10, 1000);
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	220a      	movs	r2, #10
 800206a:	4990      	ldr	r1, [pc, #576]	; (80022ac <stateMachine+0x5e8>)
 800206c:	4886      	ldr	r0, [pc, #536]	; (8002288 <stateMachine+0x5c4>)
 800206e:	f003 ffbe 	bl	8005fee <HAL_UART_Transmit>
			}
			break;
 8002072:	e0f2      	b.n	800225a <stateMachine+0x596>
		case PlayOne: {

			// if record button pressed and held, and button one pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 8002074:	2201      	movs	r2, #1
 8002076:	498e      	ldr	r1, [pc, #568]	; (80022b0 <stateMachine+0x5ec>)
 8002078:	488e      	ldr	r0, [pc, #568]	; (80022b4 <stateMachine+0x5f0>)
 800207a:	f006 fa67 	bl	800854c <f_mount>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <stateMachine+0x5f4>)
 8002084:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record1.bin", FA_OPEN_ALWAYS | FA_READ);//Combination of flag ovewrites file if present already in memory
 8002086:	2211      	movs	r2, #17
 8002088:	498c      	ldr	r1, [pc, #560]	; (80022bc <stateMachine+0x5f8>)
 800208a:	488d      	ldr	r0, [pc, #564]	; (80022c0 <stateMachine+0x5fc>)
 800208c:	f006 faa4 	bl	80085d8 <f_open>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <stateMachine+0x5f4>)
 8002096:	701a      	strb	r2, [r3, #0]

			if(playstart == 1){
 8002098:	4b8a      	ldr	r3, [pc, #552]	; (80022c4 <stateMachine+0x600>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d112      	bne.n	80020c6 <stateMachine+0x402>
				fres=f_read(&sdfile, dacbuffer, 512, &num);
 80020a0:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <stateMachine+0x604>)
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	4989      	ldr	r1, [pc, #548]	; (80022cc <stateMachine+0x608>)
 80020a8:	4885      	ldr	r0, [pc, #532]	; (80022c0 <stateMachine+0x5fc>)
 80020aa:	f006 fc53 	bl	8008954 <f_read>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <stateMachine+0x5f4>)
 80020b4:	701a      	strb	r2, [r3, #0]
				playstart=0;
 80020b6:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <stateMachine+0x600>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
				record_count--;
 80020bc:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <stateMachine+0x60c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	4a83      	ldr	r2, [pc, #524]	; (80022d0 <stateMachine+0x60c>)
 80020c4:	6013      	str	r3, [r2, #0]
			}

			if(playmid == 1){
 80020c6:	4b83      	ldr	r3, [pc, #524]	; (80022d4 <stateMachine+0x610>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d112      	bne.n	80020f4 <stateMachine+0x430>
				fres=f_read(&sdfile, dacbuffer+512, 512, &num);
 80020ce:	4982      	ldr	r1, [pc, #520]	; (80022d8 <stateMachine+0x614>)
 80020d0:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <stateMachine+0x604>)
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	487a      	ldr	r0, [pc, #488]	; (80022c0 <stateMachine+0x5fc>)
 80020d8:	f006 fc3c 	bl	8008954 <f_read>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <stateMachine+0x5f4>)
 80020e2:	701a      	strb	r2, [r3, #0]
				playmid=0;
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <stateMachine+0x610>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
				record_count--;
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <stateMachine+0x60c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <stateMachine+0x60c>)
 80020f2:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 80020f4:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <stateMachine+0x60c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <stateMachine+0x444>
				one_flag = 0; // reset flag=0;
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <stateMachine+0x5d4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 8002102:	486f      	ldr	r0, [pc, #444]	; (80022c0 <stateMachine+0x5fc>)
 8002104:	f006 ff58 	bl	8008fb8 <f_close>
			}


			HAL_TIM_Base_Start_IT(&htim3);
 8002108:	485d      	ldr	r0, [pc, #372]	; (8002280 <stateMachine+0x5bc>)
 800210a:	f003 fb18 	bl	800573e <HAL_TIM_Base_Start_IT>
			if(activeState == StopState) break; // check for stop condition
 800210e:	4b60      	ldr	r3, [pc, #384]	; (8002290 <stateMachine+0x5cc>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b03      	cmp	r3, #3
			break;
 8002114:	e0a2      	b.n	800225c <stateMachine+0x598>
		case PlayTwo: {

			// if record button pressed and held, and button one pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 8002116:	2201      	movs	r2, #1
 8002118:	4965      	ldr	r1, [pc, #404]	; (80022b0 <stateMachine+0x5ec>)
 800211a:	4866      	ldr	r0, [pc, #408]	; (80022b4 <stateMachine+0x5f0>)
 800211c:	f006 fa16 	bl	800854c <f_mount>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <stateMachine+0x5f4>)
 8002126:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record2.bin", FA_OPEN_ALWAYS | FA_READ);//Combination of flag ovewrites file if present already in memory
 8002128:	2211      	movs	r2, #17
 800212a:	496c      	ldr	r1, [pc, #432]	; (80022dc <stateMachine+0x618>)
 800212c:	4864      	ldr	r0, [pc, #400]	; (80022c0 <stateMachine+0x5fc>)
 800212e:	f006 fa53 	bl	80085d8 <f_open>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <stateMachine+0x5f4>)
 8002138:	701a      	strb	r2, [r3, #0]

			if(playstart_2 == 1){
 800213a:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <stateMachine+0x61c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d112      	bne.n	8002168 <stateMachine+0x4a4>
				fres=f_read(&sdfile, dacbuffer, 512, &num);
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <stateMachine+0x604>)
 8002144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002148:	4960      	ldr	r1, [pc, #384]	; (80022cc <stateMachine+0x608>)
 800214a:	485d      	ldr	r0, [pc, #372]	; (80022c0 <stateMachine+0x5fc>)
 800214c:	f006 fc02 	bl	8008954 <f_read>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <stateMachine+0x5f4>)
 8002156:	701a      	strb	r2, [r3, #0]
				playstart_2=0;
 8002158:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <stateMachine+0x61c>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
				record_count--;
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <stateMachine+0x60c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <stateMachine+0x60c>)
 8002166:	6013      	str	r3, [r2, #0]
			}

			if(playmid_2 == 1){
 8002168:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <stateMachine+0x620>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d112      	bne.n	8002196 <stateMachine+0x4d2>
				fres=f_read(&sdfile, dacbuffer+512, 512, &num);
 8002170:	4959      	ldr	r1, [pc, #356]	; (80022d8 <stateMachine+0x614>)
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <stateMachine+0x604>)
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	4851      	ldr	r0, [pc, #324]	; (80022c0 <stateMachine+0x5fc>)
 800217a:	f006 fbeb 	bl	8008954 <f_read>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <stateMachine+0x5f4>)
 8002184:	701a      	strb	r2, [r3, #0]
				playmid_2=0;
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <stateMachine+0x620>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
				record_count--;
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <stateMachine+0x60c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	4a4f      	ldr	r2, [pc, #316]	; (80022d0 <stateMachine+0x60c>)
 8002194:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 8002196:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <stateMachine+0x60c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <stateMachine+0x4e6>
				two_flag = 0;// reset flag=0;
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <stateMachine+0x5dc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 80021a4:	4846      	ldr	r0, [pc, #280]	; (80022c0 <stateMachine+0x5fc>)
 80021a6:	f006 ff07 	bl	8008fb8 <f_close>
			}

			HAL_TIM_Base_Start_IT(&htim3);
 80021aa:	4835      	ldr	r0, [pc, #212]	; (8002280 <stateMachine+0x5bc>)
 80021ac:	f003 fac7 	bl	800573e <HAL_TIM_Base_Start_IT>
			if(activeState == StopState) break;
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <stateMachine+0x5cc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b03      	cmp	r3, #3

			break;
 80021b6:	e051      	b.n	800225c <stateMachine+0x598>
		case PlayThree: {

			// if record button pressed and held, and button one pressed and released, do the following:

			//mount file system (SD card)
			fres=f_mount(&fs, "", 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	493d      	ldr	r1, [pc, #244]	; (80022b0 <stateMachine+0x5ec>)
 80021bc:	483d      	ldr	r0, [pc, #244]	; (80022b4 <stateMachine+0x5f0>)
 80021be:	f006 f9c5 	bl	800854c <f_mount>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <stateMachine+0x5f4>)
 80021c8:	701a      	strb	r2, [r3, #0]

			//In full project implementation we have to use buttons for playback
			fres=f_open(&sdfile, "record3.bin", FA_OPEN_ALWAYS | FA_READ);//Combination of flag ovewrites file if present already in memory
 80021ca:	2211      	movs	r2, #17
 80021cc:	4946      	ldr	r1, [pc, #280]	; (80022e8 <stateMachine+0x624>)
 80021ce:	483c      	ldr	r0, [pc, #240]	; (80022c0 <stateMachine+0x5fc>)
 80021d0:	f006 fa02 	bl	80085d8 <f_open>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <stateMachine+0x5f4>)
 80021da:	701a      	strb	r2, [r3, #0]

			if(playstart_3 == 1){
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <stateMachine+0x628>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d112      	bne.n	800220a <stateMachine+0x546>
				fres=f_read(&sdfile, dacbuffer, 512, &num);
 80021e4:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <stateMachine+0x604>)
 80021e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ea:	4938      	ldr	r1, [pc, #224]	; (80022cc <stateMachine+0x608>)
 80021ec:	4834      	ldr	r0, [pc, #208]	; (80022c0 <stateMachine+0x5fc>)
 80021ee:	f006 fbb1 	bl	8008954 <f_read>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <stateMachine+0x5f4>)
 80021f8:	701a      	strb	r2, [r3, #0]
				playstart_3=0;
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <stateMachine+0x628>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
				record_count--;
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <stateMachine+0x60c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <stateMachine+0x60c>)
 8002208:	6013      	str	r3, [r2, #0]
			}

			if(playmid_3 == 1){
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <stateMachine+0x62c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d112      	bne.n	8002238 <stateMachine+0x574>
				fres=f_read(&sdfile, dacbuffer+512, 512, &num);
 8002212:	4931      	ldr	r1, [pc, #196]	; (80022d8 <stateMachine+0x614>)
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <stateMachine+0x604>)
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	4829      	ldr	r0, [pc, #164]	; (80022c0 <stateMachine+0x5fc>)
 800221c:	f006 fb9a 	bl	8008954 <f_read>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <stateMachine+0x5f4>)
 8002226:	701a      	strb	r2, [r3, #0]
				playmid_3=0;
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <stateMachine+0x62c>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
				record_count--;
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <stateMachine+0x60c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <stateMachine+0x60c>)
 8002236:	6013      	str	r3, [r2, #0]

			}

			if(record_count == 0){
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <stateMachine+0x60c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <stateMachine+0x588>
				three_flag = 0;// reset flag=0;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <stateMachine+0x5e4>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
				f_close(&sdfile);
 8002246:	481e      	ldr	r0, [pc, #120]	; (80022c0 <stateMachine+0x5fc>)
 8002248:	f006 feb6 	bl	8008fb8 <f_close>
			}


			HAL_TIM_Base_Start_IT(&htim3);
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <stateMachine+0x5bc>)
 800224e:	f003 fa76 	bl	800573e <HAL_TIM_Base_Start_IT>
			if(activeState == StopState) break;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <stateMachine+0x5cc>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
			break;
 8002258:	e000      	b.n	800225c <stateMachine+0x598>
			break;
 800225a:	bf00      	nop
		} // end case PlayThree
		} // end nested switch
		break;
 800225c:	e00a      	b.n	8002274 <stateMachine+0x5b0>




	case IdleState: {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002264:	4823      	ldr	r0, [pc, #140]	; (80022f4 <stateMachine+0x630>)
 8002266:	f002 f8f9 	bl	800445c <HAL_GPIO_WritePin>
		resetStates();
 800226a:	f000 f8a1 	bl	80023b0 <resetStates>
		break;
 800226e:	e002      	b.n	8002276 <stateMachine+0x5b2>
		break;
 8002270:	bf00      	nop
 8002272:	e000      	b.n	8002276 <stateMachine+0x5b2>
		break;
 8002274:	bf00      	nop
	} // end case IdleState
	} // end switch

} // end stateMachine
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000b8 	.word	0x200000b8
 8002280:	200001c8 	.word	0x200001c8
 8002284:	2000001c 	.word	0x2000001c
 8002288:	20000384 	.word	0x20000384
 800228c:	20000310 	.word	0x20000310
 8002290:	200003c4 	.word	0x200003c4
 8002294:	200001c4 	.word	0x200001c4
 8002298:	200000bc 	.word	0x200000bc
 800229c:	2000004c 	.word	0x2000004c
 80022a0:	200000c0 	.word	0x200000c0
 80022a4:	20000057 	.word	0x20000057
 80022a8:	200000c4 	.word	0x200000c4
 80022ac:	20000062 	.word	0x20000062
 80022b0:	08009bcc 	.word	0x08009bcc
 80022b4:	200009d0 	.word	0x200009d0
 80022b8:	20001a3c 	.word	0x20001a3c
 80022bc:	08009bd0 	.word	0x08009bd0
 80022c0:	20001004 	.word	0x20001004
 80022c4:	200000ae 	.word	0x200000ae
 80022c8:	20001238 	.word	0x20001238
 80022cc:	2000123c 	.word	0x2000123c
 80022d0:	20000004 	.word	0x20000004
 80022d4:	200000af 	.word	0x200000af
 80022d8:	2000163c 	.word	0x2000163c
 80022dc:	08009bdc 	.word	0x08009bdc
 80022e0:	200000b0 	.word	0x200000b0
 80022e4:	200000b1 	.word	0x200000b1
 80022e8:	08009be8 	.word	0x08009be8
 80022ec:	200000b2 	.word	0x200000b2
 80022f0:	200000b3 	.word	0x200000b3
 80022f4:	40020400 	.word	0x40020400

080022f8 <resetFlags>:



void resetFlags()
{ // this function resets all the flags used to determine states.
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
	rec_flag = 0;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <resetFlags+0x74>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
	stop_flag = 0;
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <resetFlags+0x78>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
	one_flag = 0;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <resetFlags+0x7c>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
	two_flag = 0;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <resetFlags+0x80>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
	three_flag = 0;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <resetFlags+0x84>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
	savestart=0;//for half callback
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <resetFlags+0x88>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
	savemid=0;//for full callback
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <resetFlags+0x8c>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
	savestart_2=0;//for half callback
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <resetFlags+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
	savemid_2=0;//for full callback
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <resetFlags+0x94>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
	savestart_3=0;//for half callback
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <resetFlags+0x98>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
	savemid_3=0;//for full callback
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <resetFlags+0x9c>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]

	playstart=0;//for half callback
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <resetFlags+0xa0>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
	playmid=0;//for full callback
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <resetFlags+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	playstart_2=0;//for half callback
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <resetFlags+0xa8>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
	playmid_2=0;//for full callback
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <resetFlags+0xac>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	playstart_3=0;//for half callback
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <resetFlags+0xb0>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
	playmid_3=0;//for full callback
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <resetFlags+0xb4>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]

} // end resetFlags
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	200000c8 	.word	0x200000c8
 8002370:	200000b8 	.word	0x200000b8
 8002374:	200000bc 	.word	0x200000bc
 8002378:	200000c0 	.word	0x200000c0
 800237c:	200000c4 	.word	0x200000c4
 8002380:	200000a8 	.word	0x200000a8
 8002384:	200000a9 	.word	0x200000a9
 8002388:	200000aa 	.word	0x200000aa
 800238c:	200000ab 	.word	0x200000ab
 8002390:	200000ac 	.word	0x200000ac
 8002394:	200000ad 	.word	0x200000ad
 8002398:	200000ae 	.word	0x200000ae
 800239c:	200000af 	.word	0x200000af
 80023a0:	200000b0 	.word	0x200000b0
 80023a4:	200000b1 	.word	0x200000b1
 80023a8:	200000b2 	.word	0x200000b2
 80023ac:	200000b3 	.word	0x200000b3

080023b0 <resetStates>:



void resetStates()
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	activeState = IdleState;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <resetStates+0x20>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
	activeRecordState = RecordIdle;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <resetStates+0x24>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
	activePlayState = PlayIdle;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <resetStates+0x28>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200003c4 	.word	0x200003c4
 80023d4:	200001c5 	.word	0x200001c5
 80023d8:	200001c4 	.word	0x200001c4

080023dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_MspInit+0x4c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_MspInit+0x4c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_MspInit+0x4c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_MspInit+0x4c>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800241a:	2007      	movs	r0, #7
 800241c:	f001 f862 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <HAL_ADC_MspInit+0xd8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d155      	bne.n	80024fa <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_ADC_MspInit+0xdc>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002486:	2301      	movs	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248a:	2303      	movs	r3, #3
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	481c      	ldr	r0, [pc, #112]	; (800250c <HAL_ADC_MspInit+0xe0>)
 800249a:	f001 fe35 	bl	8004108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_ADC_MspInit+0xe8>)
 80024a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024e0:	f001 fa34 	bl	800394c <HAL_DMA_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80024ea:	f7fe ff53 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_ADC_MspInit+0xe4>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40012000 	.word	0x40012000
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000
 8002510:	20000324 	.word	0x20000324
 8002514:	40026410 	.word	0x40026410

08002518 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <HAL_DAC_MspInit+0xdc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d157      	bne.n	80025ea <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 8002544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_DAC_MspInit+0xe0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002572:	2310      	movs	r3, #16
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002576:	2303      	movs	r3, #3
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	481d      	ldr	r0, [pc, #116]	; (80025fc <HAL_DAC_MspInit+0xe4>)
 8002586:	f001 fdbf 	bl	8004108 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_DAC_MspInit+0xec>)
 800258e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 8002592:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002596:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80025ce:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025d0:	f001 f9bc 	bl	800394c <HAL_DMA_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 80025da:	f7fe fedb 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_DAC_MspInit+0xe8>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40007400 	.word	0x40007400
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	20000208 	.word	0x20000208
 8002604:	40026088 	.word	0x40026088

08002608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_SPI_MspInit+0xe0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d15a      	bne.n	80026e0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a27      	ldr	r2, [pc, #156]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a20      	ldr	r2, [pc, #128]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_SPI_MspInit+0xe4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800267e:	2302      	movs	r3, #2
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800268e:	2307      	movs	r3, #7
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4815      	ldr	r0, [pc, #84]	; (80026f0 <HAL_SPI_MspInit+0xe8>)
 800269a:	f001 fd35 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800269e:	2304      	movs	r3, #4
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026ae:	2305      	movs	r3, #5
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <HAL_SPI_MspInit+0xe8>)
 80026ba:	f001 fd25 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026d0:	2305      	movs	r3, #5
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <HAL_SPI_MspInit+0xec>)
 80026dc:	f001 fd14 	bl	8004108 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	; 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40003800 	.word	0x40003800
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020400 	.word	0x40020400

080026f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_TIM_Base_MspInit+0x70>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d116      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	201d      	movs	r0, #29
 800272c:	f000 fee5 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002730:	201d      	movs	r0, #29
 8002732:	f000 fefe 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002736:	e012      	b.n	800275e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_TIM_Base_MspInit+0x78>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10d      	bne.n	800275e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_TIM_Base_MspInit+0x74>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40000400 	.word	0x40000400
 800276c:	40023800 	.word	0x40023800
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_UART_MspInit+0xe0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d159      	bne.n	800284a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_UART_MspInit+0xe4>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_UART_MspInit+0xe4>)
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_UART_MspInit+0xe4>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_UART_MspInit+0xe4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_UART_MspInit+0xe4>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_UART_MspInit+0xe4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ce:	230c      	movs	r3, #12
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027de:	2307      	movs	r3, #7
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4619      	mov	r1, r3
 80027e8:	481c      	ldr	r0, [pc, #112]	; (800285c <HAL_UART_MspInit+0xe8>)
 80027ea:	f001 fc8d 	bl	8004108 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_UART_MspInit+0xec>)
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_UART_MspInit+0xf0>)
 80027f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_UART_MspInit+0xec>)
 80027f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_UART_MspInit+0xec>)
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_UART_MspInit+0xec>)
 800280a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_UART_MspInit+0xec>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_UART_MspInit+0xec>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002830:	f001 f88c 	bl	800394c <HAL_DMA_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800283a:	f7fe fdab 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
 8002844:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_UART_MspInit+0xec>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40004400 	.word	0x40004400
 8002858:	40023800 	.word	0x40023800
 800285c:	40020000 	.word	0x40020000
 8002860:	200002b0 	.word	0x200002b0
 8002864:	400260a0 	.word	0x400260a0

08002868 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80028bc:	f000 f910 	bl	8002ae0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line 4 interrupt.
 */
void EXTI4_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */

	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80028c8:	2010      	movs	r0, #16
 80028ca:	f001 fdfb 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */

	/* USER CODE END EXTI4_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <DMA1_Stream5_IRQHandler+0x10>)
 80028da:	f001 f9ad 	bl	8003c38 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000208 	.word	0x20000208

080028e8 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <DMA1_Stream6_IRQHandler+0x10>)
 80028ee:	f001 f9a3 	bl	8003c38 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002b0 	.word	0x200002b0

080028fc <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002900:	2040      	movs	r0, #64	; 0x40
 8002902:	f001 fddf 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002906:	2080      	movs	r0, #128	; 0x80
 8002908:	f001 fddc 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800290c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002910:	f001 fdd8 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002914:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002918:	f001 fdd4 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */
	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8002924:	4817      	ldr	r0, [pc, #92]	; (8002984 <TIM3_IRQHandler+0x64>)
 8002926:	f002 ff59 	bl	80057dc <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	if ((activeRecordState == RecordOne) || (activePlayState == PlayOne)) HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <TIM3_IRQHandler+0x68>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d003      	beq.n	800293a <TIM3_IRQHandler+0x1a>
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <TIM3_IRQHandler+0x6c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <TIM3_IRQHandler+0x26>
 800293a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293e:	4814      	ldr	r0, [pc, #80]	; (8002990 <TIM3_IRQHandler+0x70>)
 8002940:	f001 fda5 	bl	800448e <HAL_GPIO_TogglePin>
 8002944:	e01b      	b.n	800297e <TIM3_IRQHandler+0x5e>
	else if ((activeRecordState == RecordTwo) || (activePlayState == PlayTwo)) HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <TIM3_IRQHandler+0x68>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <TIM3_IRQHandler+0x36>
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <TIM3_IRQHandler+0x6c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d105      	bne.n	8002962 <TIM3_IRQHandler+0x42>
 8002956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800295a:	480e      	ldr	r0, [pc, #56]	; (8002994 <TIM3_IRQHandler+0x74>)
 800295c:	f001 fd97 	bl	800448e <HAL_GPIO_TogglePin>
 8002960:	e00d      	b.n	800297e <TIM3_IRQHandler+0x5e>
	else if ((activeRecordState == RecordThree) || (activePlayState == PlayThree)) HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <TIM3_IRQHandler+0x68>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d003      	beq.n	8002972 <TIM3_IRQHandler+0x52>
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <TIM3_IRQHandler+0x6c>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d105      	bne.n	800297e <TIM3_IRQHandler+0x5e>
 8002972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002976:	4807      	ldr	r0, [pc, #28]	; (8002994 <TIM3_IRQHandler+0x74>)
 8002978:	f001 fd89 	bl	800448e <HAL_GPIO_TogglePin>
	/* USER CODE END TIM3_IRQn 1 */
}
 800297c:	e7ff      	b.n	800297e <TIM3_IRQHandler+0x5e>
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200001c8 	.word	0x200001c8
 8002988:	200001c5 	.word	0x200001c5
 800298c:	200001c4 	.word	0x200001c4
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400

08002998 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800299c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029a0:	f001 fd90 	bl	80044c4 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <DMA2_Stream0_IRQHandler+0x10>)
 80029ae:	f001 f943 	bl	8003c38 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000324 	.word	0x20000324

080029bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <SystemInit+0x28>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <SystemInit+0x28>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SystemInit+0x28>)
 80029d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d6:	609a      	str	r2, [r3, #8]
#endif
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ee:	e003      	b.n	80029f8 <LoopCopyDataInit>

080029f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f6:	3104      	adds	r1, #4

080029f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f8:	480b      	ldr	r0, [pc, #44]	; (8002a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a00:	d3f6      	bcc.n	80029f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a04:	e002      	b.n	8002a0c <LoopFillZerobss>

08002a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a08:	f842 3b04 	str.w	r3, [r2], #4

08002a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a10:	d3f9      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a12:	f7ff ffd3 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f006 fb55 	bl	80090c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1a:	f7fe f8d7 	bl	8000bcc <main>
  bx  lr    
 8002a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a24:	0800a0b8 	.word	0x0800a0b8
  ldr  r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a2c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002a30:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002a34:	20001eb0 	.word	0x20001eb0

08002a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC_IRQHandler>
	...

08002a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_Init+0x40>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_Init+0x40>)
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_Init+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_Init+0x40>)
 8002a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_Init+0x40>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f000 fd3d 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f000 f808 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a70:	f7ff fcb4 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x54>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x58>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd55 	bl	800354e <HAL_SYSTICK_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00e      	b.n	8002acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d80a      	bhi.n	8002aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f000 fd1d 	bl	80034fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <HAL_InitTick+0x5c>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000074 	.word	0x20000074
 8002adc:	20000070 	.word	0x20000070

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000074 	.word	0x20000074
 8002b04:	20001a44 	.word	0x20001a44

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20001a44 	.word	0x20001a44

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_Delay+0x40>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000074 	.word	0x20000074

08002b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e033      	b.n	8002be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fc52 	bl	800242c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002baa:	f023 0302 	bic.w	r3, r3, #2
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa46 	bl	8003048 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f023 0303 	bic.w	r3, r3, #3
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd2:	e001      	b.n	8002bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x1e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0cc      	b.n	8002da4 <HAL_ADC_Start_DMA+0x1b8>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d018      	beq.n	8002c52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_ADC_Start_DMA+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_ADC_Start_DMA+0x1c4>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9a      	lsrs	r2, r3, #18
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 80a0 	bne.w	8002da2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f023 0206 	bic.w	r2, r3, #6
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
 8002cae:	e002      	b.n	8002cb6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_ADC_Start_DMA+0x1c8>)
 8002cc0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <HAL_ADC_Start_DMA+0x1cc>)
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_ADC_Start_DMA+0x1d0>)
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_ADC_Start_DMA+0x1d4>)
 8002cd8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cf2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	334c      	adds	r3, #76	; 0x4c
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f000 fec8 	bl	8003aa8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d12a      	bne.n	8002d7a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <HAL_ADC_Start_DMA+0x1d8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d015      	beq.n	8002d5a <HAL_ADC_Start_DMA+0x16e>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_ADC_Start_DMA+0x1dc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_Start_DMA+0x158>
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_ADC_Start_DMA+0x1c8>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <HAL_ADC_Start_DMA+0x1e0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d129      	bne.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_ADC_Start_DMA+0x1c8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d823      	bhi.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11c      	bne.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e013      	b.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_ADC_Start_DMA+0x1d8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10e      	bne.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002da0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	40012300 	.word	0x40012300
 8002db8:	08003241 	.word	0x08003241
 8002dbc:	080032fb 	.word	0x080032fb
 8002dc0:	08003317 	.word	0x08003317
 8002dc4:	40012000 	.word	0x40012000
 8002dc8:	40012100 	.word	0x40012100
 8002dcc:	40012200 	.word	0x40012200

08002dd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x1c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e113      	b.n	8003028 <HAL_ADC_ConfigChannel+0x244>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d925      	bls.n	8002e5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	3b1e      	subs	r3, #30
 8002e26:	2207      	movs	r2, #7
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	400a      	ands	r2, r1
 8002e34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68d9      	ldr	r1, [r3, #12]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4403      	add	r3, r0
 8002e4e:	3b1e      	subs	r3, #30
 8002e50:	409a      	lsls	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	e022      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	2207      	movs	r2, #7
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4403      	add	r3, r0
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d824      	bhi.n	8002ef4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b05      	subs	r3, #5
 8002ebc:	221f      	movs	r2, #31
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	400a      	ands	r2, r1
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b05      	subs	r3, #5
 8002ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef2:	e04c      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d824      	bhi.n	8002f46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b23      	subs	r3, #35	; 0x23
 8002f0e:	221f      	movs	r2, #31
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43da      	mvns	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	3b23      	subs	r3, #35	; 0x23
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
 8002f44:	e023      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3b41      	subs	r3, #65	; 0x41
 8002f58:	221f      	movs	r2, #31
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4618      	mov	r0, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b41      	subs	r3, #65	; 0x41
 8002f82:	fa00 f203 	lsl.w	r2, r0, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_ADC_ConfigChannel+0x250>)
 8002f90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_ADC_ConfigChannel+0x254>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10f      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x1d8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b12      	cmp	r3, #18
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_ADC_ConfigChannel+0x254>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12b      	bne.n	800301e <HAL_ADC_ConfigChannel+0x23a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_ADC_ConfigChannel+0x258>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x1f4>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b11      	cmp	r3, #17
 8002fd6:	d122      	bne.n	800301e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_ADC_ConfigChannel+0x258>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_ADC_ConfigChannel+0x25c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_ADC_ConfigChannel+0x260>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	0c9a      	lsrs	r2, r3, #18
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003010:	e002      	b.n	8003018 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3b01      	subs	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f9      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012300 	.word	0x40012300
 8003038:	40012000 	.word	0x40012000
 800303c:	10000012 	.word	0x10000012
 8003040:	20000000 	.word	0x20000000
 8003044:	431bde83 	.word	0x431bde83

08003048 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003050:	4b79      	ldr	r3, [pc, #484]	; (8003238 <ADC_Init+0x1f0>)
 8003052:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800307c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	021a      	lsls	r2, r3, #8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	4a58      	ldr	r2, [pc, #352]	; (800323c <ADC_Init+0x1f4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e00f      	b.n	8003146 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003144:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0202 	bic.w	r2, r2, #2
 8003154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7e1b      	ldrb	r3, [r3, #24]
 8003160:	005a      	lsls	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003182:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003192:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	3b01      	subs	r3, #1
 80031a0:	035a      	lsls	r2, r3, #13
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	e007      	b.n	80031bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	051a      	lsls	r2, r3, #20
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031fe:	025a      	lsls	r2, r3, #9
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	029a      	lsls	r2, r3, #10
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40012300 	.word	0x40012300
 800323c:	0f000001 	.word	0x0f000001

08003240 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13c      	bne.n	80032d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d12b      	bne.n	80032cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d127      	bne.n	80032cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003294:	2b00      	cmp	r3, #0
 8003296:	d119      	bne.n	80032cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0220 	bic.w	r2, r2, #32
 80032a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7fd f919 	bl	8000504 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d2:	e00e      	b.n	80032f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff fd75 	bl	8002dd0 <HAL_ADC_ErrorCallback>
}
 80032e6:	e004      	b.n	80032f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7fd faad 	bl	8000868 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f043 0204 	orr.w	r2, r3, #4
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff fd4a 	bl	8002dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff3e 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff8e 	bl	8003438 <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5d 	bl	80033e4 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff31 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e014      	b.n	80035a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	791b      	ldrb	r3, [r3, #4]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fe ffc5 	bl	8002518 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	795b      	ldrb	r3, [r3, #5]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_DAC_Start_DMA+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e08e      	b.n	80036e8 <HAL_DAC_Start_DMA+0x13c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2202      	movs	r2, #2
 80035d4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d12a      	bne.n	8003632 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a43      	ldr	r2, [pc, #268]	; (80036f0 <HAL_DAC_Start_DMA+0x144>)
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a42      	ldr	r2, [pc, #264]	; (80036f4 <HAL_DAC_Start_DMA+0x148>)
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <HAL_DAC_Start_DMA+0x14c>)
 80035f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003602:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d009      	beq.n	800361e <HAL_DAC_Start_DMA+0x72>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d00c      	beq.n	8003628 <HAL_DAC_Start_DMA+0x7c>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d000      	beq.n	8003614 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003612:	e039      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3308      	adds	r3, #8
 800361a:	617b      	str	r3, [r7, #20]
        break;
 800361c:	e034      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	617b      	str	r3, [r7, #20]
        break;
 8003626:	e02f      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3310      	adds	r3, #16
 800362e:	617b      	str	r3, [r7, #20]
        break;
 8003630:	e02a      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_DAC_Start_DMA+0x150>)
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_DAC_Start_DMA+0x154>)
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <HAL_DAC_Start_DMA+0x158>)
 8003648:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003658:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d009      	beq.n	8003674 <HAL_DAC_Start_DMA+0xc8>
 8003660:	2b08      	cmp	r3, #8
 8003662:	d00c      	beq.n	800367e <HAL_DAC_Start_DMA+0xd2>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d000      	beq.n	800366a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003668:	e00e      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e009      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3318      	adds	r3, #24
 800367a:	617b      	str	r3, [r7, #20]
        break;
 800367c:	e004      	b.n	8003688 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	331c      	adds	r3, #28
 8003684:	617b      	str	r3, [r7, #20]
        break;
 8003686:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6898      	ldr	r0, [r3, #8]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	f000 f9fe 	bl	8003aa8 <HAL_DMA_Start_IT>
 80036ac:	e00e      	b.n	80036cc <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80036bc:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68d8      	ldr	r0, [r3, #12]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	f000 f9ee 	bl	8003aa8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	08003839 	.word	0x08003839
 80036f4:	0800385b 	.word	0x0800385b
 80036f8:	08003877 	.word	0x08003877
 80036fc:	080038e1 	.word	0x080038e1
 8003700:	08003903 	.word	0x08003903
 8003704:	0800391f 	.word	0x0800391f

08003708 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	400a      	ands	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fa00 	bl	8003b58 <HAL_DMA_Abort>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e006      	b.n	800376c <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f9f8 	bl	8003b58 <HAL_DMA_Abort>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	711a      	strb	r2, [r3, #4]
 8003778:	e002      	b.n	8003780 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	795b      	ldrb	r3, [r3, #5]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_DAC_ConfigChannel+0x20>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e036      	b.n	800382c <HAL_DAC_ConfigChannel+0x8e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2202      	movs	r2, #2
 80037c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	22c0      	movs	r2, #192	; 0xc0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43da      	mvns	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7fd fd4c 	bl	80012e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	711a      	strb	r2, [r3, #4]
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7fd fd6b 	bl	8001344 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff ff7a 	bl	800378a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	711a      	strb	r2, [r3, #4]
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff ffd8 	bl	80038a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	711a      	strb	r2, [r3, #4]
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff ffd1 	bl	80038b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff ffc7 	bl	80038cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	711a      	strb	r2, [r3, #4]
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff f8d6 	bl	8002b08 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e099      	b.n	8003a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003988:	e00f      	b.n	80039aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398a:	f7ff f8bd 	bl	8002b08 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b05      	cmp	r3, #5
 8003996:	d908      	bls.n	80039aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e078      	b.n	8003a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e8      	bne.n	800398a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_DMA_Init+0x158>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d117      	bne.n	8003a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00e      	beq.n	8003a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fadf 	bl	8004014 <DMA_CheckFifoParam>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e016      	b.n	8003a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa96 	bl	8003fa8 <DMA_CalcBaseAndBitshift>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	223f      	movs	r2, #63	; 0x3f
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	f010803f 	.word	0xf010803f

08003aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_DMA_Start_IT+0x26>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e040      	b.n	8003b50 <HAL_DMA_Start_IT+0xa8>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d12f      	bne.n	8003b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa28 	bl	8003f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	223f      	movs	r2, #63	; 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0216 	orr.w	r2, r2, #22
 8003b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e005      	b.n	8003b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b66:	f7fe ffcf 	bl	8002b08 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d008      	beq.n	8003b8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e052      	b.n	8003c30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0216 	bic.w	r2, r2, #22
 8003b98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_DMA_Abort+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0208 	bic.w	r2, r2, #8
 8003bc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bda:	e013      	b.n	8003c04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bdc:	f7fe ff94 	bl	8002b08 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d90c      	bls.n	8003c04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e015      	b.n	8003c30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e4      	bne.n	8003bdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	223f      	movs	r2, #63	; 0x3f
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c44:	4b92      	ldr	r3, [pc, #584]	; (8003e90 <HAL_DMA_IRQHandler+0x258>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a92      	ldr	r2, [pc, #584]	; (8003e94 <HAL_DMA_IRQHandler+0x25c>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	2208      	movs	r2, #8
 8003c64:	409a      	lsls	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01a      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	2208      	movs	r2, #8
 8003c92:	409a      	lsls	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f043 0201 	orr.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	2204      	movs	r2, #4
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	2210      	movs	r2, #16
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d043      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d03c      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	2210      	movs	r2, #16
 8003d34:	409a      	lsls	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d024      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
 8003d66:	e01f      	b.n	8003da8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01b      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
 8003d78:	e016      	b.n	8003da8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0208 	bic.w	r2, r2, #8
 8003d96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2220      	movs	r2, #32
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 808e 	beq.w	8003ed6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8086 	beq.w	8003ed6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2220      	movs	r2, #32
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d136      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0216 	bic.w	r2, r2, #22
 8003df0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_DMA_IRQHandler+0x1da>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0208 	bic.w	r2, r2, #8
 8003e20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	223f      	movs	r2, #63	; 0x3f
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d07d      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
        }
        return;
 8003e4e:	e078      	b.n	8003f42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01c      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d030      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
 8003e7c:	e02b      	b.n	8003ed6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d027      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
 8003e8e:	e022      	b.n	8003ed6 <HAL_DMA_IRQHandler+0x29e>
 8003e90:	20000000 	.word	0x20000000
 8003e94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0210 	bic.w	r2, r2, #16
 8003eb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d032      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d022      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2205      	movs	r2, #5
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d307      	bcc.n	8003f1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f2      	bne.n	8003f02 <HAL_DMA_IRQHandler+0x2ca>
 8003f1c:	e000      	b.n	8003f20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e000      	b.n	8003f44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f42:	bf00      	nop
    }
  }
}
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop

08003f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d108      	bne.n	8003f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f8a:	e007      	b.n	8003f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3b10      	subs	r3, #16
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <DMA_CalcBaseAndBitshift+0x64>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <DMA_CalcBaseAndBitshift+0x68>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d909      	bls.n	8003fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	1d1a      	adds	r2, r3, #4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fe8:	e007      	b.n	8003ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	aaaaaaab 	.word	0xaaaaaaab
 8004010:	08009c50 	.word	0x08009c50

08004014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11f      	bne.n	800406e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d855      	bhi.n	80040e0 <DMA_CheckFifoParam+0xcc>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <DMA_CheckFifoParam+0x28>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800405f 	.word	0x0800405f
 8004044:	0800404d 	.word	0x0800404d
 8004048:	080040e1 	.word	0x080040e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d045      	beq.n	80040e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800405c:	e042      	b.n	80040e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004066:	d13f      	bne.n	80040e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406c:	e03c      	b.n	80040e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004076:	d121      	bne.n	80040bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d836      	bhi.n	80040ec <DMA_CheckFifoParam+0xd8>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <DMA_CheckFifoParam+0x70>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	08004095 	.word	0x08004095
 8004088:	0800409b 	.word	0x0800409b
 800408c:	08004095 	.word	0x08004095
 8004090:	080040ad 	.word	0x080040ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      break;
 8004098:	e02f      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d024      	beq.n	80040f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040aa:	e021      	b.n	80040f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b4:	d11e      	bne.n	80040f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ba:	e01b      	b.n	80040f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d902      	bls.n	80040c8 <DMA_CheckFifoParam+0xb4>
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d003      	beq.n	80040ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c6:	e018      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      break;
 80040cc:	e015      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
      break;
 80040de:	e00b      	b.n	80040f8 <DMA_CheckFifoParam+0xe4>
      break;
 80040e0:	bf00      	nop
 80040e2:	e00a      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;
 80040e4:	bf00      	nop
 80040e6:	e008      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;
 80040e8:	bf00      	nop
 80040ea:	e006      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;
 80040ec:	bf00      	nop
 80040ee:	e004      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;   
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
      break;
 80040f8:	bf00      	nop
    }
  } 
  
  return status; 
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e165      	b.n	80043f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 8154 	bne.w	80043ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d00b      	beq.n	8004162 <HAL_GPIO_Init+0x5a>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004156:	2b11      	cmp	r3, #17
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b12      	cmp	r3, #18
 8004160:	d130      	bne.n	80041c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0xfc>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b12      	cmp	r3, #18
 8004202:	d123      	bne.n	800424c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80ae 	beq.w	80043ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <HAL_GPIO_Init+0x2fc>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <HAL_GPIO_Init+0x2fc>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_GPIO_Init+0x2fc>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042aa:	4a57      	ldr	r2, [pc, #348]	; (8004408 <HAL_GPIO_Init+0x300>)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4e      	ldr	r2, [pc, #312]	; (800440c <HAL_GPIO_Init+0x304>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d025      	beq.n	8004322 <HAL_GPIO_Init+0x21a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4d      	ldr	r2, [pc, #308]	; (8004410 <HAL_GPIO_Init+0x308>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01f      	beq.n	800431e <HAL_GPIO_Init+0x216>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4c      	ldr	r2, [pc, #304]	; (8004414 <HAL_GPIO_Init+0x30c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d019      	beq.n	800431a <HAL_GPIO_Init+0x212>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4b      	ldr	r2, [pc, #300]	; (8004418 <HAL_GPIO_Init+0x310>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x20e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4a      	ldr	r2, [pc, #296]	; (800441c <HAL_GPIO_Init+0x314>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00d      	beq.n	8004312 <HAL_GPIO_Init+0x20a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a49      	ldr	r2, [pc, #292]	; (8004420 <HAL_GPIO_Init+0x318>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <HAL_GPIO_Init+0x206>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a48      	ldr	r2, [pc, #288]	; (8004424 <HAL_GPIO_Init+0x31c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_GPIO_Init+0x202>
 8004306:	2306      	movs	r3, #6
 8004308:	e00c      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800430a:	2307      	movs	r3, #7
 800430c:	e00a      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800430e:	2305      	movs	r3, #5
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004312:	2304      	movs	r3, #4
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004322:	2300      	movs	r3, #0
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004334:	4934      	ldr	r1, [pc, #208]	; (8004408 <HAL_GPIO_Init+0x300>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_GPIO_Init+0x320>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_GPIO_Init+0x320>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800436c:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_GPIO_Init+0x320>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <HAL_GPIO_Init+0x320>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_GPIO_Init+0x320>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_GPIO_Init+0x320>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_GPIO_Init+0x320>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e4:	4a10      	ldr	r2, [pc, #64]	; (8004428 <HAL_GPIO_Init+0x320>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	f67f ae96 	bls.w	8004124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	3724      	adds	r7, #36	; 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40023800 	.word	0x40023800
 8004408:	40013800 	.word	0x40013800
 800440c:	40020000 	.word	0x40020000
 8004410:	40020400 	.word	0x40020400
 8004414:	40020800 	.word	0x40020800
 8004418:	40020c00 	.word	0x40020c00
 800441c:	40021000 	.word	0x40021000
 8004420:	40021400 	.word	0x40021400
 8004424:	40021800 	.word	0x40021800
 8004428:	40013c00 	.word	0x40013c00

0800442c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e001      	b.n	800444e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800446c:	787b      	ldrb	r3, [r7, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004478:	e003      	b.n	8004482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	401a      	ands	r2, r3
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d104      	bne.n	80044b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	041a      	lsls	r2, r3, #16
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80044b0:	e002      	b.n	80044b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044da:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fec4 	bl	8001270 <HAL_GPIO_EXTI_Callback>
  }
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0cc      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b68      	ldr	r3, [pc, #416]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d90c      	bls.n	8004530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0b8      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a58      	ldr	r2, [pc, #352]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800456a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	494d      	ldr	r1, [pc, #308]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d044      	beq.n	8004614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d119      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e067      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4934      	ldr	r1, [pc, #208]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e4:	f7fe fa90 	bl	8002b08 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fe fa8c 	bl	8002b08 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d20c      	bcs.n	800463c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e032      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4916      	ldr	r1, [pc, #88]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	490e      	ldr	r1, [pc, #56]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800467a:	f000 f855 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 800467e:	4601      	mov	r1, r0
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	fa21 f303 	lsr.w	r3, r1, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f9f0 	bl	8002a80 <HAL_InitTick>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023c00 	.word	0x40023c00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08009c38 	.word	0x08009c38
 80046b8:	20000000 	.word	0x20000000
 80046bc:	20000070 	.word	0x20000070

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046dc:	f7ff fff0 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4601      	mov	r1, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4a03      	ldr	r2, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08009c48 	.word	0x08009c48

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004704:	f7ff ffdc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004708:	4601      	mov	r1, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0b5b      	lsrs	r3, r3, #13
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	08009c48 	.word	0x08009c48

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004742:	4bc6      	ldr	r3, [pc, #792]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b0c      	cmp	r3, #12
 800474c:	f200 817e 	bhi.w	8004a4c <HAL_RCC_GetSysClockFreq+0x324>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <HAL_RCC_GetSysClockFreq+0x30>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800478d 	.word	0x0800478d
 800475c:	08004a4d 	.word	0x08004a4d
 8004760:	08004a4d 	.word	0x08004a4d
 8004764:	08004a4d 	.word	0x08004a4d
 8004768:	08004793 	.word	0x08004793
 800476c:	08004a4d 	.word	0x08004a4d
 8004770:	08004a4d 	.word	0x08004a4d
 8004774:	08004a4d 	.word	0x08004a4d
 8004778:	08004799 	.word	0x08004799
 800477c:	08004a4d 	.word	0x08004a4d
 8004780:	08004a4d 	.word	0x08004a4d
 8004784:	08004a4d 	.word	0x08004a4d
 8004788:	080048f5 	.word	0x080048f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4bb4      	ldr	r3, [pc, #720]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x338>)
 800478e:	613b      	str	r3, [r7, #16]
       break;
 8004790:	e15f      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4bb4      	ldr	r3, [pc, #720]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004794:	613b      	str	r3, [r7, #16]
      break;
 8004796:	e15c      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004798:	4bb0      	ldr	r3, [pc, #704]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a2:	4bae      	ldr	r3, [pc, #696]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04a      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4bab      	ldr	r3, [pc, #684]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	f04f 0400 	mov.w	r4, #0
 80047b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	ea03 0501 	and.w	r5, r3, r1
 80047c4:	ea04 0602 	and.w	r6, r4, r2
 80047c8:	4629      	mov	r1, r5
 80047ca:	4632      	mov	r2, r6
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	f04f 0400 	mov.w	r4, #0
 80047d4:	0154      	lsls	r4, r2, #5
 80047d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047da:	014b      	lsls	r3, r1, #5
 80047dc:	4619      	mov	r1, r3
 80047de:	4622      	mov	r2, r4
 80047e0:	1b49      	subs	r1, r1, r5
 80047e2:	eb62 0206 	sbc.w	r2, r2, r6
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	f04f 0400 	mov.w	r4, #0
 80047ee:	0194      	lsls	r4, r2, #6
 80047f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047f4:	018b      	lsls	r3, r1, #6
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	eb64 0402 	sbc.w	r4, r4, r2
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	00e2      	lsls	r2, r4, #3
 8004806:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800480a:	00d9      	lsls	r1, r3, #3
 800480c:	460b      	mov	r3, r1
 800480e:	4614      	mov	r4, r2
 8004810:	195b      	adds	r3, r3, r5
 8004812:	eb44 0406 	adc.w	r4, r4, r6
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	0262      	lsls	r2, r4, #9
 8004820:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004824:	0259      	lsls	r1, r3, #9
 8004826:	460b      	mov	r3, r1
 8004828:	4614      	mov	r4, r2
 800482a:	4618      	mov	r0, r3
 800482c:	4621      	mov	r1, r4
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f04f 0400 	mov.w	r4, #0
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	f7fb fce4 	bl	8000204 <__aeabi_uldivmod>
 800483c:	4603      	mov	r3, r0
 800483e:	460c      	mov	r4, r1
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e049      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004844:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	f04f 0400 	mov.w	r4, #0
 800484e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	ea03 0501 	and.w	r5, r3, r1
 800485a:	ea04 0602 	and.w	r6, r4, r2
 800485e:	4629      	mov	r1, r5
 8004860:	4632      	mov	r2, r6
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	f04f 0400 	mov.w	r4, #0
 800486a:	0154      	lsls	r4, r2, #5
 800486c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004870:	014b      	lsls	r3, r1, #5
 8004872:	4619      	mov	r1, r3
 8004874:	4622      	mov	r2, r4
 8004876:	1b49      	subs	r1, r1, r5
 8004878:	eb62 0206 	sbc.w	r2, r2, r6
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	f04f 0400 	mov.w	r4, #0
 8004884:	0194      	lsls	r4, r2, #6
 8004886:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800488a:	018b      	lsls	r3, r1, #6
 800488c:	1a5b      	subs	r3, r3, r1
 800488e:	eb64 0402 	sbc.w	r4, r4, r2
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	00e2      	lsls	r2, r4, #3
 800489c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048a0:	00d9      	lsls	r1, r3, #3
 80048a2:	460b      	mov	r3, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	195b      	adds	r3, r3, r5
 80048a8:	eb44 0406 	adc.w	r4, r4, r6
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	02a2      	lsls	r2, r4, #10
 80048b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048ba:	0299      	lsls	r1, r3, #10
 80048bc:	460b      	mov	r3, r1
 80048be:	4614      	mov	r4, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	4621      	mov	r1, r4
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	461a      	mov	r2, r3
 80048cc:	4623      	mov	r3, r4
 80048ce:	f7fb fc99 	bl	8000204 <__aeabi_uldivmod>
 80048d2:	4603      	mov	r3, r0
 80048d4:	460c      	mov	r4, r1
 80048d6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d8:	4b60      	ldr	r3, [pc, #384]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	3301      	adds	r3, #1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	613b      	str	r3, [r7, #16]
      break;
 80048f2:	e0ae      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048fe:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d04a      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490a:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	f04f 0400 	mov.w	r4, #0
 8004914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	ea03 0501 	and.w	r5, r3, r1
 8004920:	ea04 0602 	and.w	r6, r4, r2
 8004924:	4629      	mov	r1, r5
 8004926:	4632      	mov	r2, r6
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	f04f 0400 	mov.w	r4, #0
 8004930:	0154      	lsls	r4, r2, #5
 8004932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004936:	014b      	lsls	r3, r1, #5
 8004938:	4619      	mov	r1, r3
 800493a:	4622      	mov	r2, r4
 800493c:	1b49      	subs	r1, r1, r5
 800493e:	eb62 0206 	sbc.w	r2, r2, r6
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f04f 0400 	mov.w	r4, #0
 800494a:	0194      	lsls	r4, r2, #6
 800494c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004950:	018b      	lsls	r3, r1, #6
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	eb64 0402 	sbc.w	r4, r4, r2
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	00e2      	lsls	r2, r4, #3
 8004962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004966:	00d9      	lsls	r1, r3, #3
 8004968:	460b      	mov	r3, r1
 800496a:	4614      	mov	r4, r2
 800496c:	195b      	adds	r3, r3, r5
 800496e:	eb44 0406 	adc.w	r4, r4, r6
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	0262      	lsls	r2, r4, #9
 800497c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004980:	0259      	lsls	r1, r3, #9
 8004982:	460b      	mov	r3, r1
 8004984:	4614      	mov	r4, r2
 8004986:	4618      	mov	r0, r3
 8004988:	4621      	mov	r1, r4
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f04f 0400 	mov.w	r4, #0
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	f7fb fc36 	bl	8000204 <__aeabi_uldivmod>
 8004998:	4603      	mov	r3, r0
 800499a:	460c      	mov	r4, r1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e049      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a0:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	ea03 0501 	and.w	r5, r3, r1
 80049b6:	ea04 0602 	and.w	r6, r4, r2
 80049ba:	4629      	mov	r1, r5
 80049bc:	4632      	mov	r2, r6
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	f04f 0400 	mov.w	r4, #0
 80049c6:	0154      	lsls	r4, r2, #5
 80049c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049cc:	014b      	lsls	r3, r1, #5
 80049ce:	4619      	mov	r1, r3
 80049d0:	4622      	mov	r2, r4
 80049d2:	1b49      	subs	r1, r1, r5
 80049d4:	eb62 0206 	sbc.w	r2, r2, r6
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	0194      	lsls	r4, r2, #6
 80049e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049e6:	018b      	lsls	r3, r1, #6
 80049e8:	1a5b      	subs	r3, r3, r1
 80049ea:	eb64 0402 	sbc.w	r4, r4, r2
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	00e2      	lsls	r2, r4, #3
 80049f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049fc:	00d9      	lsls	r1, r3, #3
 80049fe:	460b      	mov	r3, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	195b      	adds	r3, r3, r5
 8004a04:	eb44 0406 	adc.w	r4, r4, r6
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	02a2      	lsls	r2, r4, #10
 8004a12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a16:	0299      	lsls	r1, r3, #10
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	4621      	mov	r1, r4
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	f7fb fbeb 	bl	8000204 <__aeabi_uldivmod>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0f1b      	lsrs	r3, r3, #28
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	613b      	str	r3, [r7, #16]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x338>)
 8004a4e:	613b      	str	r3, [r7, #16]
      break;
 8004a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a52:	693b      	ldr	r3, [r7, #16]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8083 	beq.w	8004b88 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a82:	4b95      	ldr	r3, [pc, #596]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a8e:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a9a:	4b8f      	ldr	r3, [pc, #572]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa8:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d112      	bne.n	8004ada <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab4:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac2:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d05b      	beq.n	8004b86 <HAL_RCC_OscConfig+0x11e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d157      	bne.n	8004b86 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e216      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x8a>
 8004ae4:	4b7c      	ldr	r3, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7b      	ldr	r2, [pc, #492]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e01d      	b.n	8004b2e <HAL_RCC_OscConfig+0xc6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0xae>
 8004afc:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a75      	ldr	r2, [pc, #468]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a72      	ldr	r2, [pc, #456]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e00b      	b.n	8004b2e <HAL_RCC_OscConfig+0xc6>
 8004b16:	4b70      	ldr	r3, [pc, #448]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6f      	ldr	r2, [pc, #444]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b6d      	ldr	r3, [pc, #436]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6c      	ldr	r2, [pc, #432]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fd ffe7 	bl	8002b08 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3e:	f7fd ffe3 	bl	8002b08 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b64      	cmp	r3, #100	; 0x64
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e1db      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b50:	4b61      	ldr	r3, [pc, #388]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0xd6>
 8004b5c:	e014      	b.n	8004b88 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd ffd3 	bl	8002b08 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b66:	f7fd ffcf 	bl	8002b08 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1c7      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b78:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0xfe>
 8004b84:	e000      	b.n	8004b88 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d06f      	beq.n	8004c74 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b94:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bac:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d11c      	bne.n	8004bfe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc4:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d116      	bne.n	8004bfe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd0:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_OscConfig+0x180>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e18f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4938      	ldr	r1, [pc, #224]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfc:	e03a      	b.n	8004c74 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d020      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c06:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd ff7c 	bl	8002b08 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd ff78 	bl	8002b08 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e170      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4925      	ldr	r1, [pc, #148]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
 8004c46:	e015      	b.n	8004c74 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd ff5b 	bl	8002b08 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fd ff57 	bl	8002b08 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e14f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c68:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d037      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <HAL_RCC_OscConfig+0x278>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd ff3b 	bl	8002b08 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd ff37 	bl	8002b08 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e12f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_OscConfig+0x270>)
 8004caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x22e>
 8004cb4:	e01c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_OscConfig+0x278>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd ff24 	bl	8002b08 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fd ff20 	bl	8002b08 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d908      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e118      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	42470000 	.word	0x42470000
 8004ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce4:	4b8a      	ldr	r3, [pc, #552]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e9      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8097 	beq.w	8004e2c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d02:	4b83      	ldr	r3, [pc, #524]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	4b7f      	ldr	r3, [pc, #508]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4a7e      	ldr	r2, [pc, #504]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	4b79      	ldr	r3, [pc, #484]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d118      	bne.n	8004d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3a:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7fd fedf 	bl	8002b08 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fd fedb 	bl	8002b08 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0d3      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x31a>
 8004d74:	4b66      	ldr	r3, [pc, #408]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4a65      	ldr	r2, [pc, #404]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	e01c      	b.n	8004dbc <HAL_RCC_OscConfig+0x354>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x33c>
 8004d8a:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a60      	ldr	r2, [pc, #384]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	4b5e      	ldr	r3, [pc, #376]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a5d      	ldr	r2, [pc, #372]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0x354>
 8004da4:	4b5a      	ldr	r3, [pc, #360]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a59      	ldr	r2, [pc, #356]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
 8004db0:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	4a56      	ldr	r2, [pc, #344]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004db6:	f023 0304 	bic.w	r3, r3, #4
 8004dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fd fea0 	bl	8002b08 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fd fe9c 	bl	8002b08 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e092      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	4b4b      	ldr	r3, [pc, #300]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ee      	beq.n	8004dcc <HAL_RCC_OscConfig+0x364>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fd fe8a 	bl	8002b08 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fd fe86 	bl	8002b08 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e07c      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ee      	bne.n	8004df8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d068      	beq.n	8004f06 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d060      	beq.n	8004f02 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d145      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e48:	4b33      	ldr	r3, [pc, #204]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fe5b 	bl	8002b08 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd fe57 	bl	8002b08 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e04f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	019b      	lsls	r3, r3, #6
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	071b      	lsls	r3, r3, #28
 8004ea0:	491b      	ldr	r1, [pc, #108]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fd fe2c 	bl	8002b08 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fe28 	bl	8002b08 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e020      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x44c>
 8004ed2:	e018      	b.n	8004f06 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed4:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fd fe15 	bl	8002b08 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fd fe11 	bl	8002b08 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e009      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_RCC_OscConfig+0x4a8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x47a>
 8004f00:	e001      	b.n	8004f06 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40007000 	.word	0x40007000
 8004f18:	42470060 	.word	0x42470060

08004f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e056      	b.n	8004fdc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fd fb5d 	bl	8002608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	ea42 0103 	orr.w	r1, r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	f003 0104 	and.w	r1, r3, #4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Transmit+0x22>
 8005002:	2302      	movs	r3, #2
 8005004:	e11e      	b.n	8005244 <HAL_SPI_Transmit+0x260>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800500e:	f7fd fd7b 	bl	8002b08 <HAL_GetTick>
 8005012:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d002      	beq.n	800502a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005028:	e103      	b.n	8005232 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_Transmit+0x52>
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	77fb      	strb	r3, [r7, #31]
    goto error;
 800503a:	e0fa      	b.n	8005232 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2203      	movs	r2, #3
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d107      	bne.n	8005094 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d007      	beq.n	80050b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d14b      	bne.n	8005154 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_Transmit+0xe6>
 80050c4:	8afb      	ldrh	r3, [r7, #22]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d13e      	bne.n	8005148 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ee:	e02b      	b.n	8005148 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d112      	bne.n	8005124 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	881a      	ldrh	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	86da      	strh	r2, [r3, #54]	; 0x36
 8005122:	e011      	b.n	8005148 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005124:	f7fd fcf0 	bl	8002b08 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d803      	bhi.n	800513c <HAL_SPI_Transmit+0x158>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d102      	bne.n	8005142 <HAL_SPI_Transmit+0x15e>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005146:	e074      	b.n	8005232 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1ce      	bne.n	80050f0 <HAL_SPI_Transmit+0x10c>
 8005152:	e04c      	b.n	80051ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_SPI_Transmit+0x17e>
 800515c:	8afb      	ldrh	r3, [r7, #22]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d140      	bne.n	80051e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005188:	e02c      	b.n	80051e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d113      	bne.n	80051c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80051be:	e011      	b.n	80051e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c0:	f7fd fca2 	bl	8002b08 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d803      	bhi.n	80051d8 <HAL_SPI_Transmit+0x1f4>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d102      	bne.n	80051de <HAL_SPI_Transmit+0x1fa>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051e2:	e026      	b.n	8005232 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1cd      	bne.n	800518a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa36 	bl	8005664 <SPI_EndRxTxTransaction>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e000      	b.n	8005232 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005230:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005242:	7ffb      	ldrb	r3, [r7, #31]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	; 0x30
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800525a:	2301      	movs	r3, #1
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x26>
 800526e:	2302      	movs	r3, #2
 8005270:	e18a      	b.n	8005588 <HAL_SPI_TransmitReceive+0x33c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527a:	f7fd fc45 	bl	8002b08 <HAL_GetTick>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00f      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x70>
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d107      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x68>
 80052ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d003      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052ba:	e15b      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x82>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x82>
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052d4:	e14e      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d003      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2205      	movs	r2, #5
 80052e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	887a      	ldrh	r2, [r7, #2]
 80052fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	887a      	ldrh	r2, [r7, #2]
 8005312:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d007      	beq.n	800533e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005346:	d178      	bne.n	800543a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x10a>
 8005350:	8b7b      	ldrh	r3, [r7, #26]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d166      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537a:	e053      	b.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d11b      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d113      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	881a      	ldrh	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d119      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x1b8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	b292      	uxth	r2, r2
 80053e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005404:	f7fd fb80 	bl	8002b08 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005410:	429a      	cmp	r2, r3
 8005412:	d807      	bhi.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d003      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005422:	e0a7      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1a6      	bne.n	800537c <HAL_SPI_TransmitReceive+0x130>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1a1      	bne.n	800537c <HAL_SPI_TransmitReceive+0x130>
 8005438:	e07c      	b.n	8005534 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x1fc>
 8005442:	8b7b      	ldrh	r3, [r7, #26]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d16b      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546e:	e057      	b.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d11c      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d017      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d114      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d119      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x2ae>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d014      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054fa:	f7fd fb05 	bl	8002b08 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005506:	429a      	cmp	r2, r3
 8005508:	d803      	bhi.n	8005512 <HAL_SPI_TransmitReceive+0x2c6>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <HAL_SPI_TransmitReceive+0x2cc>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800551e:	e029      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1a2      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x224>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d19d      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f893 	bl	8005664 <SPI_EndRxTxTransaction>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005550:	e010      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	e000      	b.n	8005574 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005588:	4618      	mov	r0, r3
 800558a:	3730      	adds	r7, #48	; 0x30
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a0:	e04c      	b.n	800563c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d048      	beq.n	800563c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80055aa:	f7fd faad 	bl	8002b08 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d902      	bls.n	80055c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d13d      	bne.n	800563c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d8:	d111      	bne.n	80055fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d004      	beq.n	80055ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ec:	d107      	bne.n	80055fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d10f      	bne.n	8005628 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e00f      	b.n	800565c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	d1a3      	bne.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <SPI_EndRxTxTransaction+0x7c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <SPI_EndRxTxTransaction+0x80>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	0d5b      	lsrs	r3, r3, #21
 800567c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800568e:	d112      	bne.n	80056b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff ff78 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d016      	beq.n	80056d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f043 0220 	orr.w	r2, r3, #32
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e00f      	b.n	80056d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3b01      	subs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d0f2      	beq.n	80056b6 <SPI_EndRxTxTransaction+0x52>
 80056d0:	e000      	b.n	80056d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80056d2:	bf00      	nop
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000000 	.word	0x20000000
 80056e4:	165e9f81 	.word	0x165e9f81

080056e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e01d      	b.n	8005736 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fc fff2 	bl	80026f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 fa4a 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d007      	beq.n	8005778 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <HAL_TIM_Base_Stop_IT+0x48>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	f240 4344 	movw	r3, #1092	; 0x444
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_TIM_Base_Stop_IT+0x48>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0202 	mvn.w	r2, #2
 8005808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9af 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9a1 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f9b2 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f985 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f977 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f988 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0208 	mvn.w	r2, #8
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f95b 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f94d 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f95e 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0210 	mvn.w	r2, #16
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2208      	movs	r2, #8
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f931 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f923 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f934 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0201 	mvn.w	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8fd 	bl	8005b5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d10e      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d107      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fada 	bl	8005f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d10e      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d107      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8f9 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d10e      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d107      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0220 	mvn.w	r2, #32
 80059dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 faa4 	bl	8005f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_ConfigClockSource+0x18>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0a6      	b.n	8005b52 <HAL_TIM_ConfigClockSource+0x166>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d067      	beq.n	8005b0c <HAL_TIM_ConfigClockSource+0x120>
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d80b      	bhi.n	8005a58 <HAL_TIM_ConfigClockSource+0x6c>
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d073      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0x140>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d802      	bhi.n	8005a4e <HAL_TIM_ConfigClockSource+0x62>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d06f      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a4c:	e078      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d06c      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0x140>
 8005a52:	2b30      	cmp	r3, #48	; 0x30
 8005a54:	d06a      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a56:	e073      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d00d      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0x8c>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d804      	bhi.n	8005a6a <HAL_TIM_ConfigClockSource+0x7e>
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d033      	beq.n	8005acc <HAL_TIM_ConfigClockSource+0xe0>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d041      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a68:	e06a      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	d066      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x152>
 8005a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a74:	d017      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a76:	e063      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f000 f9b4 	bl	8005df4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]
      break;
 8005aa4:	e04c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6899      	ldr	r1, [r3, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f000 f99d 	bl	8005df4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac8:	609a      	str	r2, [r3, #8]
      break;
 8005aca:	e039      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f000 f911 	bl	8005d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2150      	movs	r1, #80	; 0x50
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f96a 	bl	8005dbe <TIM_ITRx_SetConfig>
      break;
 8005aea:	e029      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6859      	ldr	r1, [r3, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f000 f930 	bl	8005d5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2160      	movs	r1, #96	; 0x60
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 f95a 	bl	8005dbe <TIM_ITRx_SetConfig>
      break;
 8005b0a:	e019      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f000 f8f1 	bl	8005d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2140      	movs	r1, #64	; 0x40
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f94a 	bl	8005dbe <TIM_ITRx_SetConfig>
      break;
 8005b2a:	e009      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f000 f941 	bl	8005dbe <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e000      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d027      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d023      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800
 8005cf4:	40001800 	.word	0x40001800
 8005cf8:	40001c00 	.word	0x40001c00
 8005cfc:	40002000 	.word	0x40002000

08005d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0201 	bic.w	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 030a 	bic.w	r3, r3, #10
 8005d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b087      	sub	sp, #28
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0210 	bic.w	r2, r3, #16
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	031b      	lsls	r3, r3, #12
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f043 0307 	orr.w	r3, r3, #7
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	609a      	str	r2, [r3, #8]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	021a      	lsls	r2, r3, #8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e05a      	b.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d01d      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40010400 	.word	0x40010400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40001800 	.word	0x40001800

08005f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e03f      	b.n	8005fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc fbfa 	bl	8002774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	; 0x24
 8005f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f90b 	bl	80061b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b088      	sub	sp, #32
 8005ff2:	af02      	add	r7, sp, #8
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b20      	cmp	r3, #32
 800600c:	f040 8083 	bne.w	8006116 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_UART_Transmit+0x2e>
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e07b      	b.n	8006118 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_UART_Transmit+0x40>
 800602a:	2302      	movs	r3, #2
 800602c:	e074      	b.n	8006118 <HAL_UART_Transmit+0x12a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2221      	movs	r2, #33	; 0x21
 8006040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006044:	f7fc fd60 	bl	8002b08 <HAL_GetTick>
 8006048:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800605e:	e042      	b.n	80060e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006076:	d122      	bne.n	80060be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f84c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e042      	b.n	8006118 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3302      	adds	r3, #2
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	e017      	b.n	80060e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	e013      	b.n	80060e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f829 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e01f      	b.n	8006118 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	60ba      	str	r2, [r7, #8]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1b7      	bne.n	8006060 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	2140      	movs	r1, #64	; 0x40
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f810 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e000      	b.n	8006118 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e02c      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d028      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 8006140:	f7fc fce2 	bl	8002b08 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	429a      	cmp	r2, r3
 800614e:	d21d      	bcs.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800615e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e00f      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d0c3      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80061f6:	f023 030c 	bic.w	r3, r3, #12
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	430b      	orrs	r3, r1
 8006202:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006222:	f040 818b 	bne.w	800653c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4ac1      	ldr	r2, [pc, #772]	; (8006530 <UART_SetConfig+0x37c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d005      	beq.n	800623c <UART_SetConfig+0x88>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4abf      	ldr	r2, [pc, #764]	; (8006534 <UART_SetConfig+0x380>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f040 80bd 	bne.w	80063b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fe fa60 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8006240:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	461d      	mov	r5, r3
 8006246:	f04f 0600 	mov.w	r6, #0
 800624a:	46a8      	mov	r8, r5
 800624c:	46b1      	mov	r9, r6
 800624e:	eb18 0308 	adds.w	r3, r8, r8
 8006252:	eb49 0409 	adc.w	r4, r9, r9
 8006256:	4698      	mov	r8, r3
 8006258:	46a1      	mov	r9, r4
 800625a:	eb18 0805 	adds.w	r8, r8, r5
 800625e:	eb49 0906 	adc.w	r9, r9, r6
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800626e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006272:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006276:	4688      	mov	r8, r1
 8006278:	4691      	mov	r9, r2
 800627a:	eb18 0005 	adds.w	r0, r8, r5
 800627e:	eb49 0106 	adc.w	r1, r9, r6
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	461d      	mov	r5, r3
 8006288:	f04f 0600 	mov.w	r6, #0
 800628c:	196b      	adds	r3, r5, r5
 800628e:	eb46 0406 	adc.w	r4, r6, r6
 8006292:	461a      	mov	r2, r3
 8006294:	4623      	mov	r3, r4
 8006296:	f7f9 ffb5 	bl	8000204 <__aeabi_uldivmod>
 800629a:	4603      	mov	r3, r0
 800629c:	460c      	mov	r4, r1
 800629e:	461a      	mov	r2, r3
 80062a0:	4ba5      	ldr	r3, [pc, #660]	; (8006538 <UART_SetConfig+0x384>)
 80062a2:	fba3 2302 	umull	r2, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	461d      	mov	r5, r3
 80062b0:	f04f 0600 	mov.w	r6, #0
 80062b4:	46a9      	mov	r9, r5
 80062b6:	46b2      	mov	sl, r6
 80062b8:	eb19 0309 	adds.w	r3, r9, r9
 80062bc:	eb4a 040a 	adc.w	r4, sl, sl
 80062c0:	4699      	mov	r9, r3
 80062c2:	46a2      	mov	sl, r4
 80062c4:	eb19 0905 	adds.w	r9, r9, r5
 80062c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80062cc:	f04f 0100 	mov.w	r1, #0
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062e0:	4689      	mov	r9, r1
 80062e2:	4692      	mov	sl, r2
 80062e4:	eb19 0005 	adds.w	r0, r9, r5
 80062e8:	eb4a 0106 	adc.w	r1, sl, r6
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	461d      	mov	r5, r3
 80062f2:	f04f 0600 	mov.w	r6, #0
 80062f6:	196b      	adds	r3, r5, r5
 80062f8:	eb46 0406 	adc.w	r4, r6, r6
 80062fc:	461a      	mov	r2, r3
 80062fe:	4623      	mov	r3, r4
 8006300:	f7f9 ff80 	bl	8000204 <__aeabi_uldivmod>
 8006304:	4603      	mov	r3, r0
 8006306:	460c      	mov	r4, r1
 8006308:	461a      	mov	r2, r3
 800630a:	4b8b      	ldr	r3, [pc, #556]	; (8006538 <UART_SetConfig+0x384>)
 800630c:	fba3 1302 	umull	r1, r3, r3, r2
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	2164      	movs	r1, #100	; 0x64
 8006314:	fb01 f303 	mul.w	r3, r1, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	3332      	adds	r3, #50	; 0x32
 800631e:	4a86      	ldr	r2, [pc, #536]	; (8006538 <UART_SetConfig+0x384>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800632c:	4498      	add	r8, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	461d      	mov	r5, r3
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	46a9      	mov	r9, r5
 8006338:	46b2      	mov	sl, r6
 800633a:	eb19 0309 	adds.w	r3, r9, r9
 800633e:	eb4a 040a 	adc.w	r4, sl, sl
 8006342:	4699      	mov	r9, r3
 8006344:	46a2      	mov	sl, r4
 8006346:	eb19 0905 	adds.w	r9, r9, r5
 800634a:	eb4a 0a06 	adc.w	sl, sl, r6
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800635a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800635e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006362:	4689      	mov	r9, r1
 8006364:	4692      	mov	sl, r2
 8006366:	eb19 0005 	adds.w	r0, r9, r5
 800636a:	eb4a 0106 	adc.w	r1, sl, r6
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	461d      	mov	r5, r3
 8006374:	f04f 0600 	mov.w	r6, #0
 8006378:	196b      	adds	r3, r5, r5
 800637a:	eb46 0406 	adc.w	r4, r6, r6
 800637e:	461a      	mov	r2, r3
 8006380:	4623      	mov	r3, r4
 8006382:	f7f9 ff3f 	bl	8000204 <__aeabi_uldivmod>
 8006386:	4603      	mov	r3, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461a      	mov	r2, r3
 800638c:	4b6a      	ldr	r3, [pc, #424]	; (8006538 <UART_SetConfig+0x384>)
 800638e:	fba3 1302 	umull	r1, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2164      	movs	r1, #100	; 0x64
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	3332      	adds	r3, #50	; 0x32
 80063a0:	4a65      	ldr	r2, [pc, #404]	; (8006538 <UART_SetConfig+0x384>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f003 0207 	and.w	r2, r3, #7
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4442      	add	r2, r8
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	e26f      	b.n	8006896 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fe f98f 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80063ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	461d      	mov	r5, r3
 80063c0:	f04f 0600 	mov.w	r6, #0
 80063c4:	46a8      	mov	r8, r5
 80063c6:	46b1      	mov	r9, r6
 80063c8:	eb18 0308 	adds.w	r3, r8, r8
 80063cc:	eb49 0409 	adc.w	r4, r9, r9
 80063d0:	4698      	mov	r8, r3
 80063d2:	46a1      	mov	r9, r4
 80063d4:	eb18 0805 	adds.w	r8, r8, r5
 80063d8:	eb49 0906 	adc.w	r9, r9, r6
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063f0:	4688      	mov	r8, r1
 80063f2:	4691      	mov	r9, r2
 80063f4:	eb18 0005 	adds.w	r0, r8, r5
 80063f8:	eb49 0106 	adc.w	r1, r9, r6
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	461d      	mov	r5, r3
 8006402:	f04f 0600 	mov.w	r6, #0
 8006406:	196b      	adds	r3, r5, r5
 8006408:	eb46 0406 	adc.w	r4, r6, r6
 800640c:	461a      	mov	r2, r3
 800640e:	4623      	mov	r3, r4
 8006410:	f7f9 fef8 	bl	8000204 <__aeabi_uldivmod>
 8006414:	4603      	mov	r3, r0
 8006416:	460c      	mov	r4, r1
 8006418:	461a      	mov	r2, r3
 800641a:	4b47      	ldr	r3, [pc, #284]	; (8006538 <UART_SetConfig+0x384>)
 800641c:	fba3 2302 	umull	r2, r3, r3, r2
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	461d      	mov	r5, r3
 800642a:	f04f 0600 	mov.w	r6, #0
 800642e:	46a9      	mov	r9, r5
 8006430:	46b2      	mov	sl, r6
 8006432:	eb19 0309 	adds.w	r3, r9, r9
 8006436:	eb4a 040a 	adc.w	r4, sl, sl
 800643a:	4699      	mov	r9, r3
 800643c:	46a2      	mov	sl, r4
 800643e:	eb19 0905 	adds.w	r9, r9, r5
 8006442:	eb4a 0a06 	adc.w	sl, sl, r6
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800645a:	4689      	mov	r9, r1
 800645c:	4692      	mov	sl, r2
 800645e:	eb19 0005 	adds.w	r0, r9, r5
 8006462:	eb4a 0106 	adc.w	r1, sl, r6
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	461d      	mov	r5, r3
 800646c:	f04f 0600 	mov.w	r6, #0
 8006470:	196b      	adds	r3, r5, r5
 8006472:	eb46 0406 	adc.w	r4, r6, r6
 8006476:	461a      	mov	r2, r3
 8006478:	4623      	mov	r3, r4
 800647a:	f7f9 fec3 	bl	8000204 <__aeabi_uldivmod>
 800647e:	4603      	mov	r3, r0
 8006480:	460c      	mov	r4, r1
 8006482:	461a      	mov	r2, r3
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <UART_SetConfig+0x384>)
 8006486:	fba3 1302 	umull	r1, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2164      	movs	r1, #100	; 0x64
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	3332      	adds	r3, #50	; 0x32
 8006498:	4a27      	ldr	r2, [pc, #156]	; (8006538 <UART_SetConfig+0x384>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064a6:	4498      	add	r8, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	461d      	mov	r5, r3
 80064ac:	f04f 0600 	mov.w	r6, #0
 80064b0:	46a9      	mov	r9, r5
 80064b2:	46b2      	mov	sl, r6
 80064b4:	eb19 0309 	adds.w	r3, r9, r9
 80064b8:	eb4a 040a 	adc.w	r4, sl, sl
 80064bc:	4699      	mov	r9, r3
 80064be:	46a2      	mov	sl, r4
 80064c0:	eb19 0905 	adds.w	r9, r9, r5
 80064c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80064c8:	f04f 0100 	mov.w	r1, #0
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064dc:	4689      	mov	r9, r1
 80064de:	4692      	mov	sl, r2
 80064e0:	eb19 0005 	adds.w	r0, r9, r5
 80064e4:	eb4a 0106 	adc.w	r1, sl, r6
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	461d      	mov	r5, r3
 80064ee:	f04f 0600 	mov.w	r6, #0
 80064f2:	196b      	adds	r3, r5, r5
 80064f4:	eb46 0406 	adc.w	r4, r6, r6
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	f7f9 fe82 	bl	8000204 <__aeabi_uldivmod>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	461a      	mov	r2, r3
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <UART_SetConfig+0x384>)
 8006508:	fba3 1302 	umull	r1, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	2164      	movs	r1, #100	; 0x64
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	3332      	adds	r3, #50	; 0x32
 800651a:	4a07      	ldr	r2, [pc, #28]	; (8006538 <UART_SetConfig+0x384>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	f003 0207 	and.w	r2, r3, #7
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4442      	add	r2, r8
 800652c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800652e:	e1b2      	b.n	8006896 <UART_SetConfig+0x6e2>
 8006530:	40011000 	.word	0x40011000
 8006534:	40011400 	.word	0x40011400
 8006538:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4ad7      	ldr	r2, [pc, #860]	; (80068a0 <UART_SetConfig+0x6ec>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d005      	beq.n	8006552 <UART_SetConfig+0x39e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4ad6      	ldr	r2, [pc, #856]	; (80068a4 <UART_SetConfig+0x6f0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	f040 80d1 	bne.w	80066f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006552:	f7fe f8d5 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8006556:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	469a      	mov	sl, r3
 800655c:	f04f 0b00 	mov.w	fp, #0
 8006560:	46d0      	mov	r8, sl
 8006562:	46d9      	mov	r9, fp
 8006564:	eb18 0308 	adds.w	r3, r8, r8
 8006568:	eb49 0409 	adc.w	r4, r9, r9
 800656c:	4698      	mov	r8, r3
 800656e:	46a1      	mov	r9, r4
 8006570:	eb18 080a 	adds.w	r8, r8, sl
 8006574:	eb49 090b 	adc.w	r9, r9, fp
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006584:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006588:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800658c:	4688      	mov	r8, r1
 800658e:	4691      	mov	r9, r2
 8006590:	eb1a 0508 	adds.w	r5, sl, r8
 8006594:	eb4b 0609 	adc.w	r6, fp, r9
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4619      	mov	r1, r3
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	f04f 0400 	mov.w	r4, #0
 80065aa:	0094      	lsls	r4, r2, #2
 80065ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065b0:	008b      	lsls	r3, r1, #2
 80065b2:	461a      	mov	r2, r3
 80065b4:	4623      	mov	r3, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	4631      	mov	r1, r6
 80065ba:	f7f9 fe23 	bl	8000204 <__aeabi_uldivmod>
 80065be:	4603      	mov	r3, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	461a      	mov	r2, r3
 80065c4:	4bb8      	ldr	r3, [pc, #736]	; (80068a8 <UART_SetConfig+0x6f4>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	469b      	mov	fp, r3
 80065d4:	f04f 0c00 	mov.w	ip, #0
 80065d8:	46d9      	mov	r9, fp
 80065da:	46e2      	mov	sl, ip
 80065dc:	eb19 0309 	adds.w	r3, r9, r9
 80065e0:	eb4a 040a 	adc.w	r4, sl, sl
 80065e4:	4699      	mov	r9, r3
 80065e6:	46a2      	mov	sl, r4
 80065e8:	eb19 090b 	adds.w	r9, r9, fp
 80065ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006600:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006604:	4689      	mov	r9, r1
 8006606:	4692      	mov	sl, r2
 8006608:	eb1b 0509 	adds.w	r5, fp, r9
 800660c:	eb4c 060a 	adc.w	r6, ip, sl
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4619      	mov	r1, r3
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	f04f 0400 	mov.w	r4, #0
 8006622:	0094      	lsls	r4, r2, #2
 8006624:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006628:	008b      	lsls	r3, r1, #2
 800662a:	461a      	mov	r2, r3
 800662c:	4623      	mov	r3, r4
 800662e:	4628      	mov	r0, r5
 8006630:	4631      	mov	r1, r6
 8006632:	f7f9 fde7 	bl	8000204 <__aeabi_uldivmod>
 8006636:	4603      	mov	r3, r0
 8006638:	460c      	mov	r4, r1
 800663a:	461a      	mov	r2, r3
 800663c:	4b9a      	ldr	r3, [pc, #616]	; (80068a8 <UART_SetConfig+0x6f4>)
 800663e:	fba3 1302 	umull	r1, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2164      	movs	r1, #100	; 0x64
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	; 0x32
 8006650:	4a95      	ldr	r2, [pc, #596]	; (80068a8 <UART_SetConfig+0x6f4>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800665c:	4498      	add	r8, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	469b      	mov	fp, r3
 8006662:	f04f 0c00 	mov.w	ip, #0
 8006666:	46d9      	mov	r9, fp
 8006668:	46e2      	mov	sl, ip
 800666a:	eb19 0309 	adds.w	r3, r9, r9
 800666e:	eb4a 040a 	adc.w	r4, sl, sl
 8006672:	4699      	mov	r9, r3
 8006674:	46a2      	mov	sl, r4
 8006676:	eb19 090b 	adds.w	r9, r9, fp
 800667a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800668e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006692:	4689      	mov	r9, r1
 8006694:	4692      	mov	sl, r2
 8006696:	eb1b 0509 	adds.w	r5, fp, r9
 800669a:	eb4c 060a 	adc.w	r6, ip, sl
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4619      	mov	r1, r3
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	f04f 0400 	mov.w	r4, #0
 80066b0:	0094      	lsls	r4, r2, #2
 80066b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066b6:	008b      	lsls	r3, r1, #2
 80066b8:	461a      	mov	r2, r3
 80066ba:	4623      	mov	r3, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	4631      	mov	r1, r6
 80066c0:	f7f9 fda0 	bl	8000204 <__aeabi_uldivmod>
 80066c4:	4603      	mov	r3, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b77      	ldr	r3, [pc, #476]	; (80068a8 <UART_SetConfig+0x6f4>)
 80066cc:	fba3 1302 	umull	r1, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	2164      	movs	r1, #100	; 0x64
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	3332      	adds	r3, #50	; 0x32
 80066de:	4a72      	ldr	r2, [pc, #456]	; (80068a8 <UART_SetConfig+0x6f4>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4442      	add	r2, r8
 80066f0:	609a      	str	r2, [r3, #8]
 80066f2:	e0d0      	b.n	8006896 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fd fff0 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80066f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	469a      	mov	sl, r3
 80066fe:	f04f 0b00 	mov.w	fp, #0
 8006702:	46d0      	mov	r8, sl
 8006704:	46d9      	mov	r9, fp
 8006706:	eb18 0308 	adds.w	r3, r8, r8
 800670a:	eb49 0409 	adc.w	r4, r9, r9
 800670e:	4698      	mov	r8, r3
 8006710:	46a1      	mov	r9, r4
 8006712:	eb18 080a 	adds.w	r8, r8, sl
 8006716:	eb49 090b 	adc.w	r9, r9, fp
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006726:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800672a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800672e:	4688      	mov	r8, r1
 8006730:	4691      	mov	r9, r2
 8006732:	eb1a 0508 	adds.w	r5, sl, r8
 8006736:	eb4b 0609 	adc.w	r6, fp, r9
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4619      	mov	r1, r3
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	f04f 0400 	mov.w	r4, #0
 800674c:	0094      	lsls	r4, r2, #2
 800674e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006752:	008b      	lsls	r3, r1, #2
 8006754:	461a      	mov	r2, r3
 8006756:	4623      	mov	r3, r4
 8006758:	4628      	mov	r0, r5
 800675a:	4631      	mov	r1, r6
 800675c:	f7f9 fd52 	bl	8000204 <__aeabi_uldivmod>
 8006760:	4603      	mov	r3, r0
 8006762:	460c      	mov	r4, r1
 8006764:	461a      	mov	r2, r3
 8006766:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <UART_SetConfig+0x6f4>)
 8006768:	fba3 2302 	umull	r2, r3, r3, r2
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	469b      	mov	fp, r3
 8006776:	f04f 0c00 	mov.w	ip, #0
 800677a:	46d9      	mov	r9, fp
 800677c:	46e2      	mov	sl, ip
 800677e:	eb19 0309 	adds.w	r3, r9, r9
 8006782:	eb4a 040a 	adc.w	r4, sl, sl
 8006786:	4699      	mov	r9, r3
 8006788:	46a2      	mov	sl, r4
 800678a:	eb19 090b 	adds.w	r9, r9, fp
 800678e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a6:	4689      	mov	r9, r1
 80067a8:	4692      	mov	sl, r2
 80067aa:	eb1b 0509 	adds.w	r5, fp, r9
 80067ae:	eb4c 060a 	adc.w	r6, ip, sl
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4619      	mov	r1, r3
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	0094      	lsls	r4, r2, #2
 80067c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067ca:	008b      	lsls	r3, r1, #2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	4631      	mov	r1, r6
 80067d4:	f7f9 fd16 	bl	8000204 <__aeabi_uldivmod>
 80067d8:	4603      	mov	r3, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	461a      	mov	r2, r3
 80067de:	4b32      	ldr	r3, [pc, #200]	; (80068a8 <UART_SetConfig+0x6f4>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	3332      	adds	r3, #50	; 0x32
 80067f2:	4a2d      	ldr	r2, [pc, #180]	; (80068a8 <UART_SetConfig+0x6f4>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fe:	4498      	add	r8, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	469b      	mov	fp, r3
 8006804:	f04f 0c00 	mov.w	ip, #0
 8006808:	46d9      	mov	r9, fp
 800680a:	46e2      	mov	sl, ip
 800680c:	eb19 0309 	adds.w	r3, r9, r9
 8006810:	eb4a 040a 	adc.w	r4, sl, sl
 8006814:	4699      	mov	r9, r3
 8006816:	46a2      	mov	sl, r4
 8006818:	eb19 090b 	adds.w	r9, r9, fp
 800681c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006830:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006834:	4689      	mov	r9, r1
 8006836:	4692      	mov	sl, r2
 8006838:	eb1b 0509 	adds.w	r5, fp, r9
 800683c:	eb4c 060a 	adc.w	r6, ip, sl
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4619      	mov	r1, r3
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	f04f 0400 	mov.w	r4, #0
 8006852:	0094      	lsls	r4, r2, #2
 8006854:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006858:	008b      	lsls	r3, r1, #2
 800685a:	461a      	mov	r2, r3
 800685c:	4623      	mov	r3, r4
 800685e:	4628      	mov	r0, r5
 8006860:	4631      	mov	r1, r6
 8006862:	f7f9 fccf 	bl	8000204 <__aeabi_uldivmod>
 8006866:	4603      	mov	r3, r0
 8006868:	460c      	mov	r4, r1
 800686a:	461a      	mov	r2, r3
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <UART_SetConfig+0x6f4>)
 800686e:	fba3 1302 	umull	r1, r3, r3, r2
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	2164      	movs	r1, #100	; 0x64
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	3332      	adds	r3, #50	; 0x32
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <UART_SetConfig+0x6f4>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	f003 020f 	and.w	r2, r3, #15
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4442      	add	r2, r8
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	e7ff      	b.n	8006896 <UART_SetConfig+0x6e2>
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40011400 	.word	0x40011400
 80068a8:	51eb851f 	.word	0x51eb851f

080068ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068b0:	4904      	ldr	r1, [pc, #16]	; (80068c4 <MX_FATFS_Init+0x18>)
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_FATFS_Init+0x1c>)
 80068b4:	f002 fbf6 	bl	80090a4 <FATFS_LinkDriver>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <MX_FATFS_Init+0x20>)
 80068be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80068c0:	bf00      	nop
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20001a48 	.word	0x20001a48
 80068c8:	20000078 	.word	0x20000078
 80068cc:	20001a4c 	.word	0x20001a4c

080068d0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USER_initialize>:
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize (
		BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
	if(SD_Init() == 1){Stat=0;}
 80068ea:	f7fb f807 	bl	80018fc <SD_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d102      	bne.n	80068fa <USER_initialize+0x1a>
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <USER_initialize+0x28>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
	else{STA_NOINIT;}

	return Stat;
 80068fa:	4b03      	ldr	r3, [pc, #12]	; (8006908 <USER_initialize+0x28>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
	/* USER CODE END INIT */
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000075 	.word	0x20000075

0800690c <USER_status>:
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status (
		BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */

	return Stat;
 8006916:	4b04      	ldr	r3, [pc, #16]	; (8006928 <USER_status+0x1c>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b2db      	uxtb	r3, r3
	/* USER CODE END STATUS */
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	20000075 	.word	0x20000075

0800692c <USER_read>:
		BYTE pdrv,      /* Physical drive nmuber to identify the drive */
		BYTE *buff,     /* Data buffer to store read data */
		DWORD sector,   /* Sector address in LBA */
		UINT count      /* Number of sectors to read */
)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
	if(SD_Read(buff, sector*512, count)==1)//x512 since we use high capacity card
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	025b      	lsls	r3, r3, #9
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	4619      	mov	r1, r3
 8006944:	68b8      	ldr	r0, [r7, #8]
 8006946:	f7fb f879 	bl	8001a3c <SD_Read>
 800694a:	4603      	mov	r3, r0
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <USER_read+0x28>
		return RES_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e000      	b.n	8006956 <USER_read+0x2a>
	else
		return RES_ERROR;
 8006954:	2301      	movs	r3, #1
	/* USER CODE END READ */
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USER_write>:
		BYTE pdrv,          /* Physical drive nmuber to identify the drive */
		const BYTE *buff,   /* Data to be written */
		DWORD sector,       /* Sector address in LBA */
		UINT count          /* Number of sectors to write */
)
{ 
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	if(SD_Write(buff, sector*512, count) == 1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	025b      	lsls	r3, r3, #9
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f7fb f8ee 	bl	8001b58 <SD_Write>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <USER_write+0x28>
		return RES_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <USER_write+0x2a>
	else
		return RES_ERROR;
 8006986:	2301      	movs	r3, #1
	/* USER CODE END WRITE */
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USER_ioctl>:
DRESULT USER_ioctl (
		BYTE pdrv,      /* Physical drive nmuber (0..) */
		BYTE cmd,       /* Control code */
		void *buff      /* Buffer to send/receive control data */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	603a      	str	r2, [r7, #0]
 800699a:	71fb      	strb	r3, [r7, #7]
 800699c:	460b      	mov	r3, r1
 800699e:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
	uint8_t* ptr = buff;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	613b      	str	r3, [r7, #16]
	switch(cmd){
 80069a8:	79bb      	ldrb	r3, [r7, #6]
 80069aa:	2b0e      	cmp	r3, #14
 80069ac:	f200 8091 	bhi.w	8006ad2 <USER_ioctl+0x142>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <USER_ioctl+0x28>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069fb 	.word	0x080069fb
 80069c0:	08006a09 	.word	0x08006a09
 80069c4:	08006a17 	.word	0x08006a17
 80069c8:	08006a23 	.word	0x08006a23
 80069cc:	08006a29 	.word	0x08006a29
 80069d0:	08006a2f 	.word	0x08006a2f
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	08006a3b 	.word	0x08006a3b
 80069dc:	08006ad3 	.word	0x08006ad3
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	08006a47 	.word	0x08006a47
 80069e8:	08006a67 	.word	0x08006a67
 80069ec:	08006a87 	.word	0x08006a87
 80069f0:	08006abd 	.word	0x08006abd

	case CTRL_SYNC:
		res=RES_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
		break;
 80069f8:	e06b      	b.n	8006ad2 <USER_ioctl+0x142>

	case GET_SECTOR_COUNT:
		*(unsigned long*) buff=8388608;//(2^32)/512
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a00:	601a      	str	r2, [r3, #0]
		res=RES_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	75fb      	strb	r3, [r7, #23]
		break;
 8006a06:	e064      	b.n	8006ad2 <USER_ioctl+0x142>

	case GET_SECTOR_SIZE:
		*(unsigned short*) buff=512;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0e:	801a      	strh	r2, [r3, #0]
		res=RES_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	75fb      	strb	r3, [r7, #23]
		break;
 8006a14:	e05d      	b.n	8006ad2 <USER_ioctl+0x142>

	case GET_BLOCK_SIZE:
		*(unsigned short*) buff=0;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	801a      	strh	r2, [r3, #0]
		res=RES_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	75fb      	strb	r3, [r7, #23]
		break;
 8006a20:	e057      	b.n	8006ad2 <USER_ioctl+0x142>

	case CTRL_TRIM:
		res=RES_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
		break;
 8006a26:	e054      	b.n	8006ad2 <USER_ioctl+0x142>

	case CTRL_POWER:
		res=RES_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]
		break;
 8006a2c:	e051      	b.n	8006ad2 <USER_ioctl+0x142>

	case CTRL_LOCK:
		res=RES_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75fb      	strb	r3, [r7, #23]
		break;
 8006a32:	e04e      	b.n	8006ad2 <USER_ioctl+0x142>

	case CTRL_EJECT:
		res=RES_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]
		break;
 8006a38:	e04b      	b.n	8006ad2 <USER_ioctl+0x142>

	case CTRL_FORMAT:
		res=RES_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]
		break;
 8006a3e:	e048      	b.n	8006ad2 <USER_ioctl+0x142>

	case MMC_GET_TYPE:
		res=RES_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	75fb      	strb	r3, [r7, #23]
		break;
 8006a44:	e045      	b.n	8006ad2 <USER_ioctl+0x142>

	case MMC_GET_CSD:
		if(SD_SendCommand(9, 0)==0 && SD_RxDataBlock((unsigned char*) buff)) res=RES_OK;
 8006a46:	2100      	movs	r1, #0
 8006a48:	2009      	movs	r0, #9
 8006a4a:	f7fa fee1 	bl	8001810 <SD_SendCommand>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d139      	bne.n	8006ac8 <USER_ioctl+0x138>
 8006a54:	6838      	ldr	r0, [r7, #0]
 8006a56:	f7fa ffbd 	bl	80019d4 <SD_RxDataBlock>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d033      	beq.n	8006ac8 <USER_ioctl+0x138>
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
		break;
 8006a64:	e030      	b.n	8006ac8 <USER_ioctl+0x138>

	case MMC_GET_CID:
		if(SD_SendCommand(10, 0)==0 && SD_RxDataBlock((unsigned char*) buff)) res=RES_OK;
 8006a66:	2100      	movs	r1, #0
 8006a68:	200a      	movs	r0, #10
 8006a6a:	f7fa fed1 	bl	8001810 <SD_SendCommand>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d12b      	bne.n	8006acc <USER_ioctl+0x13c>
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7fa ffad 	bl	80019d4 <SD_RxDataBlock>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d025      	beq.n	8006acc <USER_ioctl+0x13c>
 8006a80:	2300      	movs	r3, #0
 8006a82:	75fb      	strb	r3, [r7, #23]
		break;
 8006a84:	e022      	b.n	8006acc <USER_ioctl+0x13c>

	case MMC_GET_OCR:
		if(SD_SendCommand(58, 0) == 0){
 8006a86:	2100      	movs	r1, #0
 8006a88:	203a      	movs	r0, #58	; 0x3a
 8006a8a:	f7fa fec1 	bl	8001810 <SD_SendCommand>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11d      	bne.n	8006ad0 <USER_ioctl+0x140>
			for (int n = 0; n < 4; n++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e00a      	b.n	8006ab0 <USER_ioctl+0x120>
				*ptr++ = SD_ReceiveByte();
 8006a9a:	f7fa fea5 	bl	80017e8 <SD_ReceiveByte>
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	613a      	str	r2, [r7, #16]
 8006aa6:	b2ca      	uxtb	r2, r1
 8006aa8:	701a      	strb	r2, [r3, #0]
			for (int n = 0; n < 4; n++) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	ddf1      	ble.n	8006a9a <USER_ioctl+0x10a>
			}
			res=RES_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]
		}
		break;
 8006aba:	e009      	b.n	8006ad0 <USER_ioctl+0x140>

	case MMC_GET_SDSTAT:
		*(unsigned char*)buff=Stat;
 8006abc:	4b07      	ldr	r3, [pc, #28]	; (8006adc <USER_ioctl+0x14c>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	701a      	strb	r2, [r3, #0]
		break;
 8006ac6:	e004      	b.n	8006ad2 <USER_ioctl+0x142>
		break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <USER_ioctl+0x142>
		break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <USER_ioctl+0x142>
		break;
 8006ad0:	bf00      	nop
	}
	return res;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
	/* USER CODE END IOCTL */
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000075 	.word	0x20000075

08006ae0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <disk_status+0x30>)
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	79fa      	ldrb	r2, [r7, #7]
 8006af8:	4905      	ldr	r1, [pc, #20]	; (8006b10 <disk_status+0x30>)
 8006afa:	440a      	add	r2, r1
 8006afc:	7a12      	ldrb	r2, [r2, #8]
 8006afe:	4610      	mov	r0, r2
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000120 	.word	0x20000120

08006b14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <disk_initialize+0x48>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d111      	bne.n	8006b50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <disk_initialize+0x48>)
 8006b30:	2101      	movs	r1, #1
 8006b32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <disk_initialize+0x48>)
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	79fa      	ldrb	r2, [r7, #7]
 8006b42:	4906      	ldr	r1, [pc, #24]	; (8006b5c <disk_initialize+0x48>)
 8006b44:	440a      	add	r2, r1
 8006b46:	7a12      	ldrb	r2, [r2, #8]
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000120 	.word	0x20000120

08006b60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <disk_read+0x3c>)
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	689c      	ldr	r4, [r3, #8]
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	4a07      	ldr	r2, [pc, #28]	; (8006b9c <disk_read+0x3c>)
 8006b80:	4413      	add	r3, r2
 8006b82:	7a18      	ldrb	r0, [r3, #8]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	47a0      	blx	r4
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd90      	pop	{r4, r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000120 	.word	0x20000120

08006ba0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <disk_write+0x3c>)
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68dc      	ldr	r4, [r3, #12]
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <disk_write+0x3c>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	7a18      	ldrb	r0, [r3, #8]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	47a0      	blx	r4
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]
  return res;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd90      	pop	{r4, r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000120 	.word	0x20000120

08006be0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	603a      	str	r2, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
 8006bec:	460b      	mov	r3, r1
 8006bee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <disk_ioctl+0x38>)
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	79fa      	ldrb	r2, [r7, #7]
 8006bfe:	4906      	ldr	r1, [pc, #24]	; (8006c18 <disk_ioctl+0x38>)
 8006c00:	440a      	add	r2, r1
 8006c02:	7a10      	ldrb	r0, [r2, #8]
 8006c04:	79b9      	ldrb	r1, [r7, #6]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4798      	blx	r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000120 	.word	0x20000120

08006c1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3301      	adds	r3, #1
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c2c:	89fb      	ldrh	r3, [r7, #14]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	b21a      	sxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b21b      	sxth	r3, r3
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b21b      	sxth	r3, r3
 8006c3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3303      	adds	r3, #3
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	3202      	adds	r2, #2
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	3201      	adds	r2, #1
 8006c72:	7812      	ldrb	r2, [r2, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	887a      	ldrh	r2, [r7, #2]
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	887b      	ldrh	r3, [r7, #2]
 8006cac:	0a1b      	lsrs	r3, r3, #8
 8006cae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	887a      	ldrh	r2, [r7, #2]
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	1c53      	adds	r3, r2, #1
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	1c59      	adds	r1, r3, #1
 8006d44:	6179      	str	r1, [r7, #20]
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f1      	bne.n	8006d3a <mem_cpy+0x1a>
	}
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	617a      	str	r2, [r7, #20]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f3      	bne.n	8006d72 <mem_set+0x10>
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d96:	b480      	push	{r7}
 8006d98:	b089      	sub	sp, #36	; 0x24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	61fa      	str	r2, [r7, #28]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	61ba      	str	r2, [r7, #24]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	1acb      	subs	r3, r1, r3
 8006dc2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <mem_cmp+0x40>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0eb      	beq.n	8006dae <mem_cmp+0x18>

	return r;
 8006dd6:	697b      	ldr	r3, [r7, #20]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3724      	adds	r7, #36	; 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006dee:	e002      	b.n	8006df6 <chk_chr+0x12>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3301      	adds	r3, #1
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <chk_chr+0x26>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d1f2      	bne.n	8006df0 <chk_chr+0xc>
	return *str;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e26:	2300      	movs	r3, #0
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e029      	b.n	8006e84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <chk_lock+0xb4>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	4413      	add	r3, r2
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01d      	beq.n	8006e7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <chk_lock+0xb4>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	4413      	add	r3, r2
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d116      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006e50:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <chk_lock+0xb4>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	4413      	add	r3, r2
 8006e58:	3304      	adds	r3, #4
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d10c      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e64:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <chk_lock+0xb4>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d102      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e78:	e007      	b.n	8006e8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d9d2      	bls.n	8006e30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d109      	bne.n	8006ea4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <chk_lock+0x80>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d101      	bne.n	8006ea0 <chk_lock+0x84>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e010      	b.n	8006ec2 <chk_lock+0xa6>
 8006ea0:	2312      	movs	r3, #18
 8006ea2:	e00e      	b.n	8006ec2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d108      	bne.n	8006ebc <chk_lock+0xa0>
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <chk_lock+0xb4>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	4413      	add	r3, r2
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eba:	d101      	bne.n	8006ec0 <chk_lock+0xa4>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	e000      	b.n	8006ec2 <chk_lock+0xa6>
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000100 	.word	0x20000100

08006ed4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
 8006ede:	e002      	b.n	8006ee6 <enq_lock+0x12>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d806      	bhi.n	8006efa <enq_lock+0x26>
 8006eec:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <enq_lock+0x40>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f2      	bne.n	8006ee0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000100 	.word	0x20000100

08006f18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e01f      	b.n	8006f68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f28:	4a41      	ldr	r2, [pc, #260]	; (8007030 <inc_lock+0x118>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	4413      	add	r3, r2
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d113      	bne.n	8006f62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006f3a:	4a3d      	ldr	r2, [pc, #244]	; (8007030 <inc_lock+0x118>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4413      	add	r3, r2
 8006f42:	3304      	adds	r3, #4
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d109      	bne.n	8006f62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f4e:	4a38      	ldr	r2, [pc, #224]	; (8007030 <inc_lock+0x118>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	4413      	add	r3, r2
 8006f56:	3308      	adds	r3, #8
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d006      	beq.n	8006f70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d9dc      	bls.n	8006f28 <inc_lock+0x10>
 8006f6e:	e000      	b.n	8006f72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d132      	bne.n	8006fde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e002      	b.n	8006f84 <inc_lock+0x6c>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d806      	bhi.n	8006f98 <inc_lock+0x80>
 8006f8a:	4a29      	ldr	r2, [pc, #164]	; (8007030 <inc_lock+0x118>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f2      	bne.n	8006f7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d101      	bne.n	8006fa2 <inc_lock+0x8a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e040      	b.n	8007024 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4922      	ldr	r1, [pc, #136]	; (8007030 <inc_lock+0x118>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	440b      	add	r3, r1
 8006fae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	491e      	ldr	r1, [pc, #120]	; (8007030 <inc_lock+0x118>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	440b      	add	r3, r1
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695a      	ldr	r2, [r3, #20]
 8006fc4:	491a      	ldr	r1, [pc, #104]	; (8007030 <inc_lock+0x118>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	440b      	add	r3, r1
 8006fcc:	3308      	adds	r3, #8
 8006fce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <inc_lock+0x118>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	4413      	add	r3, r2
 8006fd8:	330c      	adds	r3, #12
 8006fda:	2200      	movs	r2, #0
 8006fdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <inc_lock+0xe0>
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <inc_lock+0x118>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	330c      	adds	r3, #12
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <inc_lock+0xe0>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e015      	b.n	8007024 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d108      	bne.n	8007010 <inc_lock+0xf8>
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <inc_lock+0x118>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4413      	add	r3, r2
 8007006:	330c      	adds	r3, #12
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	e001      	b.n	8007014 <inc_lock+0xfc>
 8007010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <inc_lock+0x118>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	440b      	add	r3, r1
 800701c:	330c      	adds	r3, #12
 800701e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	20000100 	.word	0x20000100

08007034 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d825      	bhi.n	8007094 <dec_lock+0x60>
		n = Files[i].ctr;
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <dec_lock+0x74>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	4413      	add	r3, r2
 8007050:	330c      	adds	r3, #12
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705c:	d101      	bne.n	8007062 <dec_lock+0x2e>
 800705e:	2300      	movs	r3, #0
 8007060:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007062:	89fb      	ldrh	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <dec_lock+0x3a>
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	3b01      	subs	r3, #1
 800706c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800706e:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <dec_lock+0x74>)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	330c      	adds	r3, #12
 8007078:	89fa      	ldrh	r2, [r7, #14]
 800707a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <dec_lock+0x5a>
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <dec_lock+0x74>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	4413      	add	r3, r2
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	737b      	strb	r3, [r7, #13]
 8007092:	e001      	b.n	8007098 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007094:	2302      	movs	r3, #2
 8007096:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007098:	7b7b      	ldrb	r3, [r7, #13]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000100 	.word	0x20000100

080070ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e010      	b.n	80070dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070ba:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <clear_lock+0x44>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d105      	bne.n	80070d6 <clear_lock+0x2a>
 80070ca:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <clear_lock+0x44>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d9eb      	bls.n	80070ba <clear_lock+0xe>
	}
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000100 	.word	0x20000100

080070f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78db      	ldrb	r3, [r3, #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d034      	beq.n	8007172 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7858      	ldrb	r0, [r3, #1]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007118:	2301      	movs	r3, #1
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f7ff fd40 	bl	8006ba0 <disk_write>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e022      	b.n	8007172 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	429a      	cmp	r2, r3
 8007140:	d217      	bcs.n	8007172 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	789b      	ldrb	r3, [r3, #2]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	e010      	b.n	800716c <sync_window+0x78>
					wsect += fs->fsize;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7858      	ldrb	r0, [r3, #1]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800715e:	2301      	movs	r3, #1
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	f7ff fd1d 	bl	8006ba0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3b01      	subs	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d8eb      	bhi.n	800714a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01b      	beq.n	80071cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ffad 	bl	80070f4 <sync_window>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7858      	ldrb	r0, [r3, #1]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ae:	2301      	movs	r3, #1
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	f7ff fcd5 	bl	8006b60 <disk_read>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff87 	bl	80070f4 <sync_window>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d158      	bne.n	80072a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d148      	bne.n	800728a <sync_fs+0xb2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d144      	bne.n	800728a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3330      	adds	r3, #48	; 0x30
 8007204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fda9 	bl	8006d62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3330      	adds	r3, #48	; 0x30
 8007214:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007218:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fd38 	bl	8006c92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3330      	adds	r3, #48	; 0x30
 8007226:	4921      	ldr	r1, [pc, #132]	; (80072ac <sync_fs+0xd4>)
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fd4d 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3330      	adds	r3, #48	; 0x30
 8007232:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007236:	491e      	ldr	r1, [pc, #120]	; (80072b0 <sync_fs+0xd8>)
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fd45 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3330      	adds	r3, #48	; 0x30
 8007242:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fd3b 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3330      	adds	r3, #48	; 0x30
 8007256:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7ff fd31 	bl	8006cc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7858      	ldrb	r0, [r3, #1]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	2301      	movs	r3, #1
 8007280:	f7ff fc8e 	bl	8006ba0 <disk_write>
			fs->fsi_flag = 0;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fca4 	bl	8006be0 <disk_ioctl>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <sync_fs+0xca>
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	41615252 	.word	0x41615252
 80072b0:	61417272 	.word	0x61417272

080072b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3b02      	subs	r3, #2
 80072c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	3b02      	subs	r3, #2
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d301      	bcc.n	80072d4 <clust2sect+0x20>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e008      	b.n	80072e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	895b      	ldrh	r3, [r3, #10]
 80072d8:	461a      	mov	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	fb03 f202 	mul.w	r2, r3, r2
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	4413      	add	r3, r2
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d904      	bls.n	8007312 <get_fat+0x20>
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007312:	2301      	movs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e08c      	b.n	8007432 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d045      	beq.n	80073b2 <get_fat+0xc0>
 8007326:	2b03      	cmp	r3, #3
 8007328:	d05d      	beq.n	80073e6 <get_fat+0xf4>
 800732a:	2b01      	cmp	r3, #1
 800732c:	d177      	bne.n	800741e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	0a5b      	lsrs	r3, r3, #9
 8007344:	4413      	add	r3, r2
 8007346:	4619      	mov	r1, r3
 8007348:	6938      	ldr	r0, [r7, #16]
 800734a:	f7ff ff17 	bl	800717c <move_window>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d167      	bne.n	8007424 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	60fa      	str	r2, [r7, #12]
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007366:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0a5b      	lsrs	r3, r3, #9
 8007370:	4413      	add	r3, r2
 8007372:	4619      	mov	r1, r3
 8007374:	6938      	ldr	r0, [r7, #16]
 8007376:	f7ff ff01 	bl	800717c <move_window>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d153      	bne.n	8007428 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <get_fat+0xb6>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	e002      	b.n	80073ae <get_fat+0xbc>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ae:	617b      	str	r3, [r7, #20]
			break;
 80073b0:	e03f      	b.n	8007432 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	4413      	add	r3, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7ff fedc 	bl	800717c <move_window>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d130      	bne.n	800742c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80073d8:	4413      	add	r3, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fc1e 	bl	8006c1c <ld_word>
 80073e0:	4603      	mov	r3, r0
 80073e2:	617b      	str	r3, [r7, #20]
			break;
 80073e4:	e025      	b.n	8007432 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6a1a      	ldr	r2, [r3, #32]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	09db      	lsrs	r3, r3, #7
 80073ee:	4413      	add	r3, r2
 80073f0:	4619      	mov	r1, r3
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f7ff fec2 	bl	800717c <move_window>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d118      	bne.n	8007430 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800740c:	4413      	add	r3, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fc1c 	bl	8006c4c <ld_dword>
 8007414:	4603      	mov	r3, r0
 8007416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800741a:	617b      	str	r3, [r7, #20]
			break;
 800741c:	e009      	b.n	8007432 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e006      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007430:	bf00      	nop
		}
	}

	return val;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007448:	2302      	movs	r3, #2
 800744a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b01      	cmp	r3, #1
 8007450:	f240 80d6 	bls.w	8007600 <put_fat+0x1c4>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	429a      	cmp	r2, r3
 800745c:	f080 80d0 	bcs.w	8007600 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d073      	beq.n	8007550 <put_fat+0x114>
 8007468:	2b03      	cmp	r3, #3
 800746a:	f000 8091 	beq.w	8007590 <put_fat+0x154>
 800746e:	2b01      	cmp	r3, #1
 8007470:	f040 80c6 	bne.w	8007600 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4413      	add	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	4413      	add	r3, r2
 800748c:	4619      	mov	r1, r3
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fe74 	bl	800717c <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 80a9 	bne.w	80075f2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	61b9      	str	r1, [r7, #24]
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	4413      	add	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <put_fat+0x9e>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b25b      	sxtb	r3, r3
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b25a      	sxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	e001      	b.n	80074de <put_fat+0xa2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	0a5b      	lsrs	r3, r3, #9
 80074f0:	4413      	add	r3, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fe41 	bl	800717c <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d178      	bne.n	80075f6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <put_fat+0xea>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	091b      	lsrs	r3, r3, #4
 8007522:	b2db      	uxtb	r3, r3
 8007524:	e00e      	b.n	8007544 <put_fat+0x108>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f023 030f 	bic.w	r3, r3, #15
 8007530:	b25a      	sxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	b25b      	sxtb	r3, r3
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	b25b      	sxtb	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b25b      	sxtb	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	70da      	strb	r2, [r3, #3]
			break;
 800754e:	e057      	b.n	8007600 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	4413      	add	r3, r2
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fe0d 	bl	800717c <move_window>
 8007562:	4603      	mov	r3, r0
 8007564:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007566:	7ffb      	ldrb	r3, [r7, #31]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d146      	bne.n	80075fa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800757a:	4413      	add	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	b292      	uxth	r2, r2
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fb85 	bl	8006c92 <st_word>
			fs->wflag = 1;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	70da      	strb	r2, [r3, #3]
			break;
 800758e:	e037      	b.n	8007600 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	09db      	lsrs	r3, r3, #7
 8007598:	4413      	add	r3, r2
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff fded 	bl	800717c <move_window>
 80075a2:	4603      	mov	r3, r0
 80075a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d128      	bne.n	80075fe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075c0:	4413      	add	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fb42 	bl	8006c4c <ld_dword>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075ce:	4323      	orrs	r3, r4
 80075d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075e0:	4413      	add	r3, r2
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fb6f 	bl	8006cc8 <st_dword>
			fs->wflag = 1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	70da      	strb	r2, [r3, #3]
			break;
 80075f0:	e006      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075f2:	bf00      	nop
 80075f4:	e004      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075fe:	bf00      	nop
		}
	}
	return res;
 8007600:	7ffb      	ldrb	r3, [r7, #31]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3724      	adds	r7, #36	; 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd90      	pop	{r4, r7, pc}

0800760a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d904      	bls.n	8007630 <remove_chain+0x26>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d301      	bcc.n	8007634 <remove_chain+0x2a>
 8007630:	2302      	movs	r3, #2
 8007632:	e04b      	b.n	80076cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	69b8      	ldr	r0, [r7, #24]
 8007642:	f7ff fefb 	bl	800743c <put_fat>
 8007646:	4603      	mov	r3, r0
 8007648:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <remove_chain+0x4a>
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	e03b      	b.n	80076cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe4b 	bl	80072f2 <get_fat>
 800765c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d031      	beq.n	80076c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <remove_chain+0x64>
 800766a:	2302      	movs	r3, #2
 800766c:	e02e      	b.n	80076cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d101      	bne.n	800767a <remove_chain+0x70>
 8007676:	2301      	movs	r3, #1
 8007678:	e028      	b.n	80076cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800767a:	2200      	movs	r2, #0
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	69b8      	ldr	r0, [r7, #24]
 8007680:	f7ff fedc 	bl	800743c <put_fat>
 8007684:	4603      	mov	r3, r0
 8007686:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007688:	7ffb      	ldrb	r3, [r7, #31]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <remove_chain+0x88>
 800768e:	7ffb      	ldrb	r3, [r7, #31]
 8007690:	e01c      	b.n	80076cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	3b02      	subs	r3, #2
 800769c:	429a      	cmp	r2, r3
 800769e:	d20b      	bcs.n	80076b8 <remove_chain+0xae>
			fs->free_clst++;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3c6      	bcc.n	8007654 <remove_chain+0x4a>
 80076c6:	e000      	b.n	80076ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80076c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <create_chain+0x2c>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d31b      	bcc.n	8007738 <create_chain+0x64>
 8007700:	2301      	movs	r3, #1
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e018      	b.n	8007738 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fdf2 	bl	80072f2 <get_fat>
 800770e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d801      	bhi.n	800771a <create_chain+0x46>
 8007716:	2301      	movs	r3, #1
 8007718:	e070      	b.n	80077fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d101      	bne.n	8007726 <create_chain+0x52>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	e06a      	b.n	80077fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	429a      	cmp	r2, r3
 800772e:	d201      	bcs.n	8007734 <create_chain+0x60>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	e063      	b.n	80077fc <create_chain+0x128>
		scl = clst;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	429a      	cmp	r2, r3
 800774a:	d307      	bcc.n	800775c <create_chain+0x88>
				ncl = 2;
 800774c:	2302      	movs	r3, #2
 800774e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	429a      	cmp	r2, r3
 8007756:	d901      	bls.n	800775c <create_chain+0x88>
 8007758:	2300      	movs	r3, #0
 800775a:	e04f      	b.n	80077fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fdc7 	bl	80072f2 <get_fat>
 8007764:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00e      	beq.n	800778a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d003      	beq.n	800777a <create_chain+0xa6>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d101      	bne.n	800777e <create_chain+0xaa>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	e03e      	b.n	80077fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	429a      	cmp	r2, r3
 8007784:	d1da      	bne.n	800773c <create_chain+0x68>
 8007786:	2300      	movs	r3, #0
 8007788:	e038      	b.n	80077fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800778a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	6938      	ldr	r0, [r7, #16]
 8007794:	f7ff fe52 	bl	800743c <put_fat>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <create_chain+0xe2>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6938      	ldr	r0, [r7, #16]
 80077ae:	f7ff fe45 	bl	800743c <put_fat>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d116      	bne.n	80077ea <create_chain+0x116>
		fs->last_clst = ncl;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	3b02      	subs	r3, #2
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d804      	bhi.n	80077da <create_chain+0x106>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	711a      	strb	r2, [r3, #4]
 80077e8:	e007      	b.n	80077fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d102      	bne.n	80077f6 <create_chain+0x122>
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	e000      	b.n	80077f8 <create_chain+0x124>
 80077f6:	2301      	movs	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80077fa:	69fb      	ldr	r3, [r7, #28]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	3304      	adds	r3, #4
 800781a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	0a5b      	lsrs	r3, r3, #9
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	8952      	ldrh	r2, [r2, #10]
 8007824:	fbb3 f3f2 	udiv	r3, r3, r2
 8007828:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1d1a      	adds	r2, r3, #4
 800782e:	613a      	str	r2, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <clmt_clust+0x3a>
 800783a:	2300      	movs	r3, #0
 800783c:	e010      	b.n	8007860 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d307      	bcc.n	8007856 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3304      	adds	r3, #4
 8007852:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007854:	e7e9      	b.n	800782a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007856:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007882:	d204      	bcs.n	800788e <dir_sdi+0x22>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <dir_sdi+0x26>
		return FR_INT_ERR;
 800788e:	2302      	movs	r3, #2
 8007890:	e063      	b.n	800795a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <dir_sdi+0x46>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d902      	bls.n	80078b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	8912      	ldrh	r2, [r2, #8]
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d301      	bcc.n	80078c8 <dir_sdi+0x5c>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e048      	b.n	800795a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	61da      	str	r2, [r3, #28]
 80078d0:	e029      	b.n	8007926 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078da:	e019      	b.n	8007910 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fd06 	bl	80072f2 <get_fat>
 80078e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d101      	bne.n	80078f4 <dir_sdi+0x88>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e032      	b.n	800795a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d904      	bls.n	8007904 <dir_sdi+0x98>
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	429a      	cmp	r2, r3
 8007902:	d301      	bcc.n	8007908 <dir_sdi+0x9c>
 8007904:	2302      	movs	r3, #2
 8007906:	e028      	b.n	800795a <dir_sdi+0xee>
			ofs -= csz;
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d2e1      	bcs.n	80078dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f7ff fcca 	bl	80072b4 <clust2sect>
 8007920:	4602      	mov	r2, r0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <dir_sdi+0xcc>
 8007934:	2302      	movs	r3, #2
 8007936:	e010      	b.n	800795a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	0a5b      	lsrs	r3, r3, #9
 8007940:	441a      	add	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	441a      	add	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	3320      	adds	r3, #32
 8007978:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <dir_next+0x28>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007988:	d301      	bcc.n	800798e <dir_next+0x2c>
 800798a:	2304      	movs	r3, #4
 800798c:	e0aa      	b.n	8007ae4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8098 	bne.w	8007aca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	8912      	ldrh	r2, [r2, #8]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	f0c0 8088 	bcc.w	8007aca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	61da      	str	r2, [r3, #28]
 80079c0:	2304      	movs	r3, #4
 80079c2:	e08f      	b.n	8007ae4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	0a5b      	lsrs	r3, r3, #9
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	8952      	ldrh	r2, [r2, #10]
 80079cc:	3a01      	subs	r2, #1
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d17a      	bne.n	8007aca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7ff fc88 	bl	80072f2 <get_fat>
 80079e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d801      	bhi.n	80079ee <dir_next+0x8c>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e07a      	b.n	8007ae4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d101      	bne.n	80079fa <dir_next+0x98>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e074      	b.n	8007ae4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d358      	bcc.n	8007ab6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	61da      	str	r2, [r3, #28]
 8007a10:	2304      	movs	r3, #4
 8007a12:	e067      	b.n	8007ae4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7ff fe59 	bl	80076d4 <create_chain>
 8007a22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <dir_next+0xcc>
 8007a2a:	2307      	movs	r3, #7
 8007a2c:	e05a      	b.n	8007ae4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <dir_next+0xd6>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e055      	b.n	8007ae4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d101      	bne.n	8007a44 <dir_next+0xe2>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e04f      	b.n	8007ae4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fb55 	bl	80070f4 <sync_window>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <dir_next+0xf2>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e047      	b.n	8007ae4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3330      	adds	r3, #48	; 0x30
 8007a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f97f 	bl	8006d62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fc22 	bl	80072b4 <clust2sect>
 8007a70:	4602      	mov	r2, r0
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a76:	e012      	b.n	8007a9e <dir_next+0x13c>
						fs->wflag = 1;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff fb38 	bl	80070f4 <sync_window>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <dir_next+0x12c>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e02a      	b.n	8007ae4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d3e6      	bcc.n	8007a78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007abc:	6979      	ldr	r1, [r7, #20]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fbf8 	bl	80072b4 <clust2sect>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff feb4 	bl	800786c <dir_sdi>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d12b      	bne.n	8007b66 <dir_alloc+0x7a>
		n = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fb2f 	bl	800717c <move_window>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11d      	bne.n	8007b64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2be5      	cmp	r3, #229	; 0xe5
 8007b30:	d004      	beq.n	8007b3c <dir_alloc+0x50>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d102      	bne.n	8007b50 <dir_alloc+0x64>
 8007b4a:	e00c      	b.n	8007b66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff05 	bl	8007962 <dir_next>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0d7      	beq.n	8007b12 <dir_alloc+0x26>
 8007b62:	e000      	b.n	8007b66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d101      	bne.n	8007b70 <dir_alloc+0x84>
 8007b6c:	2307      	movs	r3, #7
 8007b6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	331a      	adds	r3, #26
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff f847 	bl	8006c1c <ld_word>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d109      	bne.n	8007bae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff f83c 	bl	8006c1c <ld_word>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	331a      	adds	r3, #26
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff f85f 	bl	8006c92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d109      	bne.n	8007bf0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f103 0214 	add.w	r2, r3, #20
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7ff f851 	bl	8006c92 <st_word>
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c06:	2100      	movs	r1, #0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fe2f 	bl	800786c <dir_sdi>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <dir_find+0x24>
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	e03e      	b.n	8007c9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6938      	ldr	r0, [r7, #16]
 8007c24:	f7ff faaa 	bl	800717c <move_window>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12f      	bne.n	8007c92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <dir_find+0x4e>
 8007c40:	2304      	movs	r3, #4
 8007c42:	75fb      	strb	r3, [r7, #23]
 8007c44:	e028      	b.n	8007c98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	330b      	adds	r3, #11
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	330b      	adds	r3, #11
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <dir_find+0x86>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a18      	ldr	r0, [r3, #32]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	220b      	movs	r2, #11
 8007c72:	4619      	mov	r1, r3
 8007c74:	f7ff f88f 	bl	8006d96 <mem_cmp>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fe6e 	bl	8007962 <dir_next>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0c5      	beq.n	8007c1c <dir_find+0x24>
 8007c90:	e002      	b.n	8007c98 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c92:	bf00      	nop
 8007c94:	e000      	b.n	8007c98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c96:	bf00      	nop

	return res;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff ff1a 	bl	8007aec <dir_alloc>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11c      	bne.n	8007cfc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f7ff fa57 	bl	800717c <move_window>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d111      	bne.n	8007cfc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff f83e 	bl	8006d62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a18      	ldr	r0, [r3, #32]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	220b      	movs	r2, #11
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f7ff f815 	bl	8006d20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d1e:	220b      	movs	r2, #11
 8007d20:	2120      	movs	r1, #32
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f7ff f81d 	bl	8006d62 <mem_set>
	si = i = 0; ni = 8;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	2308      	movs	r3, #8
 8007d32:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	617a      	str	r2, [r7, #20]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d94e      	bls.n	8007de6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007d48:	7ffb      	ldrb	r3, [r7, #31]
 8007d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d4c:	d006      	beq.n	8007d5c <create_name+0x54>
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b5c      	cmp	r3, #92	; 0x5c
 8007d52:	d110      	bne.n	8007d76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d54:	e002      	b.n	8007d5c <create_name+0x54>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	4413      	add	r3, r2
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b2f      	cmp	r3, #47	; 0x2f
 8007d66:	d0f6      	beq.n	8007d56 <create_name+0x4e>
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b5c      	cmp	r3, #92	; 0x5c
 8007d72:	d0f0      	beq.n	8007d56 <create_name+0x4e>
			break;
 8007d74:	e038      	b.n	8007de8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d76:	7ffb      	ldrb	r3, [r7, #31]
 8007d78:	2b2e      	cmp	r3, #46	; 0x2e
 8007d7a:	d003      	beq.n	8007d84 <create_name+0x7c>
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d30c      	bcc.n	8007d9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b0b      	cmp	r3, #11
 8007d88:	d002      	beq.n	8007d90 <create_name+0x88>
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d8e:	d001      	beq.n	8007d94 <create_name+0x8c>
 8007d90:	2306      	movs	r3, #6
 8007d92:	e044      	b.n	8007e1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d94:	2308      	movs	r3, #8
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	230b      	movs	r3, #11
 8007d9a:	61bb      	str	r3, [r7, #24]
			continue;
 8007d9c:	e022      	b.n	8007de4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da04      	bge.n	8007db0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007da6:	7ffb      	ldrb	r3, [r7, #31]
 8007da8:	3b80      	subs	r3, #128	; 0x80
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <create_name+0x120>)
 8007dac:	5cd3      	ldrb	r3, [r2, r3]
 8007dae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007db0:	7ffb      	ldrb	r3, [r7, #31]
 8007db2:	4619      	mov	r1, r3
 8007db4:	481d      	ldr	r0, [pc, #116]	; (8007e2c <create_name+0x124>)
 8007db6:	f7ff f815 	bl	8006de4 <chk_chr>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <create_name+0xbc>
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	e02c      	b.n	8007e1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007dc4:	7ffb      	ldrb	r3, [r7, #31]
 8007dc6:	2b60      	cmp	r3, #96	; 0x60
 8007dc8:	d905      	bls.n	8007dd6 <create_name+0xce>
 8007dca:	7ffb      	ldrb	r3, [r7, #31]
 8007dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8007dce:	d802      	bhi.n	8007dd6 <create_name+0xce>
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	3b20      	subs	r3, #32
 8007dd4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	613a      	str	r2, [r7, #16]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4413      	add	r3, r2
 8007de0:	7ffa      	ldrb	r2, [r7, #31]
 8007de2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007de4:	e7a6      	b.n	8007d34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007de6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	441a      	add	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <create_name+0xf4>
 8007df8:	2306      	movs	r3, #6
 8007dfa:	e010      	b.n	8007e1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2be5      	cmp	r3, #229	; 0xe5
 8007e02:	d102      	bne.n	8007e0a <create_name+0x102>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2205      	movs	r2, #5
 8007e08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e0a:	7ffb      	ldrb	r3, [r7, #31]
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d801      	bhi.n	8007e14 <create_name+0x10c>
 8007e10:	2204      	movs	r2, #4
 8007e12:	e000      	b.n	8007e16 <create_name+0x10e>
 8007e14:	2200      	movs	r2, #0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	330b      	adds	r3, #11
 8007e1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	08009c58 	.word	0x08009c58
 8007e2c:	08009bf4 	.word	0x08009bf4

08007e30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e44:	e002      	b.n	8007e4c <follow_path+0x1c>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b2f      	cmp	r3, #47	; 0x2f
 8007e52:	d0f8      	beq.n	8007e46 <follow_path+0x16>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b5c      	cmp	r3, #92	; 0x5c
 8007e5a:	d0f4      	beq.n	8007e46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b1f      	cmp	r3, #31
 8007e68:	d80a      	bhi.n	8007e80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2280      	movs	r2, #128	; 0x80
 8007e6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff fcf9 	bl	800786c <dir_sdi>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]
 8007e7e:	e043      	b.n	8007f08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e80:	463b      	mov	r3, r7
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff3f 	bl	8007d08 <create_name>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d134      	bne.n	8007efe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff feaf 	bl	8007bf8 <dir_find>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ea4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d127      	bne.n	8007f02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d122      	bne.n	8007f02 <follow_path+0xd2>
 8007ebc:	2305      	movs	r3, #5
 8007ebe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ec0:	e01f      	b.n	8007f02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d11c      	bne.n	8007f06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	799b      	ldrb	r3, [r3, #6]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ed8:	2305      	movs	r3, #5
 8007eda:	75fb      	strb	r3, [r7, #23]
 8007edc:	e014      	b.n	8007f08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eec:	4413      	add	r3, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fe42 	bl	8007b7a <ld_clust>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007efc:	e7c0      	b.n	8007e80 <follow_path+0x50>
			if (res != FR_OK) break;
 8007efe:	bf00      	nop
 8007f00:	e002      	b.n	8007f08 <follow_path+0xd8>
				break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f06:	bf00      	nop
			}
		}
	}

	return res;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d031      	beq.n	8007f8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e002      	b.n	8007f36 <get_ldnumber+0x24>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3301      	adds	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d903      	bls.n	8007f46 <get_ldnumber+0x34>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b3a      	cmp	r3, #58	; 0x3a
 8007f44:	d1f4      	bne.n	8007f30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b3a      	cmp	r3, #58	; 0x3a
 8007f4c:	d11c      	bne.n	8007f88 <get_ldnumber+0x76>
			tp = *path;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	60fa      	str	r2, [r7, #12]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	3b30      	subs	r3, #48	; 0x30
 8007f5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d80e      	bhi.n	8007f84 <get_ldnumber+0x72>
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d10a      	bne.n	8007f84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d107      	bne.n	8007f84 <get_ldnumber+0x72>
					vol = (int)i;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	e002      	b.n	8007f8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f8c:	693b      	ldr	r3, [r7, #16]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
	...

08007f9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	70da      	strb	r2, [r3, #3]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff f8e0 	bl	800717c <move_window>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <check_fs+0x2a>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	e038      	b.n	8008038 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3330      	adds	r3, #48	; 0x30
 8007fca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fe24 	bl	8006c1c <ld_word>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d001      	beq.n	8007fe4 <check_fs+0x48>
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e029      	b.n	8008038 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fea:	2be9      	cmp	r3, #233	; 0xe9
 8007fec:	d009      	beq.n	8008002 <check_fs+0x66>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ff4:	2beb      	cmp	r3, #235	; 0xeb
 8007ff6:	d11e      	bne.n	8008036 <check_fs+0x9a>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007ffe:	2b90      	cmp	r3, #144	; 0x90
 8008000:	d119      	bne.n	8008036 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3330      	adds	r3, #48	; 0x30
 8008006:	3336      	adds	r3, #54	; 0x36
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe fe1f 	bl	8006c4c <ld_dword>
 800800e:	4603      	mov	r3, r0
 8008010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008014:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <check_fs+0xa4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d101      	bne.n	800801e <check_fs+0x82>
 800801a:	2300      	movs	r3, #0
 800801c:	e00c      	b.n	8008038 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3330      	adds	r3, #48	; 0x30
 8008022:	3352      	adds	r3, #82	; 0x52
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fe11 	bl	8006c4c <ld_dword>
 800802a:	4602      	mov	r2, r0
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <check_fs+0xa8>)
 800802e:	429a      	cmp	r2, r3
 8008030:	d101      	bne.n	8008036 <check_fs+0x9a>
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008036:	2302      	movs	r3, #2
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	00544146 	.word	0x00544146
 8008044:	33544146 	.word	0x33544146

08008048 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b096      	sub	sp, #88	; 0x58
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff ff58 	bl	8007f12 <get_ldnumber>
 8008062:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	da01      	bge.n	800806e <find_volume+0x26>
 800806a:	230b      	movs	r3, #11
 800806c:	e22e      	b.n	80084cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800806e:	4aa8      	ldr	r2, [pc, #672]	; (8008310 <find_volume+0x2c8>)
 8008070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008076:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <find_volume+0x3a>
 800807e:	230c      	movs	r3, #12
 8008080:	e224      	b.n	80084cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008086:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01a      	beq.n	80080ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fd1f 	bl	8006ae0 <disk_status>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <find_volume+0x82>
 80080ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080c6:	230a      	movs	r3, #10
 80080c8:	e200      	b.n	80084cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80080ca:	2300      	movs	r3, #0
 80080cc:	e1fe      	b.n	80084cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fd17 	bl	8006b14 <disk_initialize>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80080ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080f8:	2303      	movs	r3, #3
 80080fa:	e1e7      	b.n	80084cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <find_volume+0xca>
 8008102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800810e:	230a      	movs	r3, #10
 8008110:	e1dc      	b.n	80084cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800811a:	f7ff ff3f 	bl	8007f9c <check_fs>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008128:	2b02      	cmp	r3, #2
 800812a:	d14b      	bne.n	80081c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800812c:	2300      	movs	r3, #0
 800812e:	643b      	str	r3, [r7, #64]	; 0x40
 8008130:	e01f      	b.n	8008172 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008140:	4413      	add	r3, r2
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	3304      	adds	r3, #4
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <find_volume+0x114>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	3308      	adds	r3, #8
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fd7a 	bl	8006c4c <ld_dword>
 8008158:	4602      	mov	r2, r0
 800815a:	e000      	b.n	800815e <find_volume+0x116>
 800815c:	2200      	movs	r2, #0
 800815e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008166:	440b      	add	r3, r1
 8008168:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	3301      	adds	r3, #1
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	2b03      	cmp	r3, #3
 8008176:	d9dc      	bls.n	8008132 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008178:	2300      	movs	r3, #0
 800817a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800817c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <find_volume+0x140>
 8008182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008184:	3b01      	subs	r3, #1
 8008186:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008190:	4413      	add	r3, r2
 8008192:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008196:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <find_volume+0x162>
 800819e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081a2:	f7ff fefb 	bl	8007f9c <check_fs>
 80081a6:	4603      	mov	r3, r0
 80081a8:	e000      	b.n	80081ac <find_volume+0x164>
 80081aa:	2303      	movs	r3, #3
 80081ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d905      	bls.n	80081c4 <find_volume+0x17c>
 80081b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ba:	3301      	adds	r3, #1
 80081bc:	643b      	str	r3, [r7, #64]	; 0x40
 80081be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d9e1      	bls.n	8008188 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80081c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d101      	bne.n	80081d0 <find_volume+0x188>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e17d      	b.n	80084cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d901      	bls.n	80081dc <find_volume+0x194>
 80081d8:	230d      	movs	r3, #13
 80081da:	e177      	b.n	80084cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	3330      	adds	r3, #48	; 0x30
 80081e0:	330b      	adds	r3, #11
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fd1a 	bl	8006c1c <ld_word>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ee:	d001      	beq.n	80081f4 <find_volume+0x1ac>
 80081f0:	230d      	movs	r3, #13
 80081f2:	e16b      	b.n	80084cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	3330      	adds	r3, #48	; 0x30
 80081f8:	3316      	adds	r3, #22
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fd0e 	bl	8006c1c <ld_word>
 8008200:	4603      	mov	r3, r0
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <find_volume+0x1d0>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	3330      	adds	r3, #48	; 0x30
 800820e:	3324      	adds	r3, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fd1b 	bl	8006c4c <ld_dword>
 8008216:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800821c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	789b      	ldrb	r3, [r3, #2]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d005      	beq.n	800823c <find_volume+0x1f4>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	789b      	ldrb	r3, [r3, #2]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d001      	beq.n	800823c <find_volume+0x1f4>
 8008238:	230d      	movs	r3, #13
 800823a:	e147      	b.n	80084cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	461a      	mov	r2, r3
 8008242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008244:	fb02 f303 	mul.w	r3, r2, r3
 8008248:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b29a      	uxth	r2, r3
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	895b      	ldrh	r3, [r3, #10]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <find_volume+0x228>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	895b      	ldrh	r3, [r3, #10]
 8008262:	461a      	mov	r2, r3
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	895b      	ldrh	r3, [r3, #10]
 8008268:	3b01      	subs	r3, #1
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <find_volume+0x22c>
 8008270:	230d      	movs	r3, #13
 8008272:	e12b      	b.n	80084cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	3330      	adds	r3, #48	; 0x30
 8008278:	3311      	adds	r3, #17
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fcce 	bl	8006c1c <ld_word>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	891b      	ldrh	r3, [r3, #8]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <find_volume+0x252>
 8008296:	230d      	movs	r3, #13
 8008298:	e118      	b.n	80084cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	3330      	adds	r3, #48	; 0x30
 800829e:	3313      	adds	r3, #19
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fcbb 	bl	8006c1c <ld_word>
 80082a6:	4603      	mov	r3, r0
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80082aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <find_volume+0x276>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	3330      	adds	r3, #48	; 0x30
 80082b4:	3320      	adds	r3, #32
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fcc8 	bl	8006c4c <ld_dword>
 80082bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	330e      	adds	r3, #14
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fca9 	bl	8006c1c <ld_word>
 80082ca:	4603      	mov	r3, r0
 80082cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <find_volume+0x290>
 80082d4:	230d      	movs	r3, #13
 80082d6:	e0f9      	b.n	80084cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	4413      	add	r3, r2
 80082de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e0:	8912      	ldrh	r2, [r2, #8]
 80082e2:	0912      	lsrs	r2, r2, #4
 80082e4:	b292      	uxth	r2, r2
 80082e6:	4413      	add	r3, r2
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d201      	bcs.n	80082f6 <find_volume+0x2ae>
 80082f2:	230d      	movs	r3, #13
 80082f4:	e0ea      	b.n	80084cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fe:	8952      	ldrh	r2, [r2, #10]
 8008300:	fbb3 f3f2 	udiv	r3, r3, r2
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <find_volume+0x2cc>
 800830c:	230d      	movs	r3, #13
 800830e:	e0dd      	b.n	80084cc <find_volume+0x484>
 8008310:	200000f8 	.word	0x200000f8
		fmt = FS_FAT32;
 8008314:	2303      	movs	r3, #3
 8008316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008320:	4293      	cmp	r3, r2
 8008322:	d802      	bhi.n	800832a <find_volume+0x2e2>
 8008324:	2302      	movs	r3, #2
 8008326:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008330:	4293      	cmp	r3, r2
 8008332:	d802      	bhi.n	800833a <find_volume+0x2f2>
 8008334:	2301      	movs	r3, #1
 8008336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	1c9a      	adds	r2, r3, #2
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008346:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008348:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800834a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834c:	441a      	add	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	441a      	add	r2, r3
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800835c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008360:	2b03      	cmp	r3, #3
 8008362:	d11e      	bne.n	80083a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	3330      	adds	r3, #48	; 0x30
 8008368:	332a      	adds	r3, #42	; 0x2a
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fc56 	bl	8006c1c <ld_word>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <find_volume+0x332>
 8008376:	230d      	movs	r3, #13
 8008378:	e0a8      	b.n	80084cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <find_volume+0x33e>
 8008382:	230d      	movs	r3, #13
 8008384:	e0a2      	b.n	80084cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	3330      	adds	r3, #48	; 0x30
 800838a:	332c      	adds	r3, #44	; 0x2c
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fc5d 	bl	8006c4c <ld_dword>
 8008392:	4602      	mov	r2, r0
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	647b      	str	r3, [r7, #68]	; 0x44
 80083a0:	e01f      	b.n	80083e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	891b      	ldrh	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <find_volume+0x366>
 80083aa:	230d      	movs	r3, #13
 80083ac:	e08e      	b.n	80084cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	441a      	add	r2, r3
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d103      	bne.n	80083ca <find_volume+0x382>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	e00a      	b.n	80083e0 <find_volume+0x398>
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	4613      	mov	r3, r2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	085a      	lsrs	r2, r3, #1
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80083ec:	0a5b      	lsrs	r3, r3, #9
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d201      	bcs.n	80083f6 <find_volume+0x3ae>
 80083f2:	230d      	movs	r3, #13
 80083f4:	e06a      	b.n	80084cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295
 80083fc:	611a      	str	r2, [r3, #16]
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800840c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008410:	2b03      	cmp	r3, #3
 8008412:	d149      	bne.n	80084a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	3330      	adds	r3, #48	; 0x30
 8008418:	3330      	adds	r3, #48	; 0x30
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fbfe 	bl	8006c1c <ld_word>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d140      	bne.n	80084a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008428:	3301      	adds	r3, #1
 800842a:	4619      	mov	r1, r3
 800842c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800842e:	f7fe fea5 	bl	800717c <move_window>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d137      	bne.n	80084a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	2200      	movs	r2, #0
 800843c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	3330      	adds	r3, #48	; 0x30
 8008442:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fbe8 	bl	8006c1c <ld_word>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008454:	429a      	cmp	r2, r3
 8008456:	d127      	bne.n	80084a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	3330      	adds	r3, #48	; 0x30
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fbf5 	bl	8006c4c <ld_dword>
 8008462:	4602      	mov	r2, r0
 8008464:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <find_volume+0x48c>)
 8008466:	429a      	cmp	r2, r3
 8008468:	d11e      	bne.n	80084a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	3330      	adds	r3, #48	; 0x30
 800846e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fbea 	bl	8006c4c <ld_dword>
 8008478:	4602      	mov	r2, r0
 800847a:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <find_volume+0x490>)
 800847c:	429a      	cmp	r2, r3
 800847e:	d113      	bne.n	80084a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	3330      	adds	r3, #48	; 0x30
 8008484:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fbdf 	bl	8006c4c <ld_dword>
 800848e:	4602      	mov	r2, r0
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	3330      	adds	r3, #48	; 0x30
 8008498:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fbd5 	bl	8006c4c <ld_dword>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80084ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <find_volume+0x494>)
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <find_volume+0x494>)
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <find_volume+0x494>)
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084c6:	f7fe fdf1 	bl	80070ac <clear_lock>
#endif
	return FR_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3758      	adds	r7, #88	; 0x58
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	41615252 	.word	0x41615252
 80084d8:	61417272 	.word	0x61417272
 80084dc:	200000fc 	.word	0x200000fc

080084e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084ea:	2309      	movs	r3, #9
 80084ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01c      	beq.n	800852e <validate+0x4e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <validate+0x4e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d013      	beq.n	800852e <validate+0x4e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	889a      	ldrh	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	429a      	cmp	r2, r3
 8008512:	d10c      	bne.n	800852e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fae0 	bl	8006ae0 <disk_status>
 8008520:	4603      	mov	r3, r0
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <validate+0x4e>
			res = FR_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <validate+0x5a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	e000      	b.n	800853c <validate+0x5c>
 800853a:	2300      	movs	r3, #0
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	6013      	str	r3, [r2, #0]
	return res;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fcd5 	bl	8007f12 <get_ldnumber>
 8008568:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da01      	bge.n	8008574 <f_mount+0x28>
 8008570:	230b      	movs	r3, #11
 8008572:	e02b      	b.n	80085cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <f_mount+0x88>)
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008584:	69b8      	ldr	r0, [r7, #24]
 8008586:	f7fe fd91 	bl	80070ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	490d      	ldr	r1, [pc, #52]	; (80085d4 <f_mount+0x88>)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <f_mount+0x66>
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d001      	beq.n	80085b6 <f_mount+0x6a>
 80085b2:	2300      	movs	r3, #0
 80085b4:	e00a      	b.n	80085cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085b6:	f107 010c 	add.w	r1, r7, #12
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	2200      	movs	r2, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff fd41 	bl	8008048 <find_volume>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200000f8 	.word	0x200000f8

080085d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b098      	sub	sp, #96	; 0x60
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <f_open+0x18>
 80085ec:	2309      	movs	r3, #9
 80085ee:	e1ad      	b.n	800894c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085f8:	79fa      	ldrb	r2, [r7, #7]
 80085fa:	f107 0110 	add.w	r1, r7, #16
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fd20 	bl	8008048 <find_volume>
 8008608:	4603      	mov	r3, r0
 800860a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800860e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8191 	bne.w	800893a <f_open+0x362>
		dj.obj.fs = fs;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	f107 0314 	add.w	r3, r7, #20
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff fc03 	bl	8007e30 <follow_path>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11a      	bne.n	800866e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008638:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da03      	bge.n	800864a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008642:	2306      	movs	r3, #6
 8008644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008648:	e011      	b.n	800866e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fbda 	bl	8006e1c <chk_lock>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	f003 031c 	and.w	r3, r3, #28
 8008674:	2b00      	cmp	r3, #0
 8008676:	d07f      	beq.n	8008778 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867c:	2b00      	cmp	r3, #0
 800867e:	d017      	beq.n	80086b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008684:	2b04      	cmp	r3, #4
 8008686:	d10e      	bne.n	80086a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008688:	f7fe fc24 	bl	8006ed4 <enq_lock>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d006      	beq.n	80086a0 <f_open+0xc8>
 8008692:	f107 0314 	add.w	r3, r7, #20
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fb03 	bl	8007ca2 <dir_register>
 800869c:	4603      	mov	r3, r0
 800869e:	e000      	b.n	80086a2 <f_open+0xca>
 80086a0:	2312      	movs	r3, #18
 80086a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f043 0308 	orr.w	r3, r3, #8
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	e010      	b.n	80086d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086b0:	7ebb      	ldrb	r3, [r7, #26]
 80086b2:	f003 0311 	and.w	r3, r3, #17
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <f_open+0xea>
					res = FR_DENIED;
 80086ba:	2307      	movs	r3, #7
 80086bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086c0:	e007      	b.n	80086d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <f_open+0xfa>
 80086cc:	2308      	movs	r3, #8
 80086ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d168      	bne.n	80087ac <f_open+0x1d4>
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d063      	beq.n	80087ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80086e4:	f7fe f8f4 	bl	80068d0 <get_fattime>
 80086e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	330e      	adds	r3, #14
 80086ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fae9 	bl	8006cc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	3316      	adds	r3, #22
 80086fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fae3 	bl	8006cc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	330b      	adds	r3, #11
 8008706:	2220      	movs	r2, #32
 8008708:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff fa32 	bl	8007b7a <ld_clust>
 8008716:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800871c:	2200      	movs	r2, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fa4a 	bl	8007bb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	331c      	adds	r3, #28
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe facc 	bl	8006cc8 <st_dword>
					fs->wflag = 1;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2201      	movs	r2, #1
 8008734:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d037      	beq.n	80087ac <f_open+0x1d4>
						dw = fs->winsect;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008742:	f107 0314 	add.w	r3, r7, #20
 8008746:	2200      	movs	r2, #0
 8008748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe ff5d 	bl	800760a <remove_chain>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875a:	2b00      	cmp	r3, #0
 800875c:	d126      	bne.n	80087ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fd0a 	bl	800717c <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008772:	3a01      	subs	r2, #1
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	e019      	b.n	80087ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008780:	7ebb      	ldrb	r3, [r7, #26]
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <f_open+0x1ba>
					res = FR_NO_FILE;
 800878a:	2304      	movs	r3, #4
 800878c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008790:	e00c      	b.n	80087ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <f_open+0x1d4>
 800879c:	7ebb      	ldrb	r3, [r7, #26]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <f_open+0x1d4>
						res = FR_DENIED;
 80087a6:	2307      	movs	r3, #7
 80087a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80087ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d128      	bne.n	8008806 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf14      	ite	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	2300      	moveq	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fb93 	bl	8006f18 <inc_lock>
 80087f2:	4602      	mov	r2, r0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <f_open+0x22e>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8095 	bne.w	800893a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f9af 	bl	8007b7a <ld_clust>
 800881c:	4602      	mov	r2, r0
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	331c      	adds	r3, #28
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fa10 	bl	8006c4c <ld_dword>
 800882c:	4602      	mov	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	88da      	ldrh	r2, [r3, #6]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	79fa      	ldrb	r2, [r7, #7]
 800884a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3330      	adds	r3, #48	; 0x30
 8008862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fa7a 	bl	8006d62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	d060      	beq.n	800893a <f_open+0x362>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d05c      	beq.n	800893a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	025b      	lsls	r3, r3, #9
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	657b      	str	r3, [r7, #84]	; 0x54
 800889c:	e016      	b.n	80088cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd25 	bl	80072f2 <get_fat>
 80088a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80088aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d802      	bhi.n	80088b6 <f_open+0x2de>
 80088b0:	2302      	movs	r3, #2
 80088b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d102      	bne.n	80088c4 <f_open+0x2ec>
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	657b      	str	r3, [r7, #84]	; 0x54
 80088cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <f_open+0x304>
 80088d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d8:	429a      	cmp	r2, r3
 80088da:	d8e0      	bhi.n	800889e <f_open+0x2c6>
				}
				fp->clust = clst;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d127      	bne.n	800893a <f_open+0x362>
 80088ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d022      	beq.n	800893a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe fcdb 	bl	80072b4 <clust2sect>
 80088fe:	6478      	str	r0, [r7, #68]	; 0x44
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <f_open+0x336>
						res = FR_INT_ERR;
 8008906:	2302      	movs	r3, #2
 8008908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800890c:	e015      	b.n	800893a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800890e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008910:	0a5a      	lsrs	r2, r3, #9
 8008912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008914:	441a      	add	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	7858      	ldrb	r0, [r3, #1]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	2301      	movs	r3, #1
 800892a:	f7fe f919 	bl	8006b60 <disk_read>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <f_open+0x362>
 8008934:	2301      	movs	r3, #1
 8008936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800893a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <f_open+0x370>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800894c:	4618      	mov	r0, r3
 800894e:	3760      	adds	r7, #96	; 0x60
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08e      	sub	sp, #56	; 0x38
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f107 0214 	add.w	r2, r7, #20
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fdb3 	bl	80084e0 <validate>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <f_read+0x44>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	7d5b      	ldrb	r3, [r3, #21]
 800898c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008990:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <f_read+0x4a>
 8008998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800899c:	e115      	b.n	8008bca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	7d1b      	ldrb	r3, [r3, #20]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <f_read+0x5a>
 80089aa:	2307      	movs	r3, #7
 80089ac:	e10d      	b.n	8008bca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	429a      	cmp	r2, r3
 80089c0:	f240 80fe 	bls.w	8008bc0 <f_read+0x26c>
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80089c8:	e0fa      	b.n	8008bc0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 80c6 	bne.w	8008b64 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	8952      	ldrh	r2, [r2, #10]
 80089e2:	3a01      	subs	r2, #1
 80089e4:	4013      	ands	r3, r2
 80089e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d12f      	bne.n	8008a4e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	633b      	str	r3, [r7, #48]	; 0x30
 80089fc:	e013      	b.n	8008a26 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7fe fef9 	bl	8007804 <clmt_clust>
 8008a12:	6338      	str	r0, [r7, #48]	; 0x30
 8008a14:	e007      	b.n	8008a26 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7fe fc67 	bl	80072f2 <get_fat>
 8008a24:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d804      	bhi.n	8008a36 <f_read+0xe2>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	755a      	strb	r2, [r3, #21]
 8008a32:	2302      	movs	r3, #2
 8008a34:	e0c9      	b.n	8008bca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d104      	bne.n	8008a48 <f_read+0xf4>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	755a      	strb	r2, [r3, #21]
 8008a44:	2301      	movs	r3, #1
 8008a46:	e0c0      	b.n	8008bca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fe fc2c 	bl	80072b4 <clust2sect>
 8008a5c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <f_read+0x11a>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2202      	movs	r2, #2
 8008a68:	755a      	strb	r2, [r3, #21]
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e0ad      	b.n	8008bca <f_read+0x276>
			sect += csect;
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	0a5b      	lsrs	r3, r3, #9
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d039      	beq.n	8008af6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	4413      	add	r3, r2
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	8952      	ldrh	r2, [r2, #10]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d905      	bls.n	8008a9c <f_read+0x148>
					cc = fs->csize - csect;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	895b      	ldrh	r3, [r3, #10]
 8008a94:	461a      	mov	r2, r3
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	7858      	ldrb	r0, [r3, #1]
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aa6:	f7fe f85b 	bl	8006b60 <disk_read>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <f_read+0x166>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	755a      	strb	r2, [r3, #21]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e087      	b.n	8008bca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	7d1b      	ldrb	r3, [r3, #20]
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da14      	bge.n	8008aee <f_read+0x19a>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1a      	ldr	r2, [r3, #32]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d90d      	bls.n	8008aee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	025b      	lsls	r3, r3, #9
 8008adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ade:	18d0      	adds	r0, r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3330      	adds	r3, #48	; 0x30
 8008ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f7fe f919 	bl	8006d20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	025b      	lsls	r3, r3, #9
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008af4:	e050      	b.n	8008b98 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d02e      	beq.n	8008b5e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da18      	bge.n	8008b3c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	7858      	ldrb	r0, [r3, #1]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f7fe f841 	bl	8006ba0 <disk_write>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <f_read+0x1da>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	755a      	strb	r2, [r3, #21]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e04d      	b.n	8008bca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	7d1b      	ldrb	r3, [r3, #20]
 8008b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	7858      	ldrb	r0, [r3, #1]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b46:	2301      	movs	r3, #1
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	f7fe f809 	bl	8006b60 <disk_read>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <f_read+0x20a>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	755a      	strb	r2, [r3, #21]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e035      	b.n	8008bca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d901      	bls.n	8008b7e <f_read+0x22a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	4413      	add	r3, r2
 8008b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b90:	4619      	mov	r1, r3
 8008b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b94:	f7fe f8c4 	bl	8006d20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	4413      	add	r3, r2
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	699a      	ldr	r2, [r3, #24]
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	441a      	add	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	619a      	str	r2, [r3, #24]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	441a      	add	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f47f af01 	bne.w	80089ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3738      	adds	r7, #56	; 0x38
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b08c      	sub	sp, #48	; 0x30
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f107 0210 	add.w	r2, r7, #16
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fc74 	bl	80084e0 <validate>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <f_write+0x44>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	7d5b      	ldrb	r3, [r3, #21]
 8008c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <f_write+0x4a>
 8008c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c1a:	e14b      	b.n	8008eb4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	7d1b      	ldrb	r3, [r3, #20]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <f_write+0x5a>
 8008c28:	2307      	movs	r3, #7
 8008c2a:	e143      	b.n	8008eb4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699a      	ldr	r2, [r3, #24]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	441a      	add	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	f080 812d 	bcs.w	8008e98 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	43db      	mvns	r3, r3
 8008c44:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c46:	e127      	b.n	8008e98 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 80e3 	bne.w	8008e1c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	0a5b      	lsrs	r3, r3, #9
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	8952      	ldrh	r2, [r2, #10]
 8008c60:	3a01      	subs	r2, #1
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d143      	bne.n	8008cf4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10c      	bne.n	8008c8e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11a      	bne.n	8008cb6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fd25 	bl	80076d4 <create_chain>
 8008c8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c8c:	e013      	b.n	8008cb6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7fe fdb1 	bl	8007804 <clmt_clust>
 8008ca2:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ca4:	e007      	b.n	8008cb6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fd10 	bl	80076d4 <create_chain>
 8008cb4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80f2 	beq.w	8008ea2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d104      	bne.n	8008cce <f_write+0xfc>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	755a      	strb	r2, [r3, #21]
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e0f2      	b.n	8008eb4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d104      	bne.n	8008ce0 <f_write+0x10e>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	755a      	strb	r2, [r3, #21]
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e0e9      	b.n	8008eb4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <f_write+0x122>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	b25b      	sxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da18      	bge.n	8008d30 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	7858      	ldrb	r0, [r3, #1]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1a      	ldr	r2, [r3, #32]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f7fd ff47 	bl	8006ba0 <disk_write>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <f_write+0x150>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	755a      	strb	r2, [r3, #21]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0c8      	b.n	8008eb4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	7d1b      	ldrb	r3, [r3, #20]
 8008d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7fe fabb 	bl	80072b4 <clust2sect>
 8008d3e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <f_write+0x17e>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	755a      	strb	r2, [r3, #21]
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e0b1      	b.n	8008eb4 <f_write+0x2e2>
			sect += csect;
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	4413      	add	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	0a5b      	lsrs	r3, r3, #9
 8008d5c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d03c      	beq.n	8008dde <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	4413      	add	r3, r2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	8952      	ldrh	r2, [r2, #10]
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d905      	bls.n	8008d7e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	461a      	mov	r2, r3
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	7858      	ldrb	r0, [r3, #1]
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	69f9      	ldr	r1, [r7, #28]
 8008d88:	f7fd ff0a 	bl	8006ba0 <disk_write>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <f_write+0x1ca>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	755a      	strb	r2, [r3, #21]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e08b      	b.n	8008eb4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1a      	ldr	r2, [r3, #32]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	6a3a      	ldr	r2, [r7, #32]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d915      	bls.n	8008dd6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1a      	ldr	r2, [r3, #32]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	025b      	lsls	r3, r3, #9
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	f7fd ffac 	bl	8006d20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	7d1b      	ldrb	r3, [r3, #20]
 8008dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	025b      	lsls	r3, r3, #9
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ddc:	e03f      	b.n	8008e5e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d016      	beq.n	8008e16 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d210      	bcs.n	8008e16 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	7858      	ldrb	r0, [r3, #1]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dfe:	2301      	movs	r3, #1
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	f7fd fead 	bl	8006b60 <disk_read>
 8008e06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	755a      	strb	r2, [r3, #21]
 8008e12:	2301      	movs	r3, #1
 8008e14:	e04e      	b.n	8008eb4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d901      	bls.n	8008e36 <f_write+0x264>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	4413      	add	r3, r2
 8008e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e48:	69f9      	ldr	r1, [r7, #28]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd ff68 	bl	8006d20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	7d1b      	ldrb	r3, [r3, #20]
 8008e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	4413      	add	r3, r2
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	619a      	str	r2, [r3, #24]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	bf38      	it	cc
 8008e7e:	461a      	movcc	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	441a      	add	r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f47f aed4 	bne.w	8008c48 <f_write+0x76>
 8008ea0:	e000      	b.n	8008ea4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ea2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	7d1b      	ldrb	r3, [r3, #20]
 8008ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3730      	adds	r7, #48	; 0x30
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f107 0208 	add.w	r2, r7, #8
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fb07 	bl	80084e0 <validate>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d168      	bne.n	8008fae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7d1b      	ldrb	r3, [r3, #20]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d062      	beq.n	8008fae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7d1b      	ldrb	r3, [r3, #20]
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da15      	bge.n	8008f1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	7858      	ldrb	r0, [r3, #1]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	2301      	movs	r3, #1
 8008f02:	f7fd fe4d 	bl	8006ba0 <disk_write>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <f_sync+0x54>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e04f      	b.n	8008fb0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7d1b      	ldrb	r3, [r3, #20]
 8008f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f1e:	f7fd fcd7 	bl	80068d0 <get_fattime>
 8008f22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f925 	bl	800717c <move_window>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d138      	bne.n	8008fae <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	330b      	adds	r3, #11
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	330b      	adds	r3, #11
 8008f4c:	f042 0220 	orr.w	r2, r2, #32
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	f7fe fe2a 	bl	8007bb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f103 021c 	add.w	r2, r3, #28
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fd fea9 	bl	8006cc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3316      	adds	r3, #22
 8008f7a:	6939      	ldr	r1, [r7, #16]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fea3 	bl	8006cc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3312      	adds	r3, #18
 8008f86:	2100      	movs	r1, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd fe82 	bl	8006c92 <st_word>
					fs->wflag = 1;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2201      	movs	r2, #1
 8008f92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe f91e 	bl	80071d8 <sync_fs>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7d1b      	ldrb	r3, [r3, #20]
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff7b 	bl	8008ebc <f_sync>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d118      	bne.n	8009002 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f107 0208 	add.w	r2, r7, #8
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fa81 	bl	80084e0 <validate>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe f821 	bl	8007034 <dec_lock>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800901a:	2301      	movs	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009022:	4b1f      	ldr	r3, [pc, #124]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 8009024:	7a5b      	ldrb	r3, [r3, #9]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d131      	bne.n	8009090 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800902c:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 800902e:	7a5b      	ldrb	r3, [r3, #9]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 8009036:	2100      	movs	r1, #0
 8009038:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800903a:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 800903c:	7a5b      	ldrb	r3, [r3, #9]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	4a17      	ldr	r2, [pc, #92]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800904a:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 800904c:	7a5b      	ldrb	r3, [r3, #9]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	461a      	mov	r2, r3
 8009052:	4b13      	ldr	r3, [pc, #76]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 8009054:	4413      	add	r3, r2
 8009056:	79fa      	ldrb	r2, [r7, #7]
 8009058:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800905a:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 800905c:	7a5b      	ldrb	r3, [r3, #9]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	b2d1      	uxtb	r1, r2
 8009064:	4a0e      	ldr	r2, [pc, #56]	; (80090a0 <FATFS_LinkDriverEx+0x94>)
 8009066:	7251      	strb	r1, [r2, #9]
 8009068:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800906a:	7dbb      	ldrb	r3, [r7, #22]
 800906c:	3330      	adds	r3, #48	; 0x30
 800906e:	b2da      	uxtb	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	3301      	adds	r3, #1
 8009078:	223a      	movs	r2, #58	; 0x3a
 800907a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3302      	adds	r3, #2
 8009080:	222f      	movs	r2, #47	; 0x2f
 8009082:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	3303      	adds	r3, #3
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20000120 	.word	0x20000120

080090a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090ae:	2200      	movs	r2, #0
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ffaa 	bl	800900c <FATFS_LinkDriverEx>
 80090b8:	4603      	mov	r3, r0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <__libc_init_array>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	4e0d      	ldr	r6, [pc, #52]	; (80090fc <__libc_init_array+0x38>)
 80090c8:	4c0d      	ldr	r4, [pc, #52]	; (8009100 <__libc_init_array+0x3c>)
 80090ca:	1ba4      	subs	r4, r4, r6
 80090cc:	10a4      	asrs	r4, r4, #2
 80090ce:	2500      	movs	r5, #0
 80090d0:	42a5      	cmp	r5, r4
 80090d2:	d109      	bne.n	80090e8 <__libc_init_array+0x24>
 80090d4:	4e0b      	ldr	r6, [pc, #44]	; (8009104 <__libc_init_array+0x40>)
 80090d6:	4c0c      	ldr	r4, [pc, #48]	; (8009108 <__libc_init_array+0x44>)
 80090d8:	f000 fd6c 	bl	8009bb4 <_init>
 80090dc:	1ba4      	subs	r4, r4, r6
 80090de:	10a4      	asrs	r4, r4, #2
 80090e0:	2500      	movs	r5, #0
 80090e2:	42a5      	cmp	r5, r4
 80090e4:	d105      	bne.n	80090f2 <__libc_init_array+0x2e>
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090ec:	4798      	blx	r3
 80090ee:	3501      	adds	r5, #1
 80090f0:	e7ee      	b.n	80090d0 <__libc_init_array+0xc>
 80090f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090f6:	4798      	blx	r3
 80090f8:	3501      	adds	r5, #1
 80090fa:	e7f2      	b.n	80090e2 <__libc_init_array+0x1e>
 80090fc:	0800a0b0 	.word	0x0800a0b0
 8009100:	0800a0b0 	.word	0x0800a0b0
 8009104:	0800a0b0 	.word	0x0800a0b0
 8009108:	0800a0b4 	.word	0x0800a0b4

0800910c <memset>:
 800910c:	4402      	add	r2, r0
 800910e:	4603      	mov	r3, r0
 8009110:	4293      	cmp	r3, r2
 8009112:	d100      	bne.n	8009116 <memset+0xa>
 8009114:	4770      	bx	lr
 8009116:	f803 1b01 	strb.w	r1, [r3], #1
 800911a:	e7f9      	b.n	8009110 <memset+0x4>

0800911c <sinf>:
 800911c:	ee10 3a10 	vmov	r3, s0
 8009120:	b507      	push	{r0, r1, r2, lr}
 8009122:	4a1d      	ldr	r2, [pc, #116]	; (8009198 <sinf+0x7c>)
 8009124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009128:	4293      	cmp	r3, r2
 800912a:	dc05      	bgt.n	8009138 <sinf+0x1c>
 800912c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800919c <sinf+0x80>
 8009130:	2000      	movs	r0, #0
 8009132:	f000 fc41 	bl	80099b8 <__kernel_sinf>
 8009136:	e004      	b.n	8009142 <sinf+0x26>
 8009138:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800913c:	db04      	blt.n	8009148 <sinf+0x2c>
 800913e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009142:	b003      	add	sp, #12
 8009144:	f85d fb04 	ldr.w	pc, [sp], #4
 8009148:	4668      	mov	r0, sp
 800914a:	f000 f829 	bl	80091a0 <__ieee754_rem_pio2f>
 800914e:	f000 0003 	and.w	r0, r0, #3
 8009152:	2801      	cmp	r0, #1
 8009154:	d008      	beq.n	8009168 <sinf+0x4c>
 8009156:	2802      	cmp	r0, #2
 8009158:	d00d      	beq.n	8009176 <sinf+0x5a>
 800915a:	b9b0      	cbnz	r0, 800918a <sinf+0x6e>
 800915c:	2001      	movs	r0, #1
 800915e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009162:	ed9d 0a00 	vldr	s0, [sp]
 8009166:	e7e4      	b.n	8009132 <sinf+0x16>
 8009168:	eddd 0a01 	vldr	s1, [sp, #4]
 800916c:	ed9d 0a00 	vldr	s0, [sp]
 8009170:	f000 f942 	bl	80093f8 <__kernel_cosf>
 8009174:	e7e5      	b.n	8009142 <sinf+0x26>
 8009176:	2001      	movs	r0, #1
 8009178:	eddd 0a01 	vldr	s1, [sp, #4]
 800917c:	ed9d 0a00 	vldr	s0, [sp]
 8009180:	f000 fc1a 	bl	80099b8 <__kernel_sinf>
 8009184:	eeb1 0a40 	vneg.f32	s0, s0
 8009188:	e7db      	b.n	8009142 <sinf+0x26>
 800918a:	eddd 0a01 	vldr	s1, [sp, #4]
 800918e:	ed9d 0a00 	vldr	s0, [sp]
 8009192:	f000 f931 	bl	80093f8 <__kernel_cosf>
 8009196:	e7f5      	b.n	8009184 <sinf+0x68>
 8009198:	3f490fd8 	.word	0x3f490fd8
 800919c:	00000000 	.word	0x00000000

080091a0 <__ieee754_rem_pio2f>:
 80091a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a2:	ee10 6a10 	vmov	r6, s0
 80091a6:	4b86      	ldr	r3, [pc, #536]	; (80093c0 <__ieee754_rem_pio2f+0x220>)
 80091a8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80091ac:	429c      	cmp	r4, r3
 80091ae:	b087      	sub	sp, #28
 80091b0:	4605      	mov	r5, r0
 80091b2:	dc05      	bgt.n	80091c0 <__ieee754_rem_pio2f+0x20>
 80091b4:	2300      	movs	r3, #0
 80091b6:	ed85 0a00 	vstr	s0, [r5]
 80091ba:	6043      	str	r3, [r0, #4]
 80091bc:	2000      	movs	r0, #0
 80091be:	e020      	b.n	8009202 <__ieee754_rem_pio2f+0x62>
 80091c0:	4b80      	ldr	r3, [pc, #512]	; (80093c4 <__ieee754_rem_pio2f+0x224>)
 80091c2:	429c      	cmp	r4, r3
 80091c4:	dc38      	bgt.n	8009238 <__ieee754_rem_pio2f+0x98>
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	f024 040f 	bic.w	r4, r4, #15
 80091cc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80093c8 <__ieee754_rem_pio2f+0x228>
 80091d0:	4b7e      	ldr	r3, [pc, #504]	; (80093cc <__ieee754_rem_pio2f+0x22c>)
 80091d2:	dd18      	ble.n	8009206 <__ieee754_rem_pio2f+0x66>
 80091d4:	429c      	cmp	r4, r3
 80091d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80091da:	bf09      	itett	eq
 80091dc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80093d0 <__ieee754_rem_pio2f+0x230>
 80091e0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80093d4 <__ieee754_rem_pio2f+0x234>
 80091e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80091e8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80093d8 <__ieee754_rem_pio2f+0x238>
 80091ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80091f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091f4:	edc0 6a00 	vstr	s13, [r0]
 80091f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8009200:	2001      	movs	r0, #1
 8009202:	b007      	add	sp, #28
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009206:	429c      	cmp	r4, r3
 8009208:	ee70 7a07 	vadd.f32	s15, s0, s14
 800920c:	bf09      	itett	eq
 800920e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80093d0 <__ieee754_rem_pio2f+0x230>
 8009212:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80093d4 <__ieee754_rem_pio2f+0x234>
 8009216:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800921a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80093d8 <__ieee754_rem_pio2f+0x238>
 800921e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009222:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009226:	edc0 6a00 	vstr	s13, [r0]
 800922a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	e7e4      	b.n	8009202 <__ieee754_rem_pio2f+0x62>
 8009238:	4b68      	ldr	r3, [pc, #416]	; (80093dc <__ieee754_rem_pio2f+0x23c>)
 800923a:	429c      	cmp	r4, r3
 800923c:	dc71      	bgt.n	8009322 <__ieee754_rem_pio2f+0x182>
 800923e:	f000 fc03 	bl	8009a48 <fabsf>
 8009242:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80093e0 <__ieee754_rem_pio2f+0x240>
 8009246:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800924a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800924e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009252:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009256:	ee17 0a90 	vmov	r0, s15
 800925a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80093c8 <__ieee754_rem_pio2f+0x228>
 800925e:	eeb1 7a46 	vneg.f32	s14, s12
 8009262:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009266:	281f      	cmp	r0, #31
 8009268:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80093d4 <__ieee754_rem_pio2f+0x234>
 800926c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009270:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009274:	ee16 3a90 	vmov	r3, s13
 8009278:	dc1c      	bgt.n	80092b4 <__ieee754_rem_pio2f+0x114>
 800927a:	1e47      	subs	r7, r0, #1
 800927c:	4959      	ldr	r1, [pc, #356]	; (80093e4 <__ieee754_rem_pio2f+0x244>)
 800927e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009282:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009286:	428a      	cmp	r2, r1
 8009288:	d014      	beq.n	80092b4 <__ieee754_rem_pio2f+0x114>
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	ed95 7a00 	vldr	s14, [r5]
 8009290:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009294:	2e00      	cmp	r6, #0
 8009296:	ee30 0a67 	vsub.f32	s0, s0, s15
 800929a:	ed85 0a01 	vstr	s0, [r5, #4]
 800929e:	dab0      	bge.n	8009202 <__ieee754_rem_pio2f+0x62>
 80092a0:	eeb1 7a47 	vneg.f32	s14, s14
 80092a4:	eeb1 0a40 	vneg.f32	s0, s0
 80092a8:	ed85 7a00 	vstr	s14, [r5]
 80092ac:	ed85 0a01 	vstr	s0, [r5, #4]
 80092b0:	4240      	negs	r0, r0
 80092b2:	e7a6      	b.n	8009202 <__ieee754_rem_pio2f+0x62>
 80092b4:	15e4      	asrs	r4, r4, #23
 80092b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80092ba:	1aa2      	subs	r2, r4, r2
 80092bc:	2a08      	cmp	r2, #8
 80092be:	dde4      	ble.n	800928a <__ieee754_rem_pio2f+0xea>
 80092c0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80093d0 <__ieee754_rem_pio2f+0x230>
 80092c4:	eef0 6a40 	vmov.f32	s13, s0
 80092c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092cc:	ee30 0a66 	vsub.f32	s0, s0, s13
 80092d0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80092d4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80093d8 <__ieee754_rem_pio2f+0x238>
 80092d8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80092dc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80092e0:	eef0 7a40 	vmov.f32	s15, s0
 80092e4:	ee15 3a90 	vmov	r3, s11
 80092e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80092ec:	1aa4      	subs	r4, r4, r2
 80092ee:	2c19      	cmp	r4, #25
 80092f0:	dc04      	bgt.n	80092fc <__ieee754_rem_pio2f+0x15c>
 80092f2:	edc5 5a00 	vstr	s11, [r5]
 80092f6:	eeb0 0a66 	vmov.f32	s0, s13
 80092fa:	e7c7      	b.n	800928c <__ieee754_rem_pio2f+0xec>
 80092fc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80093e8 <__ieee754_rem_pio2f+0x248>
 8009300:	eeb0 0a66 	vmov.f32	s0, s13
 8009304:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009308:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800930c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009310:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80093ec <__ieee754_rem_pio2f+0x24c>
 8009314:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009318:	ee30 7a67 	vsub.f32	s14, s0, s15
 800931c:	ed85 7a00 	vstr	s14, [r5]
 8009320:	e7b4      	b.n	800928c <__ieee754_rem_pio2f+0xec>
 8009322:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009326:	db06      	blt.n	8009336 <__ieee754_rem_pio2f+0x196>
 8009328:	ee70 7a40 	vsub.f32	s15, s0, s0
 800932c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009330:	edc0 7a00 	vstr	s15, [r0]
 8009334:	e742      	b.n	80091bc <__ieee754_rem_pio2f+0x1c>
 8009336:	15e2      	asrs	r2, r4, #23
 8009338:	3a86      	subs	r2, #134	; 0x86
 800933a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009346:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80093f0 <__ieee754_rem_pio2f+0x250>
 800934a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800934e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009352:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009356:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800935a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800935e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009366:	ed8d 7a04 	vstr	s14, [sp, #16]
 800936a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800936e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009376:	edcd 7a05 	vstr	s15, [sp, #20]
 800937a:	d11e      	bne.n	80093ba <__ieee754_rem_pio2f+0x21a>
 800937c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2302      	movne	r3, #2
 800938a:	491a      	ldr	r1, [pc, #104]	; (80093f4 <__ieee754_rem_pio2f+0x254>)
 800938c:	9101      	str	r1, [sp, #4]
 800938e:	2102      	movs	r1, #2
 8009390:	9100      	str	r1, [sp, #0]
 8009392:	a803      	add	r0, sp, #12
 8009394:	4629      	mov	r1, r5
 8009396:	f000 f88d 	bl	80094b4 <__kernel_rem_pio2f>
 800939a:	2e00      	cmp	r6, #0
 800939c:	f6bf af31 	bge.w	8009202 <__ieee754_rem_pio2f+0x62>
 80093a0:	edd5 7a00 	vldr	s15, [r5]
 80093a4:	eef1 7a67 	vneg.f32	s15, s15
 80093a8:	edc5 7a00 	vstr	s15, [r5]
 80093ac:	edd5 7a01 	vldr	s15, [r5, #4]
 80093b0:	eef1 7a67 	vneg.f32	s15, s15
 80093b4:	edc5 7a01 	vstr	s15, [r5, #4]
 80093b8:	e77a      	b.n	80092b0 <__ieee754_rem_pio2f+0x110>
 80093ba:	2303      	movs	r3, #3
 80093bc:	e7e5      	b.n	800938a <__ieee754_rem_pio2f+0x1ea>
 80093be:	bf00      	nop
 80093c0:	3f490fd8 	.word	0x3f490fd8
 80093c4:	4016cbe3 	.word	0x4016cbe3
 80093c8:	3fc90f80 	.word	0x3fc90f80
 80093cc:	3fc90fd0 	.word	0x3fc90fd0
 80093d0:	37354400 	.word	0x37354400
 80093d4:	37354443 	.word	0x37354443
 80093d8:	2e85a308 	.word	0x2e85a308
 80093dc:	43490f80 	.word	0x43490f80
 80093e0:	3f22f984 	.word	0x3f22f984
 80093e4:	08009cd8 	.word	0x08009cd8
 80093e8:	2e85a300 	.word	0x2e85a300
 80093ec:	248d3132 	.word	0x248d3132
 80093f0:	43800000 	.word	0x43800000
 80093f4:	08009d58 	.word	0x08009d58

080093f8 <__kernel_cosf>:
 80093f8:	ee10 3a10 	vmov	r3, s0
 80093fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009400:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009408:	da05      	bge.n	8009416 <__kernel_cosf+0x1e>
 800940a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800940e:	ee17 2a90 	vmov	r2, s15
 8009412:	2a00      	cmp	r2, #0
 8009414:	d03b      	beq.n	800948e <__kernel_cosf+0x96>
 8009416:	ee20 6a00 	vmul.f32	s12, s0, s0
 800941a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800941e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009494 <__kernel_cosf+0x9c>
 8009422:	4a1d      	ldr	r2, [pc, #116]	; (8009498 <__kernel_cosf+0xa0>)
 8009424:	ee66 7a07 	vmul.f32	s15, s12, s14
 8009428:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800949c <__kernel_cosf+0xa4>
 800942c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009430:	4293      	cmp	r3, r2
 8009432:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80094a0 <__kernel_cosf+0xa8>
 8009436:	eee7 5a06 	vfma.f32	s11, s14, s12
 800943a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80094a4 <__kernel_cosf+0xac>
 800943e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009442:	eddf 5a19 	vldr	s11, [pc, #100]	; 80094a8 <__kernel_cosf+0xb0>
 8009446:	eee7 5a06 	vfma.f32	s11, s14, s12
 800944a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80094ac <__kernel_cosf+0xb4>
 800944e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009452:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8009456:	ee27 7a06 	vmul.f32	s14, s14, s12
 800945a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800945e:	dc04      	bgt.n	800946a <__kernel_cosf+0x72>
 8009460:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8009464:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8009468:	4770      	bx	lr
 800946a:	4a11      	ldr	r2, [pc, #68]	; (80094b0 <__kernel_cosf+0xb8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	bfda      	itte	le
 8009470:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009474:	ee07 3a10 	vmovle	s14, r3
 8009478:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800947c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009480:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8009484:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009488:	ee30 0a67 	vsub.f32	s0, s0, s15
 800948c:	4770      	bx	lr
 800948e:	eeb0 0a66 	vmov.f32	s0, s13
 8009492:	4770      	bx	lr
 8009494:	ad47d74e 	.word	0xad47d74e
 8009498:	3e999999 	.word	0x3e999999
 800949c:	310f74f6 	.word	0x310f74f6
 80094a0:	b493f27c 	.word	0xb493f27c
 80094a4:	37d00d01 	.word	0x37d00d01
 80094a8:	bab60b61 	.word	0xbab60b61
 80094ac:	3d2aaaab 	.word	0x3d2aaaab
 80094b0:	3f480000 	.word	0x3f480000

080094b4 <__kernel_rem_pio2f>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	ed2d 8b04 	vpush	{d8-d9}
 80094bc:	b0d7      	sub	sp, #348	; 0x15c
 80094be:	469b      	mov	fp, r3
 80094c0:	460e      	mov	r6, r1
 80094c2:	4bbe      	ldr	r3, [pc, #760]	; (80097bc <__kernel_rem_pio2f+0x308>)
 80094c4:	9964      	ldr	r1, [sp, #400]	; 0x190
 80094c6:	9002      	str	r0, [sp, #8]
 80094c8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80094cc:	9865      	ldr	r0, [sp, #404]	; 0x194
 80094ce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80097cc <__kernel_rem_pio2f+0x318>
 80094d2:	1ed1      	subs	r1, r2, #3
 80094d4:	2308      	movs	r3, #8
 80094d6:	fb91 f1f3 	sdiv	r1, r1, r3
 80094da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80094de:	f10b 3aff 	add.w	sl, fp, #4294967295
 80094e2:	1c4c      	adds	r4, r1, #1
 80094e4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80094e8:	eba1 050a 	sub.w	r5, r1, sl
 80094ec:	aa1a      	add	r2, sp, #104	; 0x68
 80094ee:	eb09 070a 	add.w	r7, r9, sl
 80094f2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80094f6:	4696      	mov	lr, r2
 80094f8:	2300      	movs	r3, #0
 80094fa:	42bb      	cmp	r3, r7
 80094fc:	dd0f      	ble.n	800951e <__kernel_rem_pio2f+0x6a>
 80094fe:	af42      	add	r7, sp, #264	; 0x108
 8009500:	2200      	movs	r2, #0
 8009502:	454a      	cmp	r2, r9
 8009504:	dc27      	bgt.n	8009556 <__kernel_rem_pio2f+0xa2>
 8009506:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800950a:	eb0b 0302 	add.w	r3, fp, r2
 800950e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8009512:	9d02      	ldr	r5, [sp, #8]
 8009514:	eddf 7aad 	vldr	s15, [pc, #692]	; 80097cc <__kernel_rem_pio2f+0x318>
 8009518:	f04f 0c00 	mov.w	ip, #0
 800951c:	e015      	b.n	800954a <__kernel_rem_pio2f+0x96>
 800951e:	42dd      	cmn	r5, r3
 8009520:	bf5d      	ittte	pl
 8009522:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8009526:	ee07 2a90 	vmovpl	s15, r2
 800952a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800952e:	eef0 7a47 	vmovmi.f32	s15, s14
 8009532:	ecee 7a01 	vstmia	lr!, {s15}
 8009536:	3301      	adds	r3, #1
 8009538:	e7df      	b.n	80094fa <__kernel_rem_pio2f+0x46>
 800953a:	ecf5 6a01 	vldmia	r5!, {s13}
 800953e:	ed33 7a01 	vldmdb	r3!, {s14}
 8009542:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009546:	f10c 0c01 	add.w	ip, ip, #1
 800954a:	45d4      	cmp	ip, sl
 800954c:	ddf5      	ble.n	800953a <__kernel_rem_pio2f+0x86>
 800954e:	ece7 7a01 	vstmia	r7!, {s15}
 8009552:	3201      	adds	r2, #1
 8009554:	e7d5      	b.n	8009502 <__kernel_rem_pio2f+0x4e>
 8009556:	ab06      	add	r3, sp, #24
 8009558:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80097c8 <__kernel_rem_pio2f+0x314>
 8009562:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80097c4 <__kernel_rem_pio2f+0x310>
 8009566:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	464d      	mov	r5, r9
 800956e:	ab56      	add	r3, sp, #344	; 0x158
 8009570:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8009574:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009578:	3f01      	subs	r7, #1
 800957a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800957e:	00bf      	lsls	r7, r7, #2
 8009580:	ab56      	add	r3, sp, #344	; 0x158
 8009582:	19da      	adds	r2, r3, r7
 8009584:	3a4c      	subs	r2, #76	; 0x4c
 8009586:	2300      	movs	r3, #0
 8009588:	1ae9      	subs	r1, r5, r3
 800958a:	2900      	cmp	r1, #0
 800958c:	dc4c      	bgt.n	8009628 <__kernel_rem_pio2f+0x174>
 800958e:	4620      	mov	r0, r4
 8009590:	f000 faa4 	bl	8009adc <scalbnf>
 8009594:	eeb0 8a40 	vmov.f32	s16, s0
 8009598:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800959c:	ee28 0a00 	vmul.f32	s0, s16, s0
 80095a0:	f000 fa5a 	bl	8009a58 <floorf>
 80095a4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80095a8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80095ac:	2c00      	cmp	r4, #0
 80095ae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80095b2:	edcd 7a01 	vstr	s15, [sp, #4]
 80095b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 80095be:	dd48      	ble.n	8009652 <__kernel_rem_pio2f+0x19e>
 80095c0:	1e69      	subs	r1, r5, #1
 80095c2:	ab06      	add	r3, sp, #24
 80095c4:	f1c4 0008 	rsb	r0, r4, #8
 80095c8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	fa4c f300 	asr.w	r3, ip, r0
 80095d2:	441a      	add	r2, r3
 80095d4:	4083      	lsls	r3, r0
 80095d6:	9201      	str	r2, [sp, #4]
 80095d8:	ebac 0203 	sub.w	r2, ip, r3
 80095dc:	ab06      	add	r3, sp, #24
 80095de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80095e2:	f1c4 0307 	rsb	r3, r4, #7
 80095e6:	fa42 f803 	asr.w	r8, r2, r3
 80095ea:	f1b8 0f00 	cmp.w	r8, #0
 80095ee:	dd41      	ble.n	8009674 <__kernel_rem_pio2f+0x1c0>
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	2000      	movs	r0, #0
 80095f4:	3301      	adds	r3, #1
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	4601      	mov	r1, r0
 80095fa:	4285      	cmp	r5, r0
 80095fc:	dc6d      	bgt.n	80096da <__kernel_rem_pio2f+0x226>
 80095fe:	2c00      	cmp	r4, #0
 8009600:	dd04      	ble.n	800960c <__kernel_rem_pio2f+0x158>
 8009602:	2c01      	cmp	r4, #1
 8009604:	d07e      	beq.n	8009704 <__kernel_rem_pio2f+0x250>
 8009606:	2c02      	cmp	r4, #2
 8009608:	f000 8086 	beq.w	8009718 <__kernel_rem_pio2f+0x264>
 800960c:	f1b8 0f02 	cmp.w	r8, #2
 8009610:	d130      	bne.n	8009674 <__kernel_rem_pio2f+0x1c0>
 8009612:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009616:	ee30 8a48 	vsub.f32	s16, s0, s16
 800961a:	b359      	cbz	r1, 8009674 <__kernel_rem_pio2f+0x1c0>
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fa5d 	bl	8009adc <scalbnf>
 8009622:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009626:	e025      	b.n	8009674 <__kernel_rem_pio2f+0x1c0>
 8009628:	ee60 7a28 	vmul.f32	s15, s0, s17
 800962c:	a806      	add	r0, sp, #24
 800962e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009636:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800963a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800963e:	ee10 1a10 	vmov	r1, s0
 8009642:	ed32 0a01 	vldmdb	r2!, {s0}
 8009646:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800964a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800964e:	3301      	adds	r3, #1
 8009650:	e79a      	b.n	8009588 <__kernel_rem_pio2f+0xd4>
 8009652:	d106      	bne.n	8009662 <__kernel_rem_pio2f+0x1ae>
 8009654:	1e6b      	subs	r3, r5, #1
 8009656:	aa06      	add	r2, sp, #24
 8009658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800965c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8009660:	e7c3      	b.n	80095ea <__kernel_rem_pio2f+0x136>
 8009662:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009666:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966e:	da31      	bge.n	80096d4 <__kernel_rem_pio2f+0x220>
 8009670:	f04f 0800 	mov.w	r8, #0
 8009674:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	f040 80a8 	bne.w	80097d0 <__kernel_rem_pio2f+0x31c>
 8009680:	1e6b      	subs	r3, r5, #1
 8009682:	4618      	mov	r0, r3
 8009684:	2200      	movs	r2, #0
 8009686:	4548      	cmp	r0, r9
 8009688:	da4d      	bge.n	8009726 <__kernel_rem_pio2f+0x272>
 800968a:	2a00      	cmp	r2, #0
 800968c:	f000 8087 	beq.w	800979e <__kernel_rem_pio2f+0x2ea>
 8009690:	aa06      	add	r2, sp, #24
 8009692:	3c08      	subs	r4, #8
 8009694:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009698:	2900      	cmp	r1, #0
 800969a:	f000 808d 	beq.w	80097b8 <__kernel_rem_pio2f+0x304>
 800969e:	4620      	mov	r0, r4
 80096a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	f000 fa19 	bl	8009adc <scalbnf>
 80096aa:	9b02      	ldr	r3, [sp, #8]
 80096ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80097c8 <__kernel_rem_pio2f+0x314>
 80096b0:	0099      	lsls	r1, r3, #2
 80096b2:	aa42      	add	r2, sp, #264	; 0x108
 80096b4:	1850      	adds	r0, r2, r1
 80096b6:	1d05      	adds	r5, r0, #4
 80096b8:	461c      	mov	r4, r3
 80096ba:	2c00      	cmp	r4, #0
 80096bc:	f280 80b8 	bge.w	8009830 <__kernel_rem_pio2f+0x37c>
 80096c0:	2500      	movs	r5, #0
 80096c2:	1b5c      	subs	r4, r3, r5
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	f2c0 80d8 	blt.w	800987a <__kernel_rem_pio2f+0x3c6>
 80096ca:	4f3d      	ldr	r7, [pc, #244]	; (80097c0 <__kernel_rem_pio2f+0x30c>)
 80096cc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80097cc <__kernel_rem_pio2f+0x318>
 80096d0:	2400      	movs	r4, #0
 80096d2:	e0c6      	b.n	8009862 <__kernel_rem_pio2f+0x3ae>
 80096d4:	f04f 0802 	mov.w	r8, #2
 80096d8:	e78a      	b.n	80095f0 <__kernel_rem_pio2f+0x13c>
 80096da:	ab06      	add	r3, sp, #24
 80096dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80096e0:	b949      	cbnz	r1, 80096f6 <__kernel_rem_pio2f+0x242>
 80096e2:	b12b      	cbz	r3, 80096f0 <__kernel_rem_pio2f+0x23c>
 80096e4:	aa06      	add	r2, sp, #24
 80096e6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80096ea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80096ee:	2301      	movs	r3, #1
 80096f0:	3001      	adds	r0, #1
 80096f2:	4619      	mov	r1, r3
 80096f4:	e781      	b.n	80095fa <__kernel_rem_pio2f+0x146>
 80096f6:	aa06      	add	r2, sp, #24
 80096f8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80096fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009700:	460b      	mov	r3, r1
 8009702:	e7f5      	b.n	80096f0 <__kernel_rem_pio2f+0x23c>
 8009704:	1e68      	subs	r0, r5, #1
 8009706:	ab06      	add	r3, sp, #24
 8009708:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800970c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009710:	aa06      	add	r2, sp, #24
 8009712:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009716:	e779      	b.n	800960c <__kernel_rem_pio2f+0x158>
 8009718:	1e68      	subs	r0, r5, #1
 800971a:	ab06      	add	r3, sp, #24
 800971c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009724:	e7f4      	b.n	8009710 <__kernel_rem_pio2f+0x25c>
 8009726:	a906      	add	r1, sp, #24
 8009728:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800972c:	3801      	subs	r0, #1
 800972e:	430a      	orrs	r2, r1
 8009730:	e7a9      	b.n	8009686 <__kernel_rem_pio2f+0x1d2>
 8009732:	f10c 0c01 	add.w	ip, ip, #1
 8009736:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800973a:	2a00      	cmp	r2, #0
 800973c:	d0f9      	beq.n	8009732 <__kernel_rem_pio2f+0x27e>
 800973e:	eb0b 0305 	add.w	r3, fp, r5
 8009742:	aa1a      	add	r2, sp, #104	; 0x68
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	1898      	adds	r0, r3, r2
 8009748:	3004      	adds	r0, #4
 800974a:	1c69      	adds	r1, r5, #1
 800974c:	3704      	adds	r7, #4
 800974e:	2200      	movs	r2, #0
 8009750:	4465      	add	r5, ip
 8009752:	9005      	str	r0, [sp, #20]
 8009754:	428d      	cmp	r5, r1
 8009756:	f6ff af0a 	blt.w	800956e <__kernel_rem_pio2f+0xba>
 800975a:	a81a      	add	r0, sp, #104	; 0x68
 800975c:	eb02 0c03 	add.w	ip, r2, r3
 8009760:	4484      	add	ip, r0
 8009762:	9803      	ldr	r0, [sp, #12]
 8009764:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009768:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800976c:	9001      	str	r0, [sp, #4]
 800976e:	ee07 0a90 	vmov	s15, r0
 8009772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009776:	9805      	ldr	r0, [sp, #20]
 8009778:	edcc 7a00 	vstr	s15, [ip]
 800977c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80097cc <__kernel_rem_pio2f+0x318>
 8009780:	eb00 0802 	add.w	r8, r0, r2
 8009784:	f04f 0c00 	mov.w	ip, #0
 8009788:	45d4      	cmp	ip, sl
 800978a:	dd0c      	ble.n	80097a6 <__kernel_rem_pio2f+0x2f2>
 800978c:	eb02 0c07 	add.w	ip, r2, r7
 8009790:	a842      	add	r0, sp, #264	; 0x108
 8009792:	4484      	add	ip, r0
 8009794:	edcc 7a01 	vstr	s15, [ip, #4]
 8009798:	3101      	adds	r1, #1
 800979a:	3204      	adds	r2, #4
 800979c:	e7da      	b.n	8009754 <__kernel_rem_pio2f+0x2a0>
 800979e:	9b04      	ldr	r3, [sp, #16]
 80097a0:	f04f 0c01 	mov.w	ip, #1
 80097a4:	e7c7      	b.n	8009736 <__kernel_rem_pio2f+0x282>
 80097a6:	ecfe 6a01 	vldmia	lr!, {s13}
 80097aa:	ed38 7a01 	vldmdb	r8!, {s14}
 80097ae:	f10c 0c01 	add.w	ip, ip, #1
 80097b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097b6:	e7e7      	b.n	8009788 <__kernel_rem_pio2f+0x2d4>
 80097b8:	3b01      	subs	r3, #1
 80097ba:	e769      	b.n	8009690 <__kernel_rem_pio2f+0x1dc>
 80097bc:	0800a09c 	.word	0x0800a09c
 80097c0:	0800a070 	.word	0x0800a070
 80097c4:	43800000 	.word	0x43800000
 80097c8:	3b800000 	.word	0x3b800000
 80097cc:	00000000 	.word	0x00000000
 80097d0:	4260      	negs	r0, r4
 80097d2:	eeb0 0a48 	vmov.f32	s0, s16
 80097d6:	f000 f981 	bl	8009adc <scalbnf>
 80097da:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80097c4 <__kernel_rem_pio2f+0x310>
 80097de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80097e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e6:	db1a      	blt.n	800981e <__kernel_rem_pio2f+0x36a>
 80097e8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80097c8 <__kernel_rem_pio2f+0x314>
 80097ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80097f0:	aa06      	add	r2, sp, #24
 80097f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097f6:	a906      	add	r1, sp, #24
 80097f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097fc:	3408      	adds	r4, #8
 80097fe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009806:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800980a:	ee10 3a10 	vmov	r3, s0
 800980e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009812:	1c6b      	adds	r3, r5, #1
 8009814:	ee17 2a90 	vmov	r2, s15
 8009818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800981c:	e73f      	b.n	800969e <__kernel_rem_pio2f+0x1ea>
 800981e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009822:	aa06      	add	r2, sp, #24
 8009824:	ee10 3a10 	vmov	r3, s0
 8009828:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800982c:	462b      	mov	r3, r5
 800982e:	e736      	b.n	800969e <__kernel_rem_pio2f+0x1ea>
 8009830:	aa06      	add	r2, sp, #24
 8009832:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	ee07 2a90 	vmov	s15, r2
 800983c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009840:	3c01      	subs	r4, #1
 8009842:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009846:	ee20 0a07 	vmul.f32	s0, s0, s14
 800984a:	ed65 7a01 	vstmdb	r5!, {s15}
 800984e:	e734      	b.n	80096ba <__kernel_rem_pio2f+0x206>
 8009850:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8009854:	ecf7 6a01 	vldmia	r7!, {s13}
 8009858:	ed9c 7a00 	vldr	s14, [ip]
 800985c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009860:	3401      	adds	r4, #1
 8009862:	454c      	cmp	r4, r9
 8009864:	dc01      	bgt.n	800986a <__kernel_rem_pio2f+0x3b6>
 8009866:	42a5      	cmp	r5, r4
 8009868:	daf2      	bge.n	8009850 <__kernel_rem_pio2f+0x39c>
 800986a:	aa56      	add	r2, sp, #344	; 0x158
 800986c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8009870:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8009874:	3501      	adds	r5, #1
 8009876:	3804      	subs	r0, #4
 8009878:	e723      	b.n	80096c2 <__kernel_rem_pio2f+0x20e>
 800987a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800987c:	2a03      	cmp	r2, #3
 800987e:	d84d      	bhi.n	800991c <__kernel_rem_pio2f+0x468>
 8009880:	e8df f002 	tbb	[pc, r2]
 8009884:	021f1f3e 	.word	0x021f1f3e
 8009888:	aa56      	add	r2, sp, #344	; 0x158
 800988a:	4411      	add	r1, r2
 800988c:	399c      	subs	r1, #156	; 0x9c
 800988e:	4608      	mov	r0, r1
 8009890:	461c      	mov	r4, r3
 8009892:	2c00      	cmp	r4, #0
 8009894:	dc5f      	bgt.n	8009956 <__kernel_rem_pio2f+0x4a2>
 8009896:	4608      	mov	r0, r1
 8009898:	461c      	mov	r4, r3
 800989a:	2c01      	cmp	r4, #1
 800989c:	dc6b      	bgt.n	8009976 <__kernel_rem_pio2f+0x4c2>
 800989e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80097cc <__kernel_rem_pio2f+0x318>
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	dc77      	bgt.n	8009996 <__kernel_rem_pio2f+0x4e2>
 80098a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80098aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80098ae:	f1b8 0f00 	cmp.w	r8, #0
 80098b2:	d176      	bne.n	80099a2 <__kernel_rem_pio2f+0x4ee>
 80098b4:	edc6 6a00 	vstr	s13, [r6]
 80098b8:	ed86 7a01 	vstr	s14, [r6, #4]
 80098bc:	edc6 7a02 	vstr	s15, [r6, #8]
 80098c0:	e02c      	b.n	800991c <__kernel_rem_pio2f+0x468>
 80098c2:	aa56      	add	r2, sp, #344	; 0x158
 80098c4:	4411      	add	r1, r2
 80098c6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80097cc <__kernel_rem_pio2f+0x318>
 80098ca:	399c      	subs	r1, #156	; 0x9c
 80098cc:	4618      	mov	r0, r3
 80098ce:	2800      	cmp	r0, #0
 80098d0:	da32      	bge.n	8009938 <__kernel_rem_pio2f+0x484>
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d035      	beq.n	8009944 <__kernel_rem_pio2f+0x490>
 80098d8:	eef1 7a47 	vneg.f32	s15, s14
 80098dc:	edc6 7a00 	vstr	s15, [r6]
 80098e0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80098e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098e8:	a82f      	add	r0, sp, #188	; 0xbc
 80098ea:	2101      	movs	r1, #1
 80098ec:	428b      	cmp	r3, r1
 80098ee:	da2c      	bge.n	800994a <__kernel_rem_pio2f+0x496>
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	d001      	beq.n	80098fa <__kernel_rem_pio2f+0x446>
 80098f6:	eef1 7a67 	vneg.f32	s15, s15
 80098fa:	edc6 7a01 	vstr	s15, [r6, #4]
 80098fe:	e00d      	b.n	800991c <__kernel_rem_pio2f+0x468>
 8009900:	aa56      	add	r2, sp, #344	; 0x158
 8009902:	4411      	add	r1, r2
 8009904:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80097cc <__kernel_rem_pio2f+0x318>
 8009908:	399c      	subs	r1, #156	; 0x9c
 800990a:	2b00      	cmp	r3, #0
 800990c:	da0e      	bge.n	800992c <__kernel_rem_pio2f+0x478>
 800990e:	f1b8 0f00 	cmp.w	r8, #0
 8009912:	d001      	beq.n	8009918 <__kernel_rem_pio2f+0x464>
 8009914:	eef1 7a67 	vneg.f32	s15, s15
 8009918:	edc6 7a00 	vstr	s15, [r6]
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	f003 0007 	and.w	r0, r3, #7
 8009922:	b057      	add	sp, #348	; 0x15c
 8009924:	ecbd 8b04 	vpop	{d8-d9}
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	ed31 7a01 	vldmdb	r1!, {s14}
 8009930:	3b01      	subs	r3, #1
 8009932:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009936:	e7e8      	b.n	800990a <__kernel_rem_pio2f+0x456>
 8009938:	ed71 7a01 	vldmdb	r1!, {s15}
 800993c:	3801      	subs	r0, #1
 800993e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009942:	e7c4      	b.n	80098ce <__kernel_rem_pio2f+0x41a>
 8009944:	eef0 7a47 	vmov.f32	s15, s14
 8009948:	e7c8      	b.n	80098dc <__kernel_rem_pio2f+0x428>
 800994a:	ecb0 7a01 	vldmia	r0!, {s14}
 800994e:	3101      	adds	r1, #1
 8009950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009954:	e7ca      	b.n	80098ec <__kernel_rem_pio2f+0x438>
 8009956:	ed50 7a02 	vldr	s15, [r0, #-8]
 800995a:	ed70 6a01 	vldmdb	r0!, {s13}
 800995e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009962:	3c01      	subs	r4, #1
 8009964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009968:	ed00 7a01 	vstr	s14, [r0, #-4]
 800996c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009970:	edc0 7a00 	vstr	s15, [r0]
 8009974:	e78d      	b.n	8009892 <__kernel_rem_pio2f+0x3de>
 8009976:	ed50 7a02 	vldr	s15, [r0, #-8]
 800997a:	ed70 6a01 	vldmdb	r0!, {s13}
 800997e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009982:	3c01      	subs	r4, #1
 8009984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009988:	ed00 7a01 	vstr	s14, [r0, #-4]
 800998c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009990:	edc0 7a00 	vstr	s15, [r0]
 8009994:	e781      	b.n	800989a <__kernel_rem_pio2f+0x3e6>
 8009996:	ed31 7a01 	vldmdb	r1!, {s14}
 800999a:	3b01      	subs	r3, #1
 800999c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099a0:	e77f      	b.n	80098a2 <__kernel_rem_pio2f+0x3ee>
 80099a2:	eef1 6a66 	vneg.f32	s13, s13
 80099a6:	eeb1 7a47 	vneg.f32	s14, s14
 80099aa:	edc6 6a00 	vstr	s13, [r6]
 80099ae:	ed86 7a01 	vstr	s14, [r6, #4]
 80099b2:	eef1 7a67 	vneg.f32	s15, s15
 80099b6:	e781      	b.n	80098bc <__kernel_rem_pio2f+0x408>

080099b8 <__kernel_sinf>:
 80099b8:	ee10 3a10 	vmov	r3, s0
 80099bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80099c4:	da04      	bge.n	80099d0 <__kernel_sinf+0x18>
 80099c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80099ca:	ee17 3a90 	vmov	r3, s15
 80099ce:	b35b      	cbz	r3, 8009a28 <__kernel_sinf+0x70>
 80099d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80099d4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009a2c <__kernel_sinf+0x74>
 80099d8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009a30 <__kernel_sinf+0x78>
 80099dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80099e0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009a34 <__kernel_sinf+0x7c>
 80099e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80099e8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009a38 <__kernel_sinf+0x80>
 80099ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80099f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009a3c <__kernel_sinf+0x84>
 80099f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80099f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80099fc:	b930      	cbnz	r0, 8009a0c <__kernel_sinf+0x54>
 80099fe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009a40 <__kernel_sinf+0x88>
 8009a02:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a06:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009a0a:	4770      	bx	lr
 8009a0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009a14:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009a18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009a1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009a44 <__kernel_sinf+0x8c>
 8009a20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009a24:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009a30:	b2d72f34 	.word	0xb2d72f34
 8009a34:	3638ef1b 	.word	0x3638ef1b
 8009a38:	b9500d01 	.word	0xb9500d01
 8009a3c:	3c088889 	.word	0x3c088889
 8009a40:	be2aaaab 	.word	0xbe2aaaab
 8009a44:	3e2aaaab 	.word	0x3e2aaaab

08009a48 <fabsf>:
 8009a48:	ee10 3a10 	vmov	r3, s0
 8009a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a50:	ee00 3a10 	vmov	s0, r3
 8009a54:	4770      	bx	lr
	...

08009a58 <floorf>:
 8009a58:	ee10 3a10 	vmov	r3, s0
 8009a5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a60:	0dca      	lsrs	r2, r1, #23
 8009a62:	3a7f      	subs	r2, #127	; 0x7f
 8009a64:	2a16      	cmp	r2, #22
 8009a66:	dc2a      	bgt.n	8009abe <floorf+0x66>
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	da11      	bge.n	8009a90 <floorf+0x38>
 8009a6c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009ad0 <floorf+0x78>
 8009a70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	dd05      	ble.n	8009a8a <floorf+0x32>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da23      	bge.n	8009aca <floorf+0x72>
 8009a82:	4a14      	ldr	r2, [pc, #80]	; (8009ad4 <floorf+0x7c>)
 8009a84:	2900      	cmp	r1, #0
 8009a86:	bf18      	it	ne
 8009a88:	4613      	movne	r3, r2
 8009a8a:	ee00 3a10 	vmov	s0, r3
 8009a8e:	4770      	bx	lr
 8009a90:	4911      	ldr	r1, [pc, #68]	; (8009ad8 <floorf+0x80>)
 8009a92:	4111      	asrs	r1, r2
 8009a94:	420b      	tst	r3, r1
 8009a96:	d0fa      	beq.n	8009a8e <floorf+0x36>
 8009a98:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009ad0 <floorf+0x78>
 8009a9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa8:	ddef      	ble.n	8009a8a <floorf+0x32>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bfbe      	ittt	lt
 8009aae:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009ab2:	fa40 f202 	asrlt.w	r2, r0, r2
 8009ab6:	189b      	addlt	r3, r3, r2
 8009ab8:	ea23 0301 	bic.w	r3, r3, r1
 8009abc:	e7e5      	b.n	8009a8a <floorf+0x32>
 8009abe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ac2:	d3e4      	bcc.n	8009a8e <floorf+0x36>
 8009ac4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ac8:	4770      	bx	lr
 8009aca:	2300      	movs	r3, #0
 8009acc:	e7dd      	b.n	8009a8a <floorf+0x32>
 8009ace:	bf00      	nop
 8009ad0:	7149f2ca 	.word	0x7149f2ca
 8009ad4:	bf800000 	.word	0xbf800000
 8009ad8:	007fffff 	.word	0x007fffff

08009adc <scalbnf>:
 8009adc:	b508      	push	{r3, lr}
 8009ade:	ee10 2a10 	vmov	r2, s0
 8009ae2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009ae6:	ed2d 8b02 	vpush	{d8}
 8009aea:	eef0 0a40 	vmov.f32	s1, s0
 8009aee:	d004      	beq.n	8009afa <scalbnf+0x1e>
 8009af0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009af4:	d306      	bcc.n	8009b04 <scalbnf+0x28>
 8009af6:	ee70 0a00 	vadd.f32	s1, s0, s0
 8009afa:	ecbd 8b02 	vpop	{d8}
 8009afe:	eeb0 0a60 	vmov.f32	s0, s1
 8009b02:	bd08      	pop	{r3, pc}
 8009b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b08:	d21c      	bcs.n	8009b44 <scalbnf+0x68>
 8009b0a:	4b1f      	ldr	r3, [pc, #124]	; (8009b88 <scalbnf+0xac>)
 8009b0c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009b8c <scalbnf+0xb0>
 8009b10:	4298      	cmp	r0, r3
 8009b12:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009b16:	db10      	blt.n	8009b3a <scalbnf+0x5e>
 8009b18:	ee10 2a90 	vmov	r2, s1
 8009b1c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009b20:	3b19      	subs	r3, #25
 8009b22:	4403      	add	r3, r0
 8009b24:	2bfe      	cmp	r3, #254	; 0xfe
 8009b26:	dd0f      	ble.n	8009b48 <scalbnf+0x6c>
 8009b28:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009b90 <scalbnf+0xb4>
 8009b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b30:	f000 f834 	bl	8009b9c <copysignf>
 8009b34:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009b38:	e7df      	b.n	8009afa <scalbnf+0x1e>
 8009b3a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009b94 <scalbnf+0xb8>
 8009b3e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009b42:	e7da      	b.n	8009afa <scalbnf+0x1e>
 8009b44:	0ddb      	lsrs	r3, r3, #23
 8009b46:	e7ec      	b.n	8009b22 <scalbnf+0x46>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dd06      	ble.n	8009b5a <scalbnf+0x7e>
 8009b4c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009b50:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009b54:	ee00 3a90 	vmov	s1, r3
 8009b58:	e7cf      	b.n	8009afa <scalbnf+0x1e>
 8009b5a:	f113 0f16 	cmn.w	r3, #22
 8009b5e:	da06      	bge.n	8009b6e <scalbnf+0x92>
 8009b60:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009b64:	4298      	cmp	r0, r3
 8009b66:	dcdf      	bgt.n	8009b28 <scalbnf+0x4c>
 8009b68:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009b94 <scalbnf+0xb8>
 8009b6c:	e7de      	b.n	8009b2c <scalbnf+0x50>
 8009b6e:	3319      	adds	r3, #25
 8009b70:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009b74:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009b78:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009b98 <scalbnf+0xbc>
 8009b7c:	ee07 3a10 	vmov	s14, r3
 8009b80:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009b84:	e7b9      	b.n	8009afa <scalbnf+0x1e>
 8009b86:	bf00      	nop
 8009b88:	ffff3cb0 	.word	0xffff3cb0
 8009b8c:	4c000000 	.word	0x4c000000
 8009b90:	7149f2ca 	.word	0x7149f2ca
 8009b94:	0da24260 	.word	0x0da24260
 8009b98:	33000000 	.word	0x33000000

08009b9c <copysignf>:
 8009b9c:	ee10 3a10 	vmov	r3, s0
 8009ba0:	ee10 2a90 	vmov	r2, s1
 8009ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ba8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009bac:	4313      	orrs	r3, r2
 8009bae:	ee00 3a10 	vmov	s0, r3
 8009bb2:	4770      	bx	lr

08009bb4 <_init>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	bf00      	nop
 8009bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bba:	bc08      	pop	{r3}
 8009bbc:	469e      	mov	lr, r3
 8009bbe:	4770      	bx	lr

08009bc0 <_fini>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr
